
GameController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001694  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00001694  00001728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008000b6  008000b6  0000177e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000177e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000265f  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c87  00000000  00000000  00003ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001341  00000000  00000000  00004c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e0  00000000  00000000  00005fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b7  00000000  00000000  0000649c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a50  00000000  00000000  00006e53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000088a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       c:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__vector_3>
      10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      14:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      1c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      2c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      4c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      54:	37 06       	cpc	r3, r23
      56:	3e 06       	cpc	r3, r30
      58:	3e 06       	cpc	r3, r30
      5a:	3e 06       	cpc	r3, r30
      5c:	3e 06       	cpc	r3, r30
      5e:	3e 06       	cpc	r3, r30
      60:	3e 06       	cpc	r3, r30
      62:	3e 06       	cpc	r3, r30
      64:	3e 06       	cpc	r3, r30
      66:	3e 06       	cpc	r3, r30
      68:	3e 06       	cpc	r3, r30
      6a:	3e 06       	cpc	r3, r30
      6c:	3e 06       	cpc	r3, r30
      6e:	3e 06       	cpc	r3, r30
      70:	3e 06       	cpc	r3, r30
      72:	3e 06       	cpc	r3, r30
      74:	3e 06       	cpc	r3, r30
      76:	3e 06       	cpc	r3, r30
      78:	3e 06       	cpc	r3, r30
      7a:	3e 06       	cpc	r3, r30
      7c:	3e 06       	cpc	r3, r30
      7e:	3e 06       	cpc	r3, r30
      80:	3e 06       	cpc	r3, r30
      82:	3e 06       	cpc	r3, r30
      84:	3e 06       	cpc	r3, r30
      86:	3e 06       	cpc	r3, r30
      88:	3e 06       	cpc	r3, r30
      8a:	3e 06       	cpc	r3, r30
      8c:	3e 06       	cpc	r3, r30
      8e:	11 06       	cpc	r1, r17
      90:	89 05       	cpc	r24, r9
      92:	ac 05       	cpc	r26, r12
      94:	3e 06       	cpc	r3, r30
      96:	21 06       	cpc	r2, r17
      98:	3e 06       	cpc	r3, r30
      9a:	3e 06       	cpc	r3, r30
      9c:	3e 06       	cpc	r3, r30
      9e:	3e 06       	cpc	r3, r30
      a0:	3e 06       	cpc	r3, r30
      a2:	3e 06       	cpc	r3, r30
      a4:	3e 06       	cpc	r3, r30
      a6:	3e 06       	cpc	r3, r30
      a8:	3e 06       	cpc	r3, r30
      aa:	3e 06       	cpc	r3, r30
      ac:	3e 06       	cpc	r3, r30
      ae:	3e 06       	cpc	r3, r30
      b0:	2c 06       	cpc	r2, r28
      b2:	3e 06       	cpc	r3, r30
      b4:	d7 05       	cpc	r29, r7
      b6:	3e 06       	cpc	r3, r30
      b8:	3e 06       	cpc	r3, r30
      ba:	f3 05       	cpc	r31, r3
      bc:	3e 06       	cpc	r3, r30
      be:	3e 06       	cpc	r3, r30
      c0:	3e 06       	cpc	r3, r30
      c2:	3e 06       	cpc	r3, r30
      c4:	3e 06       	cpc	r3, r30
      c6:	3e 06       	cpc	r3, r30
      c8:	3e 06       	cpc	r3, r30
      ca:	3e 06       	cpc	r3, r30
      cc:	3e 06       	cpc	r3, r30
      ce:	01 06       	cpc	r0, r17
      d0:	89 05       	cpc	r24, r9
      d2:	94 05       	cpc	r25, r4
      d4:	3e 06       	cpc	r3, r30
      d6:	21 06       	cpc	r2, r17
      d8:	3e 06       	cpc	r3, r30
      da:	3e 06       	cpc	r3, r30
      dc:	3e 06       	cpc	r3, r30
      de:	3e 06       	cpc	r3, r30
      e0:	3e 06       	cpc	r3, r30
      e2:	3e 06       	cpc	r3, r30
      e4:	3e 06       	cpc	r3, r30
      e6:	3e 06       	cpc	r3, r30
      e8:	3e 06       	cpc	r3, r30
      ea:	3e 06       	cpc	r3, r30
      ec:	3e 06       	cpc	r3, r30
      ee:	3e 06       	cpc	r3, r30
      f0:	2c 06       	cpc	r2, r28
      f2:	3e 06       	cpc	r3, r30
      f4:	c9 05       	cpc	r28, r9
      f6:	3e 06       	cpc	r3, r30
      f8:	3e 06       	cpc	r3, r30
      fa:	e5 05       	cpc	r30, r5
      fc:	37 06       	cpc	r3, r23
      fe:	3e 06       	cpc	r3, r30
     100:	3e 06       	cpc	r3, r30
     102:	3e 06       	cpc	r3, r30
     104:	3e 06       	cpc	r3, r30
     106:	3e 06       	cpc	r3, r30
     108:	3e 06       	cpc	r3, r30
     10a:	3e 06       	cpc	r3, r30
     10c:	3e 06       	cpc	r3, r30
     10e:	3e 06       	cpc	r3, r30
     110:	3e 06       	cpc	r3, r30
     112:	3e 06       	cpc	r3, r30
     114:	3e 06       	cpc	r3, r30
     116:	3e 06       	cpc	r3, r30
     118:	3e 06       	cpc	r3, r30
     11a:	3e 06       	cpc	r3, r30
     11c:	3e 06       	cpc	r3, r30
     11e:	3e 06       	cpc	r3, r30
     120:	3e 06       	cpc	r3, r30
     122:	3e 06       	cpc	r3, r30
     124:	3e 06       	cpc	r3, r30
     126:	3e 06       	cpc	r3, r30
     128:	3e 06       	cpc	r3, r30
     12a:	3e 06       	cpc	r3, r30
     12c:	3e 06       	cpc	r3, r30
     12e:	3e 06       	cpc	r3, r30
     130:	3e 06       	cpc	r3, r30
     132:	3e 06       	cpc	r3, r30
     134:	3e 06       	cpc	r3, r30
     136:	48 06       	cpc	r4, r24
     138:	89 05       	cpc	r24, r9
     13a:	ab 05       	cpc	r26, r11
     13c:	3e 06       	cpc	r3, r30
     13e:	21 06       	cpc	r2, r17
     140:	3e 06       	cpc	r3, r30
     142:	3e 06       	cpc	r3, r30
     144:	3e 06       	cpc	r3, r30
     146:	3e 06       	cpc	r3, r30
     148:	3e 06       	cpc	r3, r30
     14a:	3e 06       	cpc	r3, r30
     14c:	3e 06       	cpc	r3, r30
     14e:	3e 06       	cpc	r3, r30
     150:	3e 06       	cpc	r3, r30
     152:	3e 06       	cpc	r3, r30
     154:	3e 06       	cpc	r3, r30
     156:	3e 06       	cpc	r3, r30
     158:	2c 06       	cpc	r2, r28
     15a:	3e 06       	cpc	r3, r30
     15c:	d6 05       	cpc	r29, r6
     15e:	3e 06       	cpc	r3, r30
     160:	3e 06       	cpc	r3, r30
     162:	f2 05       	cpc	r31, r2
     164:	3e 06       	cpc	r3, r30
     166:	3e 06       	cpc	r3, r30
     168:	3e 06       	cpc	r3, r30
     16a:	3e 06       	cpc	r3, r30
     16c:	3e 06       	cpc	r3, r30
     16e:	3e 06       	cpc	r3, r30
     170:	3e 06       	cpc	r3, r30
     172:	3e 06       	cpc	r3, r30
     174:	3e 06       	cpc	r3, r30
     176:	00 06       	cpc	r0, r16
     178:	89 05       	cpc	r24, r9
     17a:	93 05       	cpc	r25, r3
     17c:	3e 06       	cpc	r3, r30
     17e:	21 06       	cpc	r2, r17
     180:	3e 06       	cpc	r3, r30
     182:	3e 06       	cpc	r3, r30
     184:	3e 06       	cpc	r3, r30
     186:	3e 06       	cpc	r3, r30
     188:	3e 06       	cpc	r3, r30
     18a:	3e 06       	cpc	r3, r30
     18c:	3e 06       	cpc	r3, r30
     18e:	3e 06       	cpc	r3, r30
     190:	3e 06       	cpc	r3, r30
     192:	3e 06       	cpc	r3, r30
     194:	3e 06       	cpc	r3, r30
     196:	3e 06       	cpc	r3, r30
     198:	2c 06       	cpc	r2, r28
     19a:	3e 06       	cpc	r3, r30
     19c:	c8 05       	cpc	r28, r8
     19e:	3e 06       	cpc	r3, r30
     1a0:	3e 06       	cpc	r3, r30
     1a2:	e4 05       	cpc	r30, r4

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf e5       	ldi	r28, 0x5F	; 95
     1aa:	d8 e0       	ldi	r29, 0x08	; 8
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	10 e0       	ldi	r17, 0x00	; 0
     1b2:	a0 e6       	ldi	r26, 0x60	; 96
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	e4 e9       	ldi	r30, 0x94	; 148
     1b8:	f6 e1       	ldi	r31, 0x16	; 22
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	a6 3b       	cpi	r26, 0xB6	; 182
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	a6 eb       	ldi	r26, 0xB6	; 182
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	ab 3d       	cpi	r26, 0xDB	; 219
     1d2:	b2 07       	cpc	r27, r18
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	0e 94 af 06 	call	0xd5e	; 0xd5e <main>
     1da:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <_exit>

000001de <__bad_interrupt>:
     1de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e2 <DELAY_us>:
         if 5000 is passed as the argument then it generates a delay of 5ms.		  

 ***************************************************************************************************/
void DELAY_us(uint16_t us_count) 
{
    while (us_count != 0) 
     1e2:	00 97       	sbiw	r24, 0x00	; 0
     1e4:	19 f0       	breq	.+6      	; 0x1ec <DELAY_us+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e6:	00 00       	nop
    {
        _delay_us(1);
		us_count--;
     1e8:	01 97       	sbiw	r24, 0x01	; 1
         if 5000 is passed as the argument then it generates a delay of 5ms.		  

 ***************************************************************************************************/
void DELAY_us(uint16_t us_count) 
{
    while (us_count != 0) 
     1ea:	e9 f7       	brne	.-6      	; 0x1e6 <DELAY_us+0x4>
     1ec:	08 95       	ret

000001ee <DELAY_ms>:
     It generates a delay of 1ms for each count,
     if 1000 is passed as the argument then it generates delay of 1000ms(1sec)
 ***************************************************************************************************/
void DELAY_ms(uint16_t ms_count) 
{
    while (ms_count != 0) 
     1ee:	00 97       	sbiw	r24, 0x00	; 0
     1f0:	41 f0       	breq	.+16     	; 0x202 <DELAY_ms+0x14>
     1f2:	e9 ef       	ldi	r30, 0xF9	; 249
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	31 97       	sbiw	r30, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <DELAY_ms+0x8>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <DELAY_ms+0xe>
     1fc:	00 00       	nop
    {
        _delay_us(1000); //DELAY_us is called to generate 1ms delay
        ms_count--;
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     It generates a delay of 1ms for each count,
     if 1000 is passed as the argument then it generates delay of 1000ms(1sec)
 ***************************************************************************************************/
void DELAY_ms(uint16_t ms_count) 
{
    while (ms_count != 0) 
     200:	c1 f7       	brne	.-16     	; 0x1f2 <DELAY_ms+0x4>
     202:	08 95       	ret

00000204 <GPIO_PinDirection>:

    uint8_t v_portNumber_u8;


    v_portNumber_u8 =  (enm_pinNumber>>3);  // Divide the pin number by 8 go get the PORT number
    enm_pinNumber  =   enm_pinNumber & 0x07;  // lower 3-bits contains the bit number of a byte 
     204:	98 2f       	mov	r25, r24
     206:	97 70       	andi	r25, 0x07	; 7

    /* Go to particular port after decoding from the pin number and 
        set the direction as specified*/
    switch(v_portNumber_u8)
     208:	86 95       	lsr	r24
     20a:	86 95       	lsr	r24
     20c:	86 95       	lsr	r24
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	21 f1       	breq	.+72     	; 0x25a <GPIO_PinDirection+0x56>
     212:	30 f0       	brcs	.+12     	; 0x220 <GPIO_PinDirection+0x1c>
     214:	82 30       	cpi	r24, 0x02	; 2
     216:	f1 f1       	breq	.+124    	; 0x294 <GPIO_PinDirection+0x90>
     218:	83 30       	cpi	r24, 0x03	; 3
     21a:	09 f4       	brne	.+2      	; 0x21e <GPIO_PinDirection+0x1a>
     21c:	58 c0       	rjmp	.+176    	; 0x2ce <GPIO_PinDirection+0xca>
     21e:	08 95       	ret
    {
#ifdef DDRA        
    case 0:
        util_UpdateBit(DDRA,enm_pinNumber,v_pinDirn_u8);
     220:	66 23       	and	r22, r22
     222:	69 f0       	breq	.+26     	; 0x23e <GPIO_PinDirection+0x3a>
     224:	4a b3       	in	r20, 0x1a	; 26
     226:	21 e0       	ldi	r18, 0x01	; 1
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	b9 01       	movw	r22, r18
     22c:	02 c0       	rjmp	.+4      	; 0x232 <GPIO_PinDirection+0x2e>
     22e:	66 0f       	add	r22, r22
     230:	77 1f       	adc	r23, r23
     232:	9a 95       	dec	r25
     234:	e2 f7       	brpl	.-8      	; 0x22e <GPIO_PinDirection+0x2a>
     236:	cb 01       	movw	r24, r22
     238:	84 2b       	or	r24, r20
     23a:	8a bb       	out	0x1a, r24	; 26
     23c:	08 95       	ret
     23e:	4a b3       	in	r20, 0x1a	; 26
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	b9 01       	movw	r22, r18
     246:	02 c0       	rjmp	.+4      	; 0x24c <GPIO_PinDirection+0x48>
     248:	66 0f       	add	r22, r22
     24a:	77 1f       	adc	r23, r23
     24c:	9a 95       	dec	r25
     24e:	e2 f7       	brpl	.-8      	; 0x248 <GPIO_PinDirection+0x44>
     250:	cb 01       	movw	r24, r22
     252:	80 95       	com	r24
     254:	84 23       	and	r24, r20
     256:	8a bb       	out	0x1a, r24	; 26
     258:	08 95       	ret
#endif        


#ifdef DDRB
    case 1:
        util_UpdateBit(DDRB,enm_pinNumber,v_pinDirn_u8);
     25a:	66 23       	and	r22, r22
     25c:	69 f0       	breq	.+26     	; 0x278 <GPIO_PinDirection+0x74>
     25e:	47 b3       	in	r20, 0x17	; 23
     260:	21 e0       	ldi	r18, 0x01	; 1
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	b9 01       	movw	r22, r18
     266:	02 c0       	rjmp	.+4      	; 0x26c <GPIO_PinDirection+0x68>
     268:	66 0f       	add	r22, r22
     26a:	77 1f       	adc	r23, r23
     26c:	9a 95       	dec	r25
     26e:	e2 f7       	brpl	.-8      	; 0x268 <GPIO_PinDirection+0x64>
     270:	cb 01       	movw	r24, r22
     272:	84 2b       	or	r24, r20
     274:	87 bb       	out	0x17, r24	; 23
     276:	08 95       	ret
     278:	47 b3       	in	r20, 0x17	; 23
     27a:	21 e0       	ldi	r18, 0x01	; 1
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	b9 01       	movw	r22, r18
     280:	02 c0       	rjmp	.+4      	; 0x286 <GPIO_PinDirection+0x82>
     282:	66 0f       	add	r22, r22
     284:	77 1f       	adc	r23, r23
     286:	9a 95       	dec	r25
     288:	e2 f7       	brpl	.-8      	; 0x282 <GPIO_PinDirection+0x7e>
     28a:	cb 01       	movw	r24, r22
     28c:	80 95       	com	r24
     28e:	84 23       	and	r24, r20
     290:	87 bb       	out	0x17, r24	; 23
     292:	08 95       	ret
#endif 

        
#ifdef DDRC
    case 2:
        util_UpdateBit(DDRC,enm_pinNumber,v_pinDirn_u8);
     294:	66 23       	and	r22, r22
     296:	69 f0       	breq	.+26     	; 0x2b2 <GPIO_PinDirection+0xae>
     298:	44 b3       	in	r20, 0x14	; 20
     29a:	21 e0       	ldi	r18, 0x01	; 1
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	b9 01       	movw	r22, r18
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <GPIO_PinDirection+0xa2>
     2a2:	66 0f       	add	r22, r22
     2a4:	77 1f       	adc	r23, r23
     2a6:	9a 95       	dec	r25
     2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <GPIO_PinDirection+0x9e>
     2aa:	cb 01       	movw	r24, r22
     2ac:	84 2b       	or	r24, r20
     2ae:	84 bb       	out	0x14, r24	; 20
     2b0:	08 95       	ret
     2b2:	44 b3       	in	r20, 0x14	; 20
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	b9 01       	movw	r22, r18
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <GPIO_PinDirection+0xbc>
     2bc:	66 0f       	add	r22, r22
     2be:	77 1f       	adc	r23, r23
     2c0:	9a 95       	dec	r25
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <GPIO_PinDirection+0xb8>
     2c4:	cb 01       	movw	r24, r22
     2c6:	80 95       	com	r24
     2c8:	84 23       	and	r24, r20
     2ca:	84 bb       	out	0x14, r24	; 20
     2cc:	08 95       	ret
#endif 

        
#ifdef DDRD        
    case 3:
        util_UpdateBit(DDRD,enm_pinNumber,v_pinDirn_u8);
     2ce:	66 23       	and	r22, r22
     2d0:	69 f0       	breq	.+26     	; 0x2ec <GPIO_PinDirection+0xe8>
     2d2:	41 b3       	in	r20, 0x11	; 17
     2d4:	21 e0       	ldi	r18, 0x01	; 1
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	b9 01       	movw	r22, r18
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <GPIO_PinDirection+0xdc>
     2dc:	66 0f       	add	r22, r22
     2de:	77 1f       	adc	r23, r23
     2e0:	9a 95       	dec	r25
     2e2:	e2 f7       	brpl	.-8      	; 0x2dc <GPIO_PinDirection+0xd8>
     2e4:	cb 01       	movw	r24, r22
     2e6:	84 2b       	or	r24, r20
     2e8:	81 bb       	out	0x11, r24	; 17
     2ea:	08 95       	ret
     2ec:	41 b3       	in	r20, 0x11	; 17
     2ee:	21 e0       	ldi	r18, 0x01	; 1
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	b9 01       	movw	r22, r18
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <GPIO_PinDirection+0xf6>
     2f6:	66 0f       	add	r22, r22
     2f8:	77 1f       	adc	r23, r23
     2fa:	9a 95       	dec	r25
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <GPIO_PinDirection+0xf2>
     2fe:	cb 01       	movw	r24, r22
     300:	80 95       	com	r24
     302:	84 23       	and	r24, r20
     304:	81 bb       	out	0x11, r24	; 17
     306:	08 95       	ret

00000308 <GPIO_PinWrite>:

    uint8_t v_portNumber_u8;


    v_portNumber_u8 =  (enm_pinNumber>>3);  // Divide the pin number by 8 go get the PORT number
    enm_pinNumber  =   enm_pinNumber & 0x07;  // lower 3-bits contains the bit number of a byte 
     308:	98 2f       	mov	r25, r24
     30a:	97 70       	andi	r25, 0x07	; 7

    /* Go to particular port after decoding from the pin number and 
        update the value of the specified pin*/
    switch(v_portNumber_u8)
     30c:	86 95       	lsr	r24
     30e:	86 95       	lsr	r24
     310:	86 95       	lsr	r24
     312:	81 30       	cpi	r24, 0x01	; 1
     314:	21 f1       	breq	.+72     	; 0x35e <GPIO_PinWrite+0x56>
     316:	30 f0       	brcs	.+12     	; 0x324 <GPIO_PinWrite+0x1c>
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	f1 f1       	breq	.+124    	; 0x398 <GPIO_PinWrite+0x90>
     31c:	83 30       	cpi	r24, 0x03	; 3
     31e:	09 f4       	brne	.+2      	; 0x322 <GPIO_PinWrite+0x1a>
     320:	58 c0       	rjmp	.+176    	; 0x3d2 <GPIO_PinWrite+0xca>
     322:	08 95       	ret
    {
#ifdef PORTA        
    case 0:
        util_UpdateBit(PORTA,enm_pinNumber,v_pinValue_u8);
     324:	66 23       	and	r22, r22
     326:	69 f0       	breq	.+26     	; 0x342 <GPIO_PinWrite+0x3a>
     328:	4b b3       	in	r20, 0x1b	; 27
     32a:	21 e0       	ldi	r18, 0x01	; 1
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	b9 01       	movw	r22, r18
     330:	02 c0       	rjmp	.+4      	; 0x336 <GPIO_PinWrite+0x2e>
     332:	66 0f       	add	r22, r22
     334:	77 1f       	adc	r23, r23
     336:	9a 95       	dec	r25
     338:	e2 f7       	brpl	.-8      	; 0x332 <GPIO_PinWrite+0x2a>
     33a:	cb 01       	movw	r24, r22
     33c:	84 2b       	or	r24, r20
     33e:	8b bb       	out	0x1b, r24	; 27
     340:	08 95       	ret
     342:	4b b3       	in	r20, 0x1b	; 27
     344:	21 e0       	ldi	r18, 0x01	; 1
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	b9 01       	movw	r22, r18
     34a:	02 c0       	rjmp	.+4      	; 0x350 <GPIO_PinWrite+0x48>
     34c:	66 0f       	add	r22, r22
     34e:	77 1f       	adc	r23, r23
     350:	9a 95       	dec	r25
     352:	e2 f7       	brpl	.-8      	; 0x34c <GPIO_PinWrite+0x44>
     354:	cb 01       	movw	r24, r22
     356:	80 95       	com	r24
     358:	84 23       	and	r24, r20
     35a:	8b bb       	out	0x1b, r24	; 27
     35c:	08 95       	ret
#endif        

        
#ifdef PORTB
    case 1:
        util_UpdateBit(PORTB,enm_pinNumber,v_pinValue_u8);
     35e:	66 23       	and	r22, r22
     360:	69 f0       	breq	.+26     	; 0x37c <GPIO_PinWrite+0x74>
     362:	48 b3       	in	r20, 0x18	; 24
     364:	21 e0       	ldi	r18, 0x01	; 1
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	b9 01       	movw	r22, r18
     36a:	02 c0       	rjmp	.+4      	; 0x370 <GPIO_PinWrite+0x68>
     36c:	66 0f       	add	r22, r22
     36e:	77 1f       	adc	r23, r23
     370:	9a 95       	dec	r25
     372:	e2 f7       	brpl	.-8      	; 0x36c <GPIO_PinWrite+0x64>
     374:	cb 01       	movw	r24, r22
     376:	84 2b       	or	r24, r20
     378:	88 bb       	out	0x18, r24	; 24
     37a:	08 95       	ret
     37c:	48 b3       	in	r20, 0x18	; 24
     37e:	21 e0       	ldi	r18, 0x01	; 1
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	b9 01       	movw	r22, r18
     384:	02 c0       	rjmp	.+4      	; 0x38a <GPIO_PinWrite+0x82>
     386:	66 0f       	add	r22, r22
     388:	77 1f       	adc	r23, r23
     38a:	9a 95       	dec	r25
     38c:	e2 f7       	brpl	.-8      	; 0x386 <GPIO_PinWrite+0x7e>
     38e:	cb 01       	movw	r24, r22
     390:	80 95       	com	r24
     392:	84 23       	and	r24, r20
     394:	88 bb       	out	0x18, r24	; 24
     396:	08 95       	ret
#endif        

        
#ifdef PORTC        
    case 2:
        util_UpdateBit(PORTC,enm_pinNumber,v_pinValue_u8);
     398:	66 23       	and	r22, r22
     39a:	69 f0       	breq	.+26     	; 0x3b6 <GPIO_PinWrite+0xae>
     39c:	45 b3       	in	r20, 0x15	; 21
     39e:	21 e0       	ldi	r18, 0x01	; 1
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	b9 01       	movw	r22, r18
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <GPIO_PinWrite+0xa2>
     3a6:	66 0f       	add	r22, r22
     3a8:	77 1f       	adc	r23, r23
     3aa:	9a 95       	dec	r25
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <GPIO_PinWrite+0x9e>
     3ae:	cb 01       	movw	r24, r22
     3b0:	84 2b       	or	r24, r20
     3b2:	85 bb       	out	0x15, r24	; 21
     3b4:	08 95       	ret
     3b6:	45 b3       	in	r20, 0x15	; 21
     3b8:	21 e0       	ldi	r18, 0x01	; 1
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	b9 01       	movw	r22, r18
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <GPIO_PinWrite+0xbc>
     3c0:	66 0f       	add	r22, r22
     3c2:	77 1f       	adc	r23, r23
     3c4:	9a 95       	dec	r25
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <GPIO_PinWrite+0xb8>
     3c8:	cb 01       	movw	r24, r22
     3ca:	80 95       	com	r24
     3cc:	84 23       	and	r24, r20
     3ce:	85 bb       	out	0x15, r24	; 21
     3d0:	08 95       	ret
#endif        

        
#ifdef PORTD        
    case 3:
        util_UpdateBit(PORTD,enm_pinNumber,v_pinValue_u8);
     3d2:	66 23       	and	r22, r22
     3d4:	69 f0       	breq	.+26     	; 0x3f0 <GPIO_PinWrite+0xe8>
     3d6:	42 b3       	in	r20, 0x12	; 18
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	b9 01       	movw	r22, r18
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <GPIO_PinWrite+0xdc>
     3e0:	66 0f       	add	r22, r22
     3e2:	77 1f       	adc	r23, r23
     3e4:	9a 95       	dec	r25
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <GPIO_PinWrite+0xd8>
     3e8:	cb 01       	movw	r24, r22
     3ea:	84 2b       	or	r24, r20
     3ec:	82 bb       	out	0x12, r24	; 18
     3ee:	08 95       	ret
     3f0:	42 b3       	in	r20, 0x12	; 18
     3f2:	21 e0       	ldi	r18, 0x01	; 1
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	b9 01       	movw	r22, r18
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <GPIO_PinWrite+0xf6>
     3fa:	66 0f       	add	r22, r22
     3fc:	77 1f       	adc	r23, r23
     3fe:	9a 95       	dec	r25
     400:	e2 f7       	brpl	.-8      	; 0x3fa <GPIO_PinWrite+0xf2>
     402:	cb 01       	movw	r24, r22
     404:	80 95       	com	r24
     406:	84 23       	and	r24, r20
     408:	82 bb       	out	0x12, r24	; 18
     40a:	08 95       	ret

0000040c <GPIO_PinRead>:
{
    uint8_t v_portNumber_u8;
    uint8_t returnStatus = 0;

    v_portNumber_u8 =  (enm_pinNumber>>3); // Divide the pin number by 8 go get the PORT number
    enm_pinNumber  =     enm_pinNumber & 0x07; // lower 3-bits contains the bit number of a byte 
     40c:	28 2f       	mov	r18, r24
     40e:	27 70       	andi	r18, 0x07	; 7

    /* Go to particular port after decoding from the pin number and read the pins status */
    switch(v_portNumber_u8)     
     410:	86 95       	lsr	r24
     412:	86 95       	lsr	r24
     414:	86 95       	lsr	r24
     416:	81 30       	cpi	r24, 0x01	; 1
     418:	79 f0       	breq	.+30     	; 0x438 <GPIO_PinRead+0x2c>
     41a:	28 f0       	brcs	.+10     	; 0x426 <GPIO_PinRead+0x1a>
     41c:	82 30       	cpi	r24, 0x02	; 2
     41e:	a9 f0       	breq	.+42     	; 0x44a <GPIO_PinRead+0x3e>
     420:	83 30       	cpi	r24, 0x03	; 3
     422:	e1 f0       	breq	.+56     	; 0x45c <GPIO_PinRead+0x50>
     424:	24 c0       	rjmp	.+72     	; 0x46e <GPIO_PinRead+0x62>
    { 
#ifdef PINA    
    case 0: 
        returnStatus = util_IsBitSet(PINA,enm_pinNumber);
     426:	89 b3       	in	r24, 0x19	; 25
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	02 c0       	rjmp	.+4      	; 0x430 <GPIO_PinRead+0x24>
     42c:	95 95       	asr	r25
     42e:	87 95       	ror	r24
     430:	2a 95       	dec	r18
     432:	e2 f7       	brpl	.-8      	; 0x42c <GPIO_PinRead+0x20>
     434:	81 70       	andi	r24, 0x01	; 1
        break;
     436:	08 95       	ret
#endif        

#ifdef PINB
    case 1:
        returnStatus = util_IsBitSet(PINB,enm_pinNumber);
     438:	86 b3       	in	r24, 0x16	; 22
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	02 c0       	rjmp	.+4      	; 0x442 <GPIO_PinRead+0x36>
     43e:	95 95       	asr	r25
     440:	87 95       	ror	r24
     442:	2a 95       	dec	r18
     444:	e2 f7       	brpl	.-8      	; 0x43e <GPIO_PinRead+0x32>
     446:	81 70       	andi	r24, 0x01	; 1
        break;
     448:	08 95       	ret
#endif          

#ifdef PINC
    case 2:
        returnStatus = util_IsBitSet(PINC,enm_pinNumber);
     44a:	83 b3       	in	r24, 0x13	; 19
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	02 c0       	rjmp	.+4      	; 0x454 <GPIO_PinRead+0x48>
     450:	95 95       	asr	r25
     452:	87 95       	ror	r24
     454:	2a 95       	dec	r18
     456:	e2 f7       	brpl	.-8      	; 0x450 <GPIO_PinRead+0x44>
     458:	81 70       	andi	r24, 0x01	; 1
        break;
     45a:	08 95       	ret
#endif        
        
        
#ifdef PIND
    case 3:
        returnStatus = util_IsBitSet(PIND,enm_pinNumber);
     45c:	80 b3       	in	r24, 0x10	; 16
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	02 c0       	rjmp	.+4      	; 0x466 <GPIO_PinRead+0x5a>
     462:	95 95       	asr	r25
     464:	87 95       	ror	r24
     466:	2a 95       	dec	r18
     468:	e2 f7       	brpl	.-8      	; 0x462 <GPIO_PinRead+0x56>
     46a:	81 70       	andi	r24, 0x01	; 1
        break;
     46c:	08 95       	ret
                Before reading the pins status, the pin should be configured as INPUT 
 ***************************************************************************************************/
uint8_t GPIO_PinRead(gpioPins_et enm_pinNumber)
{
    uint8_t v_portNumber_u8;
    uint8_t returnStatus = 0;
     46e:	80 e0       	ldi	r24, 0x00	; 0
        returnStatus = util_IsBitSet(PING,enm_pinNumber);
        break;
#endif             
    }                         
    return returnStatus;
}
     470:	08 95       	ret

00000472 <I2C_Init>:

 * description :This function is used to initialize the I2C module
------------------------------------------------------------------------------------*/
void I2C_Init()
{
    TWSR=0x00; //set presca1er bits to zero
     472:	11 b8       	out	0x01, r1	; 1
    TWBR=0x46; //SCL frequency is 50K for 16Mhz
     474:	86 e4       	ldi	r24, 0x46	; 70
     476:	80 b9       	out	0x00, r24	; 0
    TWCR=0x04; //enab1e TWI module
     478:	84 e0       	ldi	r24, 0x04	; 4
     47a:	86 bf       	out	0x36, r24	; 54
     47c:	08 95       	ret

0000047e <I2C_Start>:
                      ____|         |____________

 ***************************************************************************************************/
void I2C_Start()
{
    TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
     47e:	84 ea       	ldi	r24, 0xA4	; 164
     480:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1<<TWINT)));
     482:	06 b6       	in	r0, 0x36	; 54
     484:	07 fe       	sbrs	r0, 7
     486:	fd cf       	rjmp	.-6      	; 0x482 <I2C_Start+0x4>
}
     488:	08 95       	ret

0000048a <I2C_Stop>:

 ***************************************************************************************************/

void I2C_Stop(void)
{
    TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
     48a:	84 e9       	ldi	r24, 0x94	; 148
     48c:	86 bf       	out	0x36, r24	; 54
    DELAY_us(100) ; //wait for a short time
     48e:	84 e6       	ldi	r24, 0x64	; 100
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     496:	08 95       	ret

00000498 <I2C_Write>:


 ***************************************************************************************************/
void I2C_Write(uint8_t v_i2cData_u8)
{
    TWDR = v_i2cData_u8 ;
     498:	83 b9       	out	0x03, r24	; 3
    TWCR = ((1<< TWINT) | (1<<TWEN));
     49a:	84 e8       	ldi	r24, 0x84	; 132
     49c:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1 <<TWINT)));
     49e:	06 b6       	in	r0, 0x36	; 54
     4a0:	07 fe       	sbrs	r0, 7
     4a2:	fd cf       	rjmp	.-6      	; 0x49e <I2C_Write+0x6>
}
     4a4:	08 95       	ret

000004a6 <I2C_Read>:


***************************************************************************************************/
uint8_t I2C_Read(uint8_t v_ackOption_u8)
{
    TWCR = ((1<< TWINT) | (1<<TWEN) | (v_ackOption_u8<<TWEA));
     4a6:	20 e4       	ldi	r18, 0x40	; 64
     4a8:	82 9f       	mul	r24, r18
     4aa:	c0 01       	movw	r24, r0
     4ac:	11 24       	eor	r1, r1
     4ae:	84 68       	ori	r24, 0x84	; 132
     4b0:	86 bf       	out	0x36, r24	; 54
    while ( !(TWCR & (1 <<TWINT)));
     4b2:	06 b6       	in	r0, 0x36	; 54
     4b4:	07 fe       	sbrs	r0, 7
     4b6:	fd cf       	rjmp	.-6      	; 0x4b2 <I2C_Read+0xc>
    return TWDR;
     4b8:	83 b1       	in	r24, 0x03	; 3
}
     4ba:	08 95       	ret

000004bc <lcd_SendHigherNibble>:
        }

        DELAY_ms(C_ScrollDelayTime_U8);
    }
    LCD_CmdWrite(CMD_DISPLAY_ON_CURSOR_ON);              // Finally enable the Cursor
}
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	c8 2f       	mov	r28, r24
     4c4:	84 fb       	bst	r24, 4
     4c6:	66 27       	eor	r22, r22
     4c8:	60 f9       	bld	r22, 0
     4ca:	0e eb       	ldi	r16, 0xBE	; 190
     4cc:	10 e0       	ldi	r17, 0x00	; 0
     4ce:	f8 01       	movw	r30, r16
     4d0:	82 85       	ldd	r24, Z+10	; 0x0a
     4d2:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     4d6:	c5 fb       	bst	r28, 5
     4d8:	66 27       	eor	r22, r22
     4da:	60 f9       	bld	r22, 0
     4dc:	f8 01       	movw	r30, r16
     4de:	83 85       	ldd	r24, Z+11	; 0x0b
     4e0:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     4e4:	c6 fb       	bst	r28, 6
     4e6:	66 27       	eor	r22, r22
     4e8:	60 f9       	bld	r22, 0
     4ea:	f8 01       	movw	r30, r16
     4ec:	84 85       	ldd	r24, Z+12	; 0x0c
     4ee:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     4f2:	6c 2f       	mov	r22, r28
     4f4:	66 1f       	adc	r22, r22
     4f6:	66 27       	eor	r22, r22
     4f8:	66 1f       	adc	r22, r22
     4fa:	f8 01       	movw	r30, r16
     4fc:	85 85       	ldd	r24, Z+13	; 0x0d
     4fe:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	08 95       	ret

0000050a <lcd_SendCmdSignals>:
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ce eb       	ldi	r28, 0xBE	; 190
     510:	d0 e0       	ldi	r29, 0x00	; 0
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	8b 81       	ldd	r24, Y+3	; 0x03
     516:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	8c 81       	ldd	r24, Y+4	; 0x04
     51e:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	8d 81       	ldd	r24, Y+5	; 0x05
     526:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     52a:	8a e0       	ldi	r24, 0x0A	; 10
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	8d 81       	ldd	r24, Y+5	; 0x05
     536:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <lcd_SendLowerNibble>:
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	c8 2f       	mov	r28, r24
     548:	68 2f       	mov	r22, r24
     54a:	61 70       	andi	r22, 0x01	; 1
     54c:	0e eb       	ldi	r16, 0xBE	; 190
     54e:	10 e0       	ldi	r17, 0x00	; 0
     550:	f8 01       	movw	r30, r16
     552:	86 81       	ldd	r24, Z+6	; 0x06
     554:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     558:	c1 fb       	bst	r28, 1
     55a:	66 27       	eor	r22, r22
     55c:	60 f9       	bld	r22, 0
     55e:	f8 01       	movw	r30, r16
     560:	87 81       	ldd	r24, Z+7	; 0x07
     562:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     566:	c2 fb       	bst	r28, 2
     568:	66 27       	eor	r22, r22
     56a:	60 f9       	bld	r22, 0
     56c:	f8 01       	movw	r30, r16
     56e:	80 85       	ldd	r24, Z+8	; 0x08
     570:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     574:	c3 fb       	bst	r28, 3
     576:	66 27       	eor	r22, r22
     578:	60 f9       	bld	r22, 0
     57a:	f8 01       	movw	r30, r16
     57c:	81 85       	ldd	r24, Z+9	; 0x09
     57e:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	08 95       	ret

0000058a <lcd_SendDataSignals>:
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	ce eb       	ldi	r28, 0xBE	; 190
     590:	d0 e0       	ldi	r29, 0x00	; 0
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	8b 81       	ldd	r24, Y+3	; 0x03
     596:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	8c 81       	ldd	r24, Y+4	; 0x04
     59e:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	8d 81       	ldd	r24, Y+5	; 0x05
     5a6:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     5aa:	8a e0       	ldi	r24, 0x0A	; 10
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	8d 81       	ldd	r24, Y+5	; 0x05
     5b6:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <lcd_BusyCheck>:
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <LCDConfig+0x4>
     5ca:	8f 3f       	cpi	r24, 0xFF	; 255
     5cc:	e9 f1       	breq	.+122    	; 0x648 <lcd_BusyCheck+0x88>
     5ce:	ce eb       	ldi	r28, 0xBE	; 190
     5d0:	d0 e0       	ldi	r29, 0x00	; 0
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	8d 85       	ldd	r24, Y+13	; 0x0d
     5d6:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_PinDirection>
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	8b 81       	ldd	r24, Y+3	; 0x03
     5de:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	8c 81       	ldd	r24, Y+4	; 0x04
     5e6:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     5ea:	60 e0       	ldi	r22, 0x00	; 0
     5ec:	8d 81       	ldd	r24, Y+5	; 0x05
     5ee:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     5f2:	8a e0       	ldi	r24, 0x0A	; 10
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	8d 81       	ldd	r24, Y+5	; 0x05
     5fe:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     602:	8a e0       	ldi	r24, 0x0A	; 10
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     60a:	8d 85       	ldd	r24, Y+13	; 0x0d
     60c:	0e 94 06 02 	call	0x40c	; 0x40c <GPIO_PinRead>
     610:	18 2f       	mov	r17, r24
     612:	8a 81       	ldd	r24, Y+2	; 0x02
     614:	84 30       	cpi	r24, 0x04	; 4
     616:	81 f4       	brne	.+32     	; 0x638 <lcd_BusyCheck+0x78>
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	8d 81       	ldd	r24, Y+5	; 0x05
     61c:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     620:	8a e0       	ldi	r24, 0x0A	; 10
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	8d 81       	ldd	r24, Y+5	; 0x05
     62c:	0e 94 84 01 	call	0x308	; 0x308 <GPIO_PinWrite>
     630:	8a e0       	ldi	r24, 0x0A	; 10
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     638:	11 11       	cpse	r17, r1
     63a:	d7 cf       	rjmp	.-82     	; 0x5ea <lcd_BusyCheck+0x2a>
     63c:	61 e0       	ldi	r22, 0x01	; 1
     63e:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <LCDConfig+0xd>
     642:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_PinDirection>
     646:	04 c0       	rjmp	.+8      	; 0x650 <lcd_BusyCheck+0x90>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DELAY_ms>
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	08 95       	ret

00000658 <LCD_SetUp>:
     658:	8f 92       	push	r8
     65a:	9f 92       	push	r9
     65c:	af 92       	push	r10
     65e:	bf 92       	push	r11
     660:	cf 92       	push	r12
     662:	df 92       	push	r13
     664:	ef 92       	push	r14
     666:	ff 92       	push	r15
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	98 2e       	mov	r9, r24
     676:	b6 2e       	mov	r11, r22
     678:	d4 2e       	mov	r13, r20
     67a:	ff 84       	ldd	r15, Y+15	; 0x0f
     67c:	18 89       	ldd	r17, Y+16	; 0x10
     67e:	ee eb       	ldi	r30, 0xBE	; 190
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	83 83       	std	Z+3, r24	; 0x03
     684:	64 83       	std	Z+4, r22	; 0x04
     686:	45 83       	std	Z+5, r20	; 0x05
     688:	26 83       	std	Z+6, r18	; 0x06
     68a:	07 83       	std	Z+7, r16	; 0x07
     68c:	e0 86       	std	Z+8, r14	; 0x08
     68e:	c1 86       	std	Z+9, r12	; 0x09
     690:	a2 86       	std	Z+10, r10	; 0x0a
     692:	83 86       	std	Z+11, r8	; 0x0b
     694:	f4 86       	std	Z+12, r15	; 0x0c
     696:	15 87       	std	Z+13, r17	; 0x0d
     698:	2f 3f       	cpi	r18, 0xFF	; 255
     69a:	39 f0       	breq	.+14     	; 0x6aa <LCD_SetUp+0x52>
     69c:	0f 3f       	cpi	r16, 0xFF	; 255
     69e:	29 f0       	breq	.+10     	; 0x6aa <LCD_SetUp+0x52>
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
     6a2:	e8 16       	cp	r14, r24
     6a4:	11 f0       	breq	.+4      	; 0x6aa <LCD_SetUp+0x52>
     6a6:	c8 12       	cpse	r12, r24
     6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <LCD_SetUp+0x5a>
     6aa:	84 e0       	ldi	r24, 0x04	; 4
     6ac:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <LCDConfig+0x2>
     6b0:	13 c0       	rjmp	.+38     	; 0x6d8 <LCD_SetUp+0x80>
     6b2:	88 e0       	ldi	r24, 0x08	; 8
     6b4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <LCDConfig+0x2>
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	82 2f       	mov	r24, r18
     6bc:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_PinDirection>
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	80 2f       	mov	r24, r16
     6c4:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_PinDirection>
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	8e 2d       	mov	r24, r14
     6cc:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_PinDirection>
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	8c 2d       	mov	r24, r12
     6d4:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_PinDirection>
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	89 2d       	mov	r24, r9
     6dc:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_PinDirection>
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	8b 2d       	mov	r24, r11
     6e4:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_PinDirection>
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	8d 2d       	mov	r24, r13
     6ec:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_PinDirection>
     6f0:	61 e0       	ldi	r22, 0x01	; 1
     6f2:	8a 2d       	mov	r24, r10
     6f4:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_PinDirection>
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	88 2d       	mov	r24, r8
     6fc:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_PinDirection>
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	8f 2d       	mov	r24, r15
     704:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_PinDirection>
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	81 2f       	mov	r24, r17
     70c:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_PinDirection>
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	ff 90       	pop	r15
     71a:	ef 90       	pop	r14
     71c:	df 90       	pop	r13
     71e:	cf 90       	pop	r12
     720:	bf 90       	pop	r11
     722:	af 90       	pop	r10
     724:	9f 90       	pop	r9
     726:	8f 90       	pop	r8
     728:	08 95       	ret

0000072a <LCD_CmdWrite>:
     72a:	cf 93       	push	r28
     72c:	c8 2f       	mov	r28, r24
     72e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <lcd_BusyCheck>
     732:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <LCDConfig+0x2>
     736:	88 30       	cpi	r24, 0x08	; 8
     738:	21 f4       	brne	.+8      	; 0x742 <LCD_CmdWrite+0x18>
     73a:	8c 2f       	mov	r24, r28
     73c:	0e 94 a0 02 	call	0x540	; 0x540 <lcd_SendLowerNibble>
     740:	07 c0       	rjmp	.+14     	; 0x750 <LCD_CmdWrite+0x26>
     742:	8c 2f       	mov	r24, r28
     744:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_SendHigherNibble>
     748:	0e 94 85 02 	call	0x50a	; 0x50a <lcd_SendCmdSignals>
     74c:	c2 95       	swap	r28
     74e:	c0 7f       	andi	r28, 0xF0	; 240
     750:	8c 2f       	mov	r24, r28
     752:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_SendHigherNibble>
     756:	0e 94 85 02 	call	0x50a	; 0x50a <lcd_SendCmdSignals>
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <LCD_GoToLine>:
     75e:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <LCDConfig>
     762:	89 17       	cp	r24, r25
     764:	58 f4       	brcc	.+22     	; 0x77c <LCD_GoToLine+0x1e>
     766:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <v_LcdTrackCursorPos_U8>
     76a:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <v_LcdTrackLineNum_U8>
     76e:	e8 2f       	mov	r30, r24
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	e0 5a       	subi	r30, 0xA0	; 160
     774:	ff 4f       	sbci	r31, 0xFF	; 255
     776:	80 81       	ld	r24, Z
     778:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_CmdWrite>
     77c:	08 95       	ret

0000077e <LCD_Clear>:
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_CmdWrite>
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_GoToLine>
     78a:	08 95       	ret

0000078c <LCD_Init>:
     78c:	ee eb       	ldi	r30, 0xBE	; 190
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	61 83       	std	Z+1, r22	; 0x01
     792:	80 83       	st	Z, r24
     794:	83 30       	cpi	r24, 0x03	; 3
     796:	40 f0       	brcs	.+16     	; 0x7a8 <LCD_Init+0x1c>
     798:	6f 70       	andi	r22, 0x0F	; 15
     79a:	e0 e6       	ldi	r30, 0x60	; 96
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	80 e9       	ldi	r24, 0x90	; 144
     7a0:	86 0f       	add	r24, r22
     7a2:	82 83       	std	Z+2, r24	; 0x02
     7a4:	60 53       	subi	r22, 0x30	; 48
     7a6:	63 83       	std	Z+3, r22	; 0x03
     7a8:	84 e6       	ldi	r24, 0x64	; 100
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DELAY_ms>
     7b0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <LCDConfig+0x2>
     7b4:	88 30       	cpi	r24, 0x08	; 8
     7b6:	21 f4       	brne	.+8      	; 0x7c0 <LCD_Init+0x34>
     7b8:	88 e3       	ldi	r24, 0x38	; 56
     7ba:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_CmdWrite>
     7be:	29 c0       	rjmp	.+82     	; 0x812 <LCD_Init+0x86>
     7c0:	84 30       	cpi	r24, 0x04	; 4
     7c2:	39 f5       	brne	.+78     	; 0x812 <LCD_Init+0x86>
     7c4:	80 e3       	ldi	r24, 0x30	; 48
     7c6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_SendHigherNibble>
     7ca:	0e 94 85 02 	call	0x50a	; 0x50a <lcd_SendCmdSignals>
     7ce:	84 e6       	ldi	r24, 0x64	; 100
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DELAY_ms>
     7d6:	80 e3       	ldi	r24, 0x30	; 48
     7d8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_SendHigherNibble>
     7dc:	0e 94 85 02 	call	0x50a	; 0x50a <lcd_SendCmdSignals>
     7e0:	88 ec       	ldi	r24, 0xC8	; 200
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     7e8:	80 e3       	ldi	r24, 0x30	; 48
     7ea:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_SendHigherNibble>
     7ee:	0e 94 85 02 	call	0x50a	; 0x50a <lcd_SendCmdSignals>
     7f2:	88 ec       	ldi	r24, 0xC8	; 200
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     7fa:	80 e2       	ldi	r24, 0x20	; 32
     7fc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_SendHigherNibble>
     800:	0e 94 85 02 	call	0x50a	; 0x50a <lcd_SendCmdSignals>
     804:	88 ec       	ldi	r24, 0xC8	; 200
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     80c:	88 e2       	ldi	r24, 0x28	; 40
     80e:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_CmdWrite>
     812:	8e e0       	ldi	r24, 0x0E	; 14
     814:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_CmdWrite>
     818:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_Clear>
     81c:	08 95       	ret

0000081e <LCD_GoToNextLine>:
     81e:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <v_LcdTrackLineNum_U8>
     822:	8f 5f       	subi	r24, 0xFF	; 255
     824:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <v_LcdTrackLineNum_U8>
     828:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <v_LcdTrackCursorPos_U8>
     82c:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <LCDConfig>
     830:	89 17       	cp	r24, r25
     832:	10 f0       	brcs	.+4      	; 0x838 <LCD_GoToNextLine+0x1a>
     834:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <v_LcdTrackLineNum_U8>
     838:	e0 91 cd 00 	lds	r30, 0x00CD	; 0x8000cd <v_LcdTrackLineNum_U8>
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	e0 5a       	subi	r30, 0xA0	; 160
     840:	ff 4f       	sbci	r31, 0xFF	; 255
     842:	80 81       	ld	r24, Z
     844:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_CmdWrite>
     848:	08 95       	ret

0000084a <LCD_DisplayChar>:
     84a:	cf 93       	push	r28
     84c:	c8 2f       	mov	r28, r24
     84e:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <LCDConfig+0x1>
     852:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <v_LcdTrackCursorPos_U8>
     856:	89 17       	cp	r24, r25
     858:	18 f4       	brcc	.+6      	; 0x860 <__stack+0x1>
     85a:	ca 30       	cpi	r28, 0x0A	; 10
     85c:	29 f4       	brne	.+10     	; 0x868 <__stack+0x9>
     85e:	20 c0       	rjmp	.+64     	; 0x8a0 <__stack+0x41>
     860:	0e 94 0f 04 	call	0x81e	; 0x81e <LCD_GoToNextLine>
     864:	ca 30       	cpi	r28, 0x0A	; 10
     866:	f1 f0       	breq	.+60     	; 0x8a4 <__stack+0x45>
     868:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <lcd_BusyCheck>
     86c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <LCDConfig+0x2>
     870:	88 30       	cpi	r24, 0x08	; 8
     872:	21 f4       	brne	.+8      	; 0x87c <__stack+0x1d>
     874:	8c 2f       	mov	r24, r28
     876:	0e 94 a0 02 	call	0x540	; 0x540 <lcd_SendLowerNibble>
     87a:	07 c0       	rjmp	.+14     	; 0x88a <__stack+0x2b>
     87c:	8c 2f       	mov	r24, r28
     87e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_SendHigherNibble>
     882:	0e 94 c5 02 	call	0x58a	; 0x58a <lcd_SendDataSignals>
     886:	c2 95       	swap	r28
     888:	c0 7f       	andi	r28, 0xF0	; 240
     88a:	8c 2f       	mov	r24, r28
     88c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_SendHigherNibble>
     890:	0e 94 c5 02 	call	0x58a	; 0x58a <lcd_SendDataSignals>
     894:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <v_LcdTrackCursorPos_U8>
     898:	8f 5f       	subi	r24, 0xFF	; 255
     89a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <v_LcdTrackCursorPos_U8>
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
     8a0:	0e 94 0f 04 	call	0x81e	; 0x81e <LCD_GoToNextLine>
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <LCD_DisplayString>:
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	ec 01       	movw	r28, r24
     8ae:	88 81       	ld	r24, Y
     8b0:	88 23       	and	r24, r24
     8b2:	31 f0       	breq	.+12     	; 0x8c0 <LCD_DisplayString+0x18>
     8b4:	21 96       	adiw	r28, 0x01	; 1
     8b6:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_DisplayChar>
     8ba:	89 91       	ld	r24, Y+
     8bc:	81 11       	cpse	r24, r1
     8be:	fb cf       	rjmp	.-10     	; 0x8b6 <LCD_DisplayString+0xe>
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <LCD_DisplayNumber>:
                8.(C_HEX_U8,0x12AB,6) then 6-digits ie. 0012AB will be displayed
                9.(C_HEX_U8,0x12AB,C_DisplayDefaultDigits_U8) then 12AB will be displayed.                
****************************************************************************************************/
#if ((Enable_LCD_DisplayNumber == 1) || (Enable_LCD_DisplayFloatNumber == 1) || (Enable_LCD_Printf==1))
void LCD_DisplayNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToDisplay_u8)
{
     8c6:	4f 92       	push	r4
     8c8:	5f 92       	push	r5
     8ca:	6f 92       	push	r6
     8cc:	7f 92       	push	r7
     8ce:	8f 92       	push	r8
     8d0:	9f 92       	push	r9
     8d2:	af 92       	push	r10
     8d4:	bf 92       	push	r11
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	2a 97       	sbiw	r28, 0x0a	; 10
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	88 2e       	mov	r8, r24
     8f8:	6a 01       	movw	r12, r20
     8fa:	7b 01       	movw	r14, r22
     8fc:	12 2f       	mov	r17, r18
    uint8_t i=0,a[10];
    
    if(C_BINARY_U8 == v_numericSystem_u8)
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	88 12       	cpse	r8, r24
     902:	24 c0       	rjmp	.+72     	; 0x94c <LCD_DisplayNumber+0x86>
    {
        while(v_numOfDigitsToDisplay_u8!=0)
     904:	22 23       	and	r18, r18
     906:	09 f4       	brne	.+2      	; 0x90a <LCD_DisplayNumber+0x44>
     908:	66 c0       	rjmp	.+204    	; 0x9d6 <LCD_DisplayNumber+0x110>
        {
          /* Start Extracting the bits from the specified bit positions.
          Get the Acsii values of the bits and display */
          i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
          LCD_DisplayChar(util_Dec2Ascii(i));
     90a:	aa 24       	eor	r10, r10
     90c:	a3 94       	inc	r10
     90e:	b1 2c       	mov	r11, r1
     910:	01 e0       	ldi	r16, 0x01	; 1
     912:	91 2c       	mov	r9, r1
     914:	8f ef       	ldi	r24, 0xFF	; 255
     916:	81 0f       	add	r24, r17
     918:	a5 01       	movw	r20, r10
     91a:	02 c0       	rjmp	.+4      	; 0x920 <LCD_DisplayNumber+0x5a>
     91c:	44 0f       	add	r20, r20
     91e:	55 1f       	adc	r21, r21
     920:	8a 95       	dec	r24
     922:	e2 f7       	brpl	.-8      	; 0x91c <LCD_DisplayNumber+0x56>
     924:	05 2e       	mov	r0, r21
     926:	00 0c       	add	r0, r0
     928:	66 0b       	sbc	r22, r22
     92a:	77 0b       	sbc	r23, r23
     92c:	4c 21       	and	r20, r12
     92e:	5d 21       	and	r21, r13
     930:	6e 21       	and	r22, r14
     932:	7f 21       	and	r23, r15
     934:	80 2f       	mov	r24, r16
     936:	45 2b       	or	r20, r21
     938:	46 2b       	or	r20, r22
     93a:	47 2b       	or	r20, r23
     93c:	09 f4       	brne	.+2      	; 0x940 <LCD_DisplayNumber+0x7a>
     93e:	89 2d       	mov	r24, r9
     940:	80 5d       	subi	r24, 0xD0	; 208
     942:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_DisplayChar>
          v_numOfDigitsToDisplay_u8--;
     946:	11 50       	subi	r17, 0x01	; 1
{
    uint8_t i=0,a[10];
    
    if(C_BINARY_U8 == v_numericSystem_u8)
    {
        while(v_numOfDigitsToDisplay_u8!=0)
     948:	29 f7       	brne	.-54     	; 0x914 <LCD_DisplayNumber+0x4e>
     94a:	45 c0       	rjmp	.+138    	; 0x9d6 <LCD_DisplayNumber+0x110>
          i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
          LCD_DisplayChar(util_Dec2Ascii(i));
          v_numOfDigitsToDisplay_u8--;
        }        
    }    
    else if(v_number_u32==0)
     94c:	45 2b       	or	r20, r21
     94e:	46 2b       	or	r20, r22
     950:	47 2b       	or	r20, r23
     952:	19 f0       	breq	.+6      	; 0x95a <LCD_DisplayNumber+0x94>
        //for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            LCD_DisplayChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
     954:	21 11       	cpse	r18, r1
     956:	05 c0       	rjmp	.+10     	; 0x962 <LCD_DisplayNumber+0x9c>
     958:	3e c0       	rjmp	.+124    	; 0x9d6 <LCD_DisplayNumber+0x110>
    else if(v_number_u32==0)
    {
        /* If the number is zero then display Specified number of zeros*/
        /*TODO: Display single zero or multiple. Currently single zero is displayed*/
        //for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            LCD_DisplayChar('0');
     95a:	80 e3       	ldi	r24, 0x30	; 48
     95c:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_DisplayChar>
     960:	3a c0       	rjmp	.+116    	; 0x9d6 <LCD_DisplayNumber+0x110>
     962:	fe 01       	movw	r30, r28
     964:	31 96       	adiw	r30, 0x01	; 1
     966:	5f 01       	movw	r10, r30
    }
    else
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
     968:	00 e0       	ldi	r16, 0x00	; 0
                First get the remainder and divide the number by TypeOfNum(10-Dec, 16-Hex) each time.
                
                example for Decimal number: 
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
     96a:	48 2c       	mov	r4, r8
     96c:	51 2c       	mov	r5, r1
     96e:	61 2c       	mov	r6, r1
     970:	71 2c       	mov	r7, r1
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
        {
            /* Continue extracting the digits from right side
               till the Specified v_numOfDigitsToDisplay_u8 */
            if(v_number_u32!=0)
     972:	c1 14       	cp	r12, r1
     974:	d1 04       	cpc	r13, r1
     976:	e1 04       	cpc	r14, r1
     978:	f1 04       	cpc	r15, r1
     97a:	89 f0       	breq	.+34     	; 0x99e <LCD_DisplayNumber+0xd8>
                First get the remainder and divide the number by TypeOfNum(10-Dec, 16-Hex) each time.
                
                example for Decimal number: 
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
     97c:	9c 2c       	mov	r9, r12
     97e:	c7 01       	movw	r24, r14
     980:	b6 01       	movw	r22, r12
     982:	a3 01       	movw	r20, r6
     984:	92 01       	movw	r18, r4
     986:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__udivmodsi4>
     98a:	c2 2e       	mov	r12, r18
     98c:	d3 2e       	mov	r13, r19
     98e:	e4 2e       	mov	r14, r20
     990:	f5 2e       	mov	r15, r21
     992:	82 9e       	mul	r8, r18
     994:	90 18       	sub	r9, r0
     996:	11 24       	eor	r1, r1
     998:	f5 01       	movw	r30, r10
     99a:	90 82       	st	Z, r9
     99c:	07 c0       	rjmp	.+14     	; 0x9ac <LCD_DisplayNumber+0xe6>
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigitsToDisplay_u8 == C_DisplayDefaultDigits_U8) ||
     99e:	1b 30       	cpi	r17, 0x0B	; 11
     9a0:	18 f0       	brcs	.+6      	; 0x9a8 <LCD_DisplayNumber+0xe2>
               Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
            }
        }
        
         while(i!=0)
     9a2:	01 11       	cpse	r16, r1
     9a4:	0a c0       	rjmp	.+20     	; 0x9ba <LCD_DisplayNumber+0xf4>
     9a6:	17 c0       	rjmp	.+46     	; 0x9d6 <LCD_DisplayNumber+0x110>
            else
            {
                /* In case user expects more digits to be displayed than the actual digits in number,
                  then update the remaining digits with zero.
               Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
     9a8:	f5 01       	movw	r30, r10
     9aa:	10 82       	st	Z, r1
        //for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            LCD_DisplayChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
     9ac:	0f 5f       	subi	r16, 0xFF	; 255
     9ae:	ff ef       	ldi	r31, 0xFF	; 255
     9b0:	af 1a       	sub	r10, r31
     9b2:	bf 0a       	sbc	r11, r31
     9b4:	10 13       	cpse	r17, r16
     9b6:	dd cf       	rjmp	.-70     	; 0x972 <LCD_DisplayNumber+0xac>
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <LCD_DisplayNumber+0xf6>
               Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
            }
        }
        
         while(i!=0)
     9ba:	10 2f       	mov	r17, r16
        { 
          /* Finally get the ascii values of the digits and display*/
          LCD_DisplayChar(util_Hex2Ascii(a[i-1]));
     9bc:	fe 01       	movw	r30, r28
     9be:	e1 0f       	add	r30, r17
     9c0:	f1 1d       	adc	r31, r1
     9c2:	80 81       	ld	r24, Z
     9c4:	8a 30       	cpi	r24, 0x0A	; 10
     9c6:	10 f0       	brcs	.+4      	; 0x9cc <LCD_DisplayNumber+0x106>
     9c8:	89 5c       	subi	r24, 0xC9	; 201
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <LCD_DisplayNumber+0x108>
     9cc:	80 5d       	subi	r24, 0xD0	; 208
     9ce:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_DisplayChar>
          i--;
     9d2:	11 50       	subi	r17, 0x01	; 1
               Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
            }
        }
        
         while(i!=0)
     9d4:	99 f7       	brne	.-26     	; 0x9bc <LCD_DisplayNumber+0xf6>
          /* Finally get the ascii values of the digits and display*/
          LCD_DisplayChar(util_Hex2Ascii(a[i-1]));
          i--;
        }
    }
}
     9d6:	2a 96       	adiw	r28, 0x0a	; 10
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	bf 90       	pop	r11
     9f4:	af 90       	pop	r10
     9f6:	9f 90       	pop	r9
     9f8:	8f 90       	pop	r8
     9fa:	7f 90       	pop	r7
     9fc:	6f 90       	pop	r6
     9fe:	5f 90       	pop	r5
     a00:	4f 90       	pop	r4
     a02:	08 95       	ret

00000a04 <LCD_DisplayFloatNumber>:
    Note: Float will be disabled by default as it takes huge controller resources
         It can be enabled by changing value of Enable_LCD_DisplayFloatNumber to 1 in lcd.h
***************************************************************************************************/
#if (Enable_LCD_DisplayFloatNumber == 1)  
void LCD_DisplayFloatNumber(double v_floatNum_f32)
{
     a04:	8f 92       	push	r8
     a06:	9f 92       	push	r9
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	6b 01       	movw	r12, r22
     a16:	7c 01       	movw	r14, r24
      1.Type cast the number to int to get the integer part.
      2.Display the extracted integer part followed by a decimal point(.)
      3.Later the integer part is made zero by subtracting with the extracted integer value.
      4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */

    v_decNumber_u32 = (uint32_t) v_floatNum_f32;
     a18:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     a1c:	4b 01       	movw	r8, r22
     a1e:	5c 01       	movw	r10, r24
    LCD_DisplayNumber(C_DECIMAL_U8,v_decNumber_u32,C_DisplayDefaultDigits_U8);
     a20:	2f ef       	ldi	r18, 0xFF	; 255
     a22:	ab 01       	movw	r20, r22
     a24:	bc 01       	movw	r22, r24
     a26:	8a e0       	ldi	r24, 0x0A	; 10
     a28:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_DisplayNumber>

    LCD_DisplayChar('.');
     a2c:	8e e2       	ldi	r24, 0x2E	; 46
     a2e:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_DisplayChar>

    v_floatNum_f32 = v_floatNum_f32 - v_decNumber_u32;
    v_decNumber_u32 = v_floatNum_f32 * 1000000;
     a32:	c5 01       	movw	r24, r10
     a34:	b4 01       	movw	r22, r8
     a36:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__floatunsisf>
     a3a:	9b 01       	movw	r18, r22
     a3c:	ac 01       	movw	r20, r24
     a3e:	c7 01       	movw	r24, r14
     a40:	b6 01       	movw	r22, r12
     a42:	0e 94 38 09 	call	0x1270	; 0x1270 <__subsf3>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	34 e2       	ldi	r19, 0x24	; 36
     a4a:	44 e7       	ldi	r20, 0x74	; 116
     a4c:	59 e4       	ldi	r21, 0x49	; 73
     a4e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3>
    LCD_DisplayNumber(C_DECIMAL_U8,v_decNumber_u32,C_DisplayDefaultDigits_U8);
     a52:	0e 94 a5 09 	call	0x134a	; 0x134a <__fixunssfsi>
     a56:	ab 01       	movw	r20, r22
     a58:	bc 01       	movw	r22, r24
     a5a:	2f ef       	ldi	r18, 0xFF	; 255
     a5c:	8a e0       	ldi	r24, 0x0A	; 10
     a5e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_DisplayNumber>
}
     a62:	ff 90       	pop	r15
     a64:	ef 90       	pop	r14
     a66:	df 90       	pop	r13
     a68:	cf 90       	pop	r12
     a6a:	bf 90       	pop	r11
     a6c:	af 90       	pop	r10
     a6e:	9f 90       	pop	r9
     a70:	8f 90       	pop	r8
     a72:	08 95       	ret

00000a74 <LCD_Printf>:
        uint8_t v_Num_u8;
        LCD_Printf("num1:%u",(uint16_t)v_Num_u8); 
**************************************************************************************************/
#if ( Enable_LCD_Printf   == 1 ) 
void LCD_Printf(const char *argList, ...)
{
     a74:	4f 92       	push	r4
     a76:	5f 92       	push	r5
     a78:	6f 92       	push	r6
     a7a:	7f 92       	push	r7
     a7c:	8f 92       	push	r8
     a7e:	9f 92       	push	r9
     a80:	af 92       	push	r10
     a82:	bf 92       	push	r11
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	fe 01       	movw	r30, r28
     a9a:	73 96       	adiw	r30, 0x13	; 19
     a9c:	81 90       	ld	r8, Z+
     a9e:	91 90       	ld	r9, Z+
    uint8_t v_numOfDigitsToDisp_u8;
#if (Enable_LCD_DisplayFloatNumber == 1)  
    double v_floatNum_f32;
#endif

    va_start(argp, argList);
     aa0:	7f 01       	movw	r14, r30

    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
     aa2:	d4 01       	movw	r26, r8
     aa4:	8c 91       	ld	r24, X
     aa6:	88 23       	and	r24, r24
     aa8:	09 f4       	brne	.+2      	; 0xaac <LCD_Printf+0x38>
     aaa:	07 c1       	rjmp	.+526    	; 0xcba <LCD_Printf+0x246>
                break;

            case 'B':  /* Argument type is of binary,Read int and convert to binary */
                v_num_u32 = va_arg(argp, uint32_t);
                if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                   v_numOfDigitsToDisp_u8 = 16;                
     aac:	68 94       	set
     aae:	aa 24       	eor	r10, r10
     ab0:	a4 f8       	bld	r10, 4
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     ab2:	bb 24       	eor	r11, r11
     ab4:	ba 94       	dec	r11
        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
        {
            ptr++;
            ch = *ptr;
           if((ch>=0x30) && (ch<=0x39))
     ab6:	00 e0       	ldi	r16, 0x00	; 0
    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
    {

        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
     ab8:	85 32       	cpi	r24, 0x25	; 37
     aba:	09 f0       	breq	.+2      	; 0xabe <LCD_Printf+0x4a>
     abc:	dc c0       	rjmp	.+440    	; 0xc76 <LCD_Printf+0x202>
        {
            ptr++;
     abe:	64 01       	movw	r12, r8
     ac0:	bf ef       	ldi	r27, 0xFF	; 255
     ac2:	cb 1a       	sub	r12, r27
     ac4:	db 0a       	sbc	r13, r27
            ch = *ptr;
     ac6:	d4 01       	movw	r26, r8
     ac8:	11 96       	adiw	r26, 0x01	; 1
     aca:	ec 91       	ld	r30, X
     acc:	11 97       	sbiw	r26, 0x01	; 1
           if((ch>=0x30) && (ch<=0x39))
     ace:	80 ed       	ldi	r24, 0xD0	; 208
     ad0:	8e 0f       	add	r24, r30
     ad2:	8a 30       	cpi	r24, 0x0A	; 10
     ad4:	08 f0       	brcs	.+2      	; 0xad8 <LCD_Printf+0x64>
     ad6:	e6 c0       	rjmp	.+460    	; 0xca4 <LCD_Printf+0x230>
     ad8:	12 96       	adiw	r26, 0x02	; 2
     ada:	10 2f       	mov	r17, r16
     adc:	21 2f       	mov	r18, r17
     ade:	22 0f       	add	r18, r18
     ae0:	82 2f       	mov	r24, r18
     ae2:	88 0f       	add	r24, r24
     ae4:	88 0f       	add	r24, r24
     ae6:	28 0f       	add	r18, r24
     ae8:	20 53       	subi	r18, 0x30	; 48
            {
               v_numOfDigitsToDisp_u8 = 0;
               while((ch>=0x30) && (ch<=0x39))
                {
                   v_numOfDigitsToDisp_u8 = (v_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
     aea:	12 2f       	mov	r17, r18
     aec:	1e 0f       	add	r17, r30
                   ptr++;
     aee:	6d 01       	movw	r12, r26
                   ch = *ptr;
     af0:	ed 91       	ld	r30, X+
            ptr++;
            ch = *ptr;
           if((ch>=0x30) && (ch<=0x39))
            {
               v_numOfDigitsToDisp_u8 = 0;
               while((ch>=0x30) && (ch<=0x39))
     af2:	80 ed       	ldi	r24, 0xD0	; 208
     af4:	8e 0f       	add	r24, r30
     af6:	8a 30       	cpi	r24, 0x0A	; 10
     af8:	88 f3       	brcs	.-30     	; 0xadc <LCD_Printf+0x68>
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
            }                


            switch(ch)       /* Decode the type of the argument */
     afa:	8e 2f       	mov	r24, r30
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	fc 01       	movw	r30, r24
     b00:	b5 97       	sbiw	r30, 0x25	; 37
     b02:	e4 35       	cpi	r30, 0x54	; 84
     b04:	f1 05       	cpc	r31, r1
     b06:	08 f0       	brcs	.+2      	; 0xb0a <LCD_Printf+0x96>
     b08:	b9 c0       	rjmp	.+370    	; 0xc7c <LCD_Printf+0x208>
     b0a:	e6 5d       	subi	r30, 0xD6	; 214
     b0c:	ff 4f       	sbci	r31, 0xFF	; 255
     b0e:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__tablejump2__>
            {
            case 'C':
            case 'c':     /* Argument type is of char, hence read char data from the argp */
                ch = va_arg(argp, int);
     b12:	47 01       	movw	r8, r14
     b14:	b2 e0       	ldi	r27, 0x02	; 2
     b16:	8b 0e       	add	r8, r27
     b18:	91 1c       	adc	r9, r1
                LCD_DisplayChar(ch);
     b1a:	f7 01       	movw	r30, r14
     b1c:	80 81       	ld	r24, Z
     b1e:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_DisplayChar>

            switch(ch)       /* Decode the type of the argument */
            {
            case 'C':
            case 'c':     /* Argument type is of char, hence read char data from the argp */
                ch = va_arg(argp, int);
     b22:	74 01       	movw	r14, r8
                LCD_DisplayChar(ch);
                break;
     b24:	ab c0       	rjmp	.+342    	; 0xc7c <LCD_Printf+0x208>
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     b26:	1b 2d       	mov	r17, r11
                ch = va_arg(argp, int);
                LCD_DisplayChar(ch);
                break;

            case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                v_num_s16 = va_arg(argp, int);
     b28:	f7 01       	movw	r30, r14
     b2a:	80 80       	ld	r8, Z
     b2c:	91 80       	ldd	r9, Z+1	; 0x01
     b2e:	f2 e0       	ldi	r31, 0x02	; 2
     b30:	ef 0e       	add	r14, r31
     b32:	f1 1c       	adc	r15, r1
                if(v_num_s16<0)
     b34:	99 20       	and	r9, r9
     b36:	34 f4       	brge	.+12     	; 0xb44 <LCD_Printf+0xd0>
                 { /* If the number is -ve then display the 2's complement along with '-' sign */ 
                   v_num_s16 = -v_num_s16;
     b38:	91 94       	neg	r9
     b3a:	81 94       	neg	r8
     b3c:	91 08       	sbc	r9, r1
                   LCD_DisplayChar('-');
     b3e:	8d e2       	ldi	r24, 0x2D	; 45
     b40:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_DisplayChar>
                 }
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
     b44:	a4 01       	movw	r20, r8
     b46:	99 0c       	add	r9, r9
     b48:	66 0b       	sbc	r22, r22
     b4a:	77 0b       	sbc	r23, r23
     b4c:	21 2f       	mov	r18, r17
     b4e:	8a e0       	ldi	r24, 0x0A	; 10
     b50:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_DisplayNumber>
                break;
     b54:	93 c0       	rjmp	.+294    	; 0xc7c <LCD_Printf+0x208>
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     b56:	1b 2d       	mov	r17, r11
                 }
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
                break;
                
            case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                v_num_s32 = va_arg(argp, sint32_t);
     b58:	f7 01       	movw	r30, r14
     b5a:	40 80       	ld	r4, Z
     b5c:	51 80       	ldd	r5, Z+1	; 0x01
     b5e:	62 80       	ldd	r6, Z+2	; 0x02
     b60:	73 80       	ldd	r7, Z+3	; 0x03
     b62:	24 e0       	ldi	r18, 0x04	; 4
     b64:	e2 0e       	add	r14, r18
     b66:	f1 1c       	adc	r15, r1
                if(v_num_s32<0)
     b68:	77 20       	and	r7, r7
     b6a:	5c f4       	brge	.+22     	; 0xb82 <LCD_Printf+0x10e>
                 { /* If the number is -ve then display the 2's complement along with '-' sign */
                   v_num_s32 = -v_num_s32;
     b6c:	70 94       	com	r7
     b6e:	60 94       	com	r6
     b70:	50 94       	com	r5
     b72:	40 94       	com	r4
     b74:	41 1c       	adc	r4, r1
     b76:	51 1c       	adc	r5, r1
     b78:	61 1c       	adc	r6, r1
     b7a:	71 1c       	adc	r7, r1
                   LCD_DisplayChar('-');
     b7c:	8d e2       	ldi	r24, 0x2D	; 45
     b7e:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_DisplayChar>
                 }
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);              
     b82:	21 2f       	mov	r18, r17
     b84:	b3 01       	movw	r22, r6
     b86:	a2 01       	movw	r20, r4
     b88:	8a e0       	ldi	r24, 0x0A	; 10
     b8a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_DisplayNumber>
                break;    
     b8e:	76 c0       	rjmp	.+236    	; 0xc7c <LCD_Printf+0x208>
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     b90:	1b 2d       	mov	r17, r11
                 }
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);              
                break;    

            case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                v_num_u16 = va_arg(argp, int);
     b92:	f7 01       	movw	r30, r14
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
     b94:	40 81       	ld	r20, Z
     b96:	51 81       	ldd	r21, Z+1	; 0x01
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	e8 0e       	add	r14, r24
     b9c:	f1 1c       	adc	r15, r1
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	21 2f       	mov	r18, r17
     ba4:	8a e0       	ldi	r24, 0x0A	; 10
     ba6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_DisplayNumber>
                break;
     baa:	68 c0       	rjmp	.+208    	; 0xc7c <LCD_Printf+0x208>
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     bac:	1b 2d       	mov	r17, r11
                v_num_u16 = va_arg(argp, int);
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                break;
            
            case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                v_num_u32 = va_arg(argp, uint32_t);
     bae:	f7 01       	movw	r30, r14
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);               
     bb0:	40 81       	ld	r20, Z
     bb2:	51 81       	ldd	r21, Z+1	; 0x01
     bb4:	62 81       	ldd	r22, Z+2	; 0x02
     bb6:	73 81       	ldd	r23, Z+3	; 0x03
     bb8:	a4 e0       	ldi	r26, 0x04	; 4
     bba:	ea 0e       	add	r14, r26
     bbc:	f1 1c       	adc	r15, r1
     bbe:	21 2f       	mov	r18, r17
     bc0:	8a e0       	ldi	r24, 0x0A	; 10
     bc2:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_DisplayNumber>
                break;            
     bc6:	5a c0       	rjmp	.+180    	; 0xc7c <LCD_Printf+0x208>
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     bc8:	1b 2d       	mov	r17, r11
                v_num_u32 = va_arg(argp, uint32_t);
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);               
                break;            

            case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                v_num_u16 = va_arg(argp, int);
     bca:	f7 01       	movw	r30, r14
                LCD_DisplayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
     bcc:	40 81       	ld	r20, Z
     bce:	51 81       	ldd	r21, Z+1	; 0x01
     bd0:	b2 e0       	ldi	r27, 0x02	; 2
     bd2:	eb 0e       	add	r14, r27
     bd4:	f1 1c       	adc	r15, r1
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	21 2f       	mov	r18, r17
     bdc:	8a 2d       	mov	r24, r10
     bde:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_DisplayNumber>
                break;
     be2:	4c c0       	rjmp	.+152    	; 0xc7c <LCD_Printf+0x208>
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     be4:	1b 2d       	mov	r17, r11
                v_num_u16 = va_arg(argp, int);
                LCD_DisplayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                break;

            case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                v_num_u32 = va_arg(argp, uint32_t);
     be6:	f7 01       	movw	r30, r14
                LCD_DisplayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);                
     be8:	40 81       	ld	r20, Z
     bea:	51 81       	ldd	r21, Z+1	; 0x01
     bec:	62 81       	ldd	r22, Z+2	; 0x02
     bee:	73 81       	ldd	r23, Z+3	; 0x03
     bf0:	e4 e0       	ldi	r30, 0x04	; 4
     bf2:	ee 0e       	add	r14, r30
     bf4:	f1 1c       	adc	r15, r1
     bf6:	21 2f       	mov	r18, r17
     bf8:	8a 2d       	mov	r24, r10
     bfa:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_DisplayNumber>
                break;
     bfe:	3e c0       	rjmp	.+124    	; 0xc7c <LCD_Printf+0x208>
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     c00:	1b 2d       	mov	r17, r11
                LCD_DisplayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);                
                break;

            
            case 'b':  /* Argument type is of binary,Read int and convert to binary */
                v_num_u16 = va_arg(argp, int);
     c02:	f7 01       	movw	r30, r14
     c04:	40 81       	ld	r20, Z
     c06:	51 81       	ldd	r21, Z+1	; 0x01
     c08:	f2 e0       	ldi	r31, 0x02	; 2
     c0a:	ef 0e       	add	r14, r31
     c0c:	f1 1c       	adc	r15, r1
                if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
     c0e:	1f 3f       	cpi	r17, 0xFF	; 255
     c10:	09 f4       	brne	.+2      	; 0xc14 <LCD_Printf+0x1a0>
                   v_numOfDigitsToDisp_u8 = 16;
     c12:	1a 2d       	mov	r17, r10
                LCD_DisplayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);                
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	21 2f       	mov	r18, r17
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_DisplayNumber>
                break;
     c20:	2d c0       	rjmp	.+90     	; 0xc7c <LCD_Printf+0x208>

            case 'B':  /* Argument type is of binary,Read int and convert to binary */
                v_num_u32 = va_arg(argp, uint32_t);
     c22:	f7 01       	movw	r30, r14
     c24:	40 81       	ld	r20, Z
     c26:	51 81       	ldd	r21, Z+1	; 0x01
     c28:	62 81       	ldd	r22, Z+2	; 0x02
     c2a:	73 81       	ldd	r23, Z+3	; 0x03
     c2c:	24 e0       	ldi	r18, 0x04	; 4
     c2e:	e2 0e       	add	r14, r18
     c30:	f1 1c       	adc	r15, r1
                if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
     c32:	1f 3f       	cpi	r17, 0xFF	; 255
     c34:	09 f4       	brne	.+2      	; 0xc38 <LCD_Printf+0x1c4>
                   v_numOfDigitsToDisp_u8 = 16;                
     c36:	1a 2d       	mov	r17, r10
                LCD_DisplayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);                
     c38:	21 2f       	mov	r18, r17
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_DisplayNumber>
                break;
     c40:	1d c0       	rjmp	.+58     	; 0xc7c <LCD_Printf+0x208>


            case 'F':
            case 'f': /* Argument type is of float, hence read double data from the argp */
#if (Enable_LCD_DisplayFloatNumber == 1)  
                v_floatNum_f32 = va_arg(argp, double);              
     c42:	f7 01       	movw	r30, r14
                LCD_DisplayFloatNumber(v_floatNum_f32);
     c44:	60 81       	ld	r22, Z
     c46:	71 81       	ldd	r23, Z+1	; 0x01
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	a4 e0       	ldi	r26, 0x04	; 4
     c4e:	ea 0e       	add	r14, r26
     c50:	f1 1c       	adc	r15, r1
     c52:	0e 94 02 05 	call	0xa04	; 0xa04 <LCD_DisplayFloatNumber>
#endif
                break;
     c56:	12 c0       	rjmp	.+36     	; 0xc7c <LCD_Printf+0x208>


            case 'S':
            case 's': /* Argument type is of string, hence get the pointer to sting passed */
                str = va_arg(argp, char *);
     c58:	47 01       	movw	r8, r14
     c5a:	b2 e0       	ldi	r27, 0x02	; 2
     c5c:	8b 0e       	add	r8, r27
     c5e:	91 1c       	adc	r9, r1
                LCD_DisplayString(str);                
     c60:	f7 01       	movw	r30, r14
     c62:	80 81       	ld	r24, Z
     c64:	91 81       	ldd	r25, Z+1	; 0x01
     c66:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_DisplayString>
                break;


            case 'S':
            case 's': /* Argument type is of string, hence get the pointer to sting passed */
                str = va_arg(argp, char *);
     c6a:	74 01       	movw	r14, r8
                LCD_DisplayString(str);                
                break;
     c6c:	07 c0       	rjmp	.+14     	; 0xc7c <LCD_Printf+0x208>

            case '%':
                LCD_DisplayChar('%');
     c6e:	85 e2       	ldi	r24, 0x25	; 37
     c70:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_DisplayChar>
                break;
     c74:	03 c0       	rjmp	.+6      	; 0xc7c <LCD_Printf+0x208>
            }
        }
        else
        {
            /* As '%' is not detected display/transmit the char passed */
            LCD_DisplayChar(ch);
     c76:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_DisplayChar>
     c7a:	64 01       	movw	r12, r8
#endif

    va_start(argp, argList);

    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
     c7c:	46 01       	movw	r8, r12
     c7e:	ff ef       	ldi	r31, 0xFF	; 255
     c80:	8f 1a       	sub	r8, r31
     c82:	9f 0a       	sbc	r9, r31
     c84:	d6 01       	movw	r26, r12
     c86:	11 96       	adiw	r26, 0x01	; 1
     c88:	8c 91       	ld	r24, X
     c8a:	81 11       	cpse	r24, r1
     c8c:	15 cf       	rjmp	.-470    	; 0xab8 <LCD_Printf+0x44>
     c8e:	15 c0       	rjmp	.+42     	; 0xcba <LCD_Printf+0x246>
                   v_numOfDigitsToDisp_u8 = 16;
                LCD_DisplayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);                
                break;

            case 'B':  /* Argument type is of binary,Read int and convert to binary */
                v_num_u32 = va_arg(argp, uint32_t);
     c90:	f7 01       	movw	r30, r14
     c92:	40 81       	ld	r20, Z
     c94:	51 81       	ldd	r21, Z+1	; 0x01
     c96:	62 81       	ldd	r22, Z+2	; 0x02
     c98:	73 81       	ldd	r23, Z+3	; 0x03
     c9a:	b4 e0       	ldi	r27, 0x04	; 4
     c9c:	eb 0e       	add	r14, r27
     c9e:	f1 1c       	adc	r15, r1
                if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                   v_numOfDigitsToDisp_u8 = 16;                
     ca0:	1a 2d       	mov	r17, r10
     ca2:	ca cf       	rjmp	.-108    	; 0xc38 <LCD_Printf+0x1c4>
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
            }                


            switch(ch)       /* Decode the type of the argument */
     ca4:	8e 2f       	mov	r24, r30
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	fc 01       	movw	r30, r24
     caa:	b5 97       	sbiw	r30, 0x25	; 37
     cac:	e4 35       	cpi	r30, 0x54	; 84
     cae:	f1 05       	cpc	r31, r1
     cb0:	28 f7       	brcc	.-54     	; 0xc7c <LCD_Printf+0x208>
     cb2:	e2 58       	subi	r30, 0x82	; 130
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__tablejump2__>
            LCD_DisplayChar(ch);
        }
    }

    va_end(argp);
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	df 90       	pop	r13
     cc8:	cf 90       	pop	r12
     cca:	bf 90       	pop	r11
     ccc:	af 90       	pop	r10
     cce:	9f 90       	pop	r9
     cd0:	8f 90       	pop	r8
     cd2:	7f 90       	pop	r7
     cd4:	6f 90       	pop	r6
     cd6:	5f 90       	pop	r5
     cd8:	4f 90       	pop	r4
     cda:	08 95       	ret

00000cdc <__vector_3>:
void RTC_values();
int read_adc_channel(unsigned char channel);


ISR(INT2_vect)
{
     cdc:	1f 92       	push	r1
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	11 24       	eor	r1, r1
     ce6:	2f 93       	push	r18
     ce8:	8f 93       	push	r24
     cea:	9f 93       	push	r25
	score -= 100;
     cec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <score>
     cf0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <score+0x1>
     cf4:	84 56       	subi	r24, 0x64	; 100
     cf6:	91 09       	sbc	r25, r1
     cf8:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <score+0x1>
     cfc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <score>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d00:	2f e7       	ldi	r18, 0x7F	; 127
     d02:	88 e3       	ldi	r24, 0x38	; 56
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	21 50       	subi	r18, 0x01	; 1
     d08:	80 40       	sbci	r24, 0x00	; 0
     d0a:	90 40       	sbci	r25, 0x00	; 0
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <__vector_3+0x2a>
     d0e:	00 c0       	rjmp	.+0      	; 0xd10 <__vector_3+0x34>
     d10:	00 00       	nop
	_delay_ms(50);
}
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	2f 91       	pop	r18
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <RTC_values>:
	return 0;
}

void RTC_values()
{
	rtc.hour = 0x00; //  10:40:20 am
     d22:	e4 ed       	ldi	r30, 0xD4	; 212
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	12 82       	std	Z+2, r1	; 0x02
	rtc.min =  0x00;
     d28:	11 82       	std	Z+1, r1	; 0x01
	rtc.sec =  0x00;
     d2a:	10 82       	st	Z, r1

	rtc.date = 0x01; //1st Jan 2016
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	84 83       	std	Z+4, r24	; 0x04
	rtc.month = 0x01;
     d30:	85 83       	std	Z+5, r24	; 0x05
	rtc.year = 0x16;
     d32:	86 e1       	ldi	r24, 0x16	; 22
     d34:	86 83       	std	Z+6, r24	; 0x06
	rtc.weekDay = 5; // Friday: 5th day of week considering monday as first day.
     d36:	85 e0       	ldi	r24, 0x05	; 5
     d38:	83 83       	std	Z+3, r24	; 0x03
     d3a:	08 95       	ret

00000d3c <adc_init>:
}

/*ADC Function Definitions*/
void adc_init(void)
{
	ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADPS2);
     d3c:	84 ee       	ldi	r24, 0xE4	; 228
     d3e:	86 b9       	out	0x06, r24	; 6
	SFIOR=0x00;
     d40:	10 be       	out	0x30, r1	; 48
     d42:	08 95       	ret

00000d44 <read_adc_channel>:
}
int read_adc_channel(unsigned char channel)
{
	int adc_value;
	unsigned char temp;
	ADMUX=(1<<REFS0)|channel;
     d44:	80 64       	ori	r24, 0x40	; 64
     d46:	87 b9       	out	0x07, r24	; 7
     d48:	8f ec       	ldi	r24, 0xCF	; 207
     d4a:	97 e0       	ldi	r25, 0x07	; 7
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <read_adc_channel+0x8>
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <read_adc_channel+0xe>
     d52:	00 00       	nop
	_delay_ms(1);
	temp=ADCL;
     d54:	84 b1       	in	r24, 0x04	; 4
	adc_value=ADCH;
     d56:	25 b1       	in	r18, 0x05	; 5
	adc_value=(adc_value<<8)|temp;
     d58:	90 e0       	ldi	r25, 0x00	; 0
	return adc_value;
}
     d5a:	92 2b       	or	r25, r18
     d5c:	08 95       	ret

00000d5e <main>:
}



int main(void)
{
     d5e:	2f 92       	push	r2
     d60:	3f 92       	push	r3
     d62:	5f 92       	push	r5
     d64:	6f 92       	push	r6
     d66:	7f 92       	push	r7
     d68:	8f 92       	push	r8
     d6a:	9f 92       	push	r9
     d6c:	af 92       	push	r10
     d6e:	bf 92       	push	r11
     d70:	cf 92       	push	r12
     d72:	df 92       	push	r13
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	29 97       	sbiw	r28, 0x09	; 9
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0b11111000;
     d90:	88 ef       	ldi	r24, 0xF8	; 248
     d92:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11111000;
     d94:	88 bb       	out	0x18, r24	; 24
	
	RTC_values();
     d96:	0e 94 91 06 	call	0xd22	; 0xd22 <RTC_values>
	
	LCD_SetUp(PC_6,P_NC,PC_7,P_NC,P_NC,P_NC,P_NC,PD_4,PD_5,PD_6,PD_7);
     d9a:	8f e1       	ldi	r24, 0x1F	; 31
     d9c:	8f 93       	push	r24
     d9e:	8e e1       	ldi	r24, 0x1E	; 30
     da0:	8f 93       	push	r24
     da2:	0f 2e       	mov	r0, r31
     da4:	fd e1       	ldi	r31, 0x1D	; 29
     da6:	8f 2e       	mov	r8, r31
     da8:	f0 2d       	mov	r31, r0
     daa:	0f 2e       	mov	r0, r31
     dac:	fc e1       	ldi	r31, 0x1C	; 28
     dae:	af 2e       	mov	r10, r31
     db0:	f0 2d       	mov	r31, r0
     db2:	cc 24       	eor	r12, r12
     db4:	ca 94       	dec	r12
     db6:	ee 24       	eor	r14, r14
     db8:	ea 94       	dec	r14
     dba:	0f ef       	ldi	r16, 0xFF	; 255
     dbc:	2f ef       	ldi	r18, 0xFF	; 255
     dbe:	47 e1       	ldi	r20, 0x17	; 23
     dc0:	6f ef       	ldi	r22, 0xFF	; 255
     dc2:	86 e1       	ldi	r24, 0x16	; 22
     dc4:	0e 94 2c 03 	call	0x658	; 0x658 <LCD_SetUp>
	LCD_Init(2,16);
     dc8:	60 e1       	ldi	r22, 0x10	; 16
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_Init>
	RTC_Init();
     dd0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <RTC_Init>
	
	
	GICR = (1 << INT2);
     dd4:	80 e2       	ldi	r24, 0x20	; 32
     dd6:	8b bf       	out	0x3b, r24	; 59
	MCUCSR |= (1 << ISC2);
     dd8:	84 b7       	in	r24, 0x34	; 52
     dda:	80 64       	ori	r24, 0x40	; 64
     ddc:	84 bf       	out	0x34, r24	; 52
	
	sei();
     dde:	78 94       	sei
	
	//ADMUX = 0b01100000;
	//ADCSRA = 0b10000111;
	currentOff = 4;
     de0:	84 e0       	ldi	r24, 0x04	; 4
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <currentOff+0x1>
     de8:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <currentOff>
	wait = 0;
     dec:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <wait+0x1>
     df0:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <wait>
	char arr[9];
	strcpy(arr, "Life : ");
     df4:	88 e0       	ldi	r24, 0x08	; 8
     df6:	ec e7       	ldi	r30, 0x7C	; 124
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	de 01       	movw	r26, r28
     dfc:	11 96       	adiw	r26, 0x01	; 1
     dfe:	01 90       	ld	r0, Z+
     e00:	0d 92       	st	X+, r0
     e02:	8a 95       	dec	r24
     e04:	e1 f7       	brne	.-8      	; 0xdfe <main+0xa0>
	arr[7] = life + '0';
     e06:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <life>
     e0a:	80 5d       	subi	r24, 0xD0	; 208
     e0c:	88 87       	std	Y+8, r24	; 0x08
	arr[8] = '\0';
     e0e:	19 86       	std	Y+9, r1	; 0x09
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
				_delay_ms(25);
			}
			
			for(int i = 0; i < 5; i++)
			{
				ADCSRA = 0b10000111;
     e14:	0f 2e       	mov	r0, r31
     e16:	f7 e8       	ldi	r31, 0x87	; 135
     e18:	5f 2e       	mov	r5, r31
     e1a:	f0 2d       	mov	r31, r0
			wait++;
			
			LCD_Clear();
			LCD_GoToLine(0);
			//LCD_Printf(arr);
			LCD_Printf("life: %d", life);
     e1c:	0f 2e       	mov	r0, r31
     e1e:	fc ea       	ldi	r31, 0xAC	; 172
     e20:	8f 2e       	mov	r8, r31
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	9f 2e       	mov	r9, r31
     e26:	f0 2d       	mov	r31, r0
			LCD_GoToLine(1);
			LCD_Printf("score: %d", score);
     e28:	0f 2e       	mov	r0, r31
     e2a:	f4 e9       	ldi	r31, 0x94	; 148
     e2c:	af 2e       	mov	r10, r31
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	bf 2e       	mov	r11, r31
     e32:	f0 2d       	mov	r31, r0
			ADMUX = 0x00;
			
			if(wait == 10)
			{
				wait = 0;
				currentOff = (currentOff + 1) % 5;
     e34:	0f 2e       	mov	r0, r31
     e36:	f5 e0       	ldi	r31, 0x05	; 5
     e38:	2f 2e       	mov	r2, r31
     e3a:	31 2c       	mov	r3, r1
     e3c:	f0 2d       	mov	r31, r0
				RTC_SetDateTime(&rtc);
				//ADCSRA = 0b10000111;
			}
			LCD_Clear();
			LCD_GoToLine(0);
			LCD_Printf("Start");
     e3e:	0f 2e       	mov	r0, r31
     e40:	f4 e8       	ldi	r31, 0x84	; 132
     e42:	cf 2e       	mov	r12, r31
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	df 2e       	mov	r13, r31
     e48:	f0 2d       	mov	r31, r0
			analog_ir_sensor_value = analog_ir_sensor_value/256;
			
			if(analog_ir_sensor_value < 2)
			{
				//object detected
				start = 1;
     e4a:	66 24       	eor	r6, r6
     e4c:	63 94       	inc	r6
     e4e:	71 2c       	mov	r7, r1
	
	
	/* Replace with your application code */
	while (1)
	{
		if(start == 0)
     e50:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end>
     e54:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x1>
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	41 f5       	brne	.+80     	; 0xeac <main+0x14e>
		{
			adc_init();
     e5c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <adc_init>
			/*Reading analog ir sensor value*/
			analog_ir_sensor_value=read_adc_channel(0);
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	0e 94 a2 06 	call	0xd44	; 0xd44 <read_adc_channel>
			analog_ir_sensor_value = analog_ir_sensor_value/256;
     e66:	99 23       	and	r25, r25
     e68:	14 f4       	brge	.+4      	; 0xe6e <main+0x110>
     e6a:	81 50       	subi	r24, 0x01	; 1
     e6c:	9f 4f       	sbci	r25, 0xFF	; 255
     e6e:	29 2f       	mov	r18, r25
     e70:	39 2f       	mov	r19, r25
     e72:	33 0f       	add	r19, r19
     e74:	33 0b       	sbc	r19, r19
     e76:	30 93 cf 00 	sts	0x00CF, r19	; 0x8000cf <analog_ir_sensor_value+0x1>
     e7a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <analog_ir_sensor_value>
			
			if(analog_ir_sensor_value < 2)
     e7e:	22 30       	cpi	r18, 0x02	; 2
     e80:	31 05       	cpc	r19, r1
     e82:	44 f4       	brge	.+16     	; 0xe94 <main+0x136>
			{
				//object detected
				start = 1;
     e84:	70 92 b7 00 	sts	0x00B7, r7	; 0x8000b7 <__data_end+0x1>
     e88:	60 92 b6 00 	sts	0x00B6, r6	; 0x8000b6 <__data_end>
				RTC_SetDateTime(&rtc);
     e8c:	84 ed       	ldi	r24, 0xD4	; 212
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <RTC_SetDateTime>
				//ADCSRA = 0b10000111;
			}
			LCD_Clear();
     e94:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_Clear>
			LCD_GoToLine(0);
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_GoToLine>
			LCD_Printf("Start");
     e9e:	df 92       	push	r13
     ea0:	cf 92       	push	r12
     ea2:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCD_Printf>
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	4d c1       	rjmp	.+666    	; 0x1146 <main+0x3e8>
		}
		else if(start == 1)
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	09 f0       	breq	.+2      	; 0xeb2 <main+0x154>
     eb0:	4a c1       	rjmp	.+660    	; 0x1146 <main+0x3e8>
		{
			adc_init();
     eb2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <adc_init>
			/*Reading analog ir sensor value*/
			analog_ir_sensor_value=read_adc_channel(2);
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	0e 94 a2 06 	call	0xd44	; 0xd44 <read_adc_channel>
			analog_ir_sensor_value = analog_ir_sensor_value/256;
     ebc:	99 23       	and	r25, r25
     ebe:	14 f4       	brge	.+4      	; 0xec4 <main+0x166>
     ec0:	81 50       	subi	r24, 0x01	; 1
     ec2:	9f 4f       	sbci	r25, 0xFF	; 255
     ec4:	29 2f       	mov	r18, r25
     ec6:	39 2f       	mov	r19, r25
     ec8:	33 0f       	add	r19, r19
     eca:	33 0b       	sbc	r19, r19
     ecc:	30 93 cf 00 	sts	0x00CF, r19	; 0x8000cf <analog_ir_sensor_value+0x1>
     ed0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <analog_ir_sensor_value>
			
			if(analog_ir_sensor_value < 2)
     ed4:	22 30       	cpi	r18, 0x02	; 2
     ed6:	31 05       	cpc	r19, r1
     ed8:	0c f0       	brlt	.+2      	; 0xedc <main+0x17e>
     eda:	40 c0       	rjmp	.+128    	; 0xf5c <main+0x1fe>
			{
				//object detected at end point
				RTC_GetDateTime(&rtc);
     edc:	84 ed       	ldi	r24, 0xD4	; 212
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 05 09 	call	0x120a	; 0x120a <RTC_GetDateTime>
				LCD_Clear();
     ee4:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_Clear>
				LCD_GoToLine(0);
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_GoToLine>
				LCD_Printf("Game Over");
     eee:	8a e8       	ldi	r24, 0x8A	; 138
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	9f 93       	push	r25
     ef4:	8f 93       	push	r24
     ef6:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCD_Printf>
     efa:	2f ef       	ldi	r18, 0xFF	; 255
     efc:	84 e3       	ldi	r24, 0x34	; 52
     efe:	9c e0       	ldi	r25, 0x0C	; 12
     f00:	21 50       	subi	r18, 0x01	; 1
     f02:	80 40       	sbci	r24, 0x00	; 0
     f04:	90 40       	sbci	r25, 0x00	; 0
     f06:	e1 f7       	brne	.-8      	; 0xf00 <main+0x1a2>
     f08:	00 c0       	rjmp	.+0      	; 0xf0a <main+0x1ac>
     f0a:	00 00       	nop
				_delay_ms(500);
				LCD_Clear();
     f0c:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_Clear>
				LCD_GoToLine(0);
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_GoToLine>
				LCD_Printf("score: %d", score);
     f16:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <score+0x1>
     f1a:	8f 93       	push	r24
     f1c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <score>
     f20:	8f 93       	push	r24
     f22:	84 e9       	ldi	r24, 0x94	; 148
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	9f 93       	push	r25
     f28:	8f 93       	push	r24
     f2a:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCD_Printf>
				LCD_GoToLine(1);
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_GoToLine>
				LCD_Printf("time: %2x:%2x",(uint16_t)rtc.min,(uint16_t)rtc.sec);
     f34:	e4 ed       	ldi	r30, 0xD4	; 212
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	1f 92       	push	r1
     f3c:	8f 93       	push	r24
     f3e:	81 81       	ldd	r24, Z+1	; 0x01
     f40:	1f 92       	push	r1
     f42:	8f 93       	push	r24
     f44:	8e e9       	ldi	r24, 0x9E	; 158
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	9f 93       	push	r25
     f4a:	8f 93       	push	r24
     f4c:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCD_Printf>
				break;
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	08 c1       	rjmp	.+528    	; 0x116c <main+0x40e>
			}
			
			ADCSRA = 0x00;
     f5c:	16 b8       	out	0x06, r1	; 6
			ADMUX = 0x00;
     f5e:	17 b8       	out	0x07, r1	; 7
			
			if(wait == 10)
     f60:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <wait>
     f64:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <wait+0x1>
     f68:	0a 97       	sbiw	r24, 0x0a	; 10
     f6a:	09 f0       	breq	.+2      	; 0xf6e <main+0x210>
     f6c:	f6 c0       	rjmp	.+492    	; 0x115a <main+0x3fc>
			{
				wait = 0;
     f6e:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <wait+0x1>
     f72:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <wait>
				currentOff = (currentOff + 1) % 5;
     f76:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <currentOff>
     f7a:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <currentOff+0x1>
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	b1 01       	movw	r22, r2
     f82:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__divmodhi4>
     f86:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <currentOff+0x1>
     f8a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <currentOff>
				PORTB = output[currentOff];
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	fc 01       	movw	r30, r24
     f94:	e2 59       	subi	r30, 0x92	; 146
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	80 81       	ld	r24, Z
     f9a:	88 bb       	out	0x18, r24	; 24
     f9c:	8f e4       	ldi	r24, 0x4F	; 79
     f9e:	93 ec       	ldi	r25, 0xC3	; 195
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <main+0x242>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <main+0x248>
     fa6:	00 00       	nop
     fa8:	d8 c0       	rjmp	.+432    	; 0x115a <main+0x3fc>
				_delay_ms(25);
			}
			
			for(int i = 0; i < 5; i++)
			{
				ADCSRA = 0b10000111;
     faa:	56 b8       	out	0x06, r5	; 6
				ADMUX = admux[i];
     fac:	f7 01       	movw	r30, r14
     fae:	80 81       	ld	r24, Z
     fb0:	f2 e0       	ldi	r31, 0x02	; 2
     fb2:	ef 0e       	add	r14, r31
     fb4:	f1 1c       	adc	r15, r1
     fb6:	87 b9       	out	0x07, r24	; 7
				
				ADCSRA |= (1 << ADSC);
     fb8:	36 9a       	sbi	0x06, 6	; 6
				while (ADCSRA & (1 << ADSC));
     fba:	36 99       	sbic	0x06, 6	; 6
     fbc:	fe cf       	rjmp	.-4      	; 0xfba <main+0x25c>
				adc_output = (ADC >> 6);
     fbe:	64 b1       	in	r22, 0x04	; 4
     fc0:	75 b1       	in	r23, 0x05	; 5
     fc2:	00 24       	eor	r0, r0
     fc4:	66 0f       	add	r22, r22
     fc6:	77 1f       	adc	r23, r23
     fc8:	00 1c       	adc	r0, r0
     fca:	66 0f       	add	r22, r22
     fcc:	77 1f       	adc	r23, r23
     fce:	00 1c       	adc	r0, r0
     fd0:	67 2f       	mov	r22, r23
     fd2:	70 2d       	mov	r23, r0
     fd4:	70 93 bd 00 	sts	0x00BD, r23	; 0x8000bd <adc_output+0x1>
     fd8:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <adc_output>
				actual_voltage = 1.0 * adc_output / 256;
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__floatunsisf>
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e8       	ldi	r20, 0x80	; 128
     fea:	5b e3       	ldi	r21, 0x3B	; 59
     fec:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3>
     ff0:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <actual_voltage>
     ff4:	70 93 b9 00 	sts	0x00B9, r23	; 0x8000b9 <actual_voltage+0x1>
     ff8:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <actual_voltage+0x2>
     ffc:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <actual_voltage+0x3>
				
				if((actual_voltage > 2) && (i != currentOff))
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	50 e4       	ldi	r21, 0x40	; 64
    1008:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__gesf2>
    100c:	18 16       	cp	r1, r24
    100e:	f4 f4       	brge	.+60     	; 0x104c <main+0x2ee>
    1010:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <currentOff>
    1014:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <currentOff+0x1>
    1018:	80 17       	cp	r24, r16
    101a:	91 07       	cpc	r25, r17
    101c:	b9 f0       	breq	.+46     	; 0x104c <main+0x2ee>
				{
					//object crossed laser
					life--;
    101e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <life>
    1022:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <life+0x1>
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <life+0x1>
    102c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <life>
					score -= 50;
    1030:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <score>
    1034:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <score+0x1>
    1038:	22 53       	subi	r18, 0x32	; 50
    103a:	31 09       	sbc	r19, r1
    103c:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <score+0x1>
    1040:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <score>
					if(life == 0) 
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	a9 f0       	breq	.+42     	; 0x1072 <main+0x314>
					{
						break;
					}
					arr[7] = life + '0';
    1048:	80 5d       	subi	r24, 0xD0	; 208
    104a:	88 87       	std	Y+8, r24	; 0x08
    104c:	8f e4       	ldi	r24, 0x4F	; 79
    104e:	93 ec       	ldi	r25, 0xC3	; 195
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	f1 f7       	brne	.-4      	; 0x1050 <main+0x2f2>
    1054:	00 c0       	rjmp	.+0      	; 0x1056 <main+0x2f8>
    1056:	00 00       	nop
				currentOff = (currentOff + 1) % 5;
				PORTB = output[currentOff];
				_delay_ms(25);
			}
			
			for(int i = 0; i < 5; i++)
    1058:	0f 5f       	subi	r16, 0xFF	; 255
    105a:	1f 4f       	sbci	r17, 0xFF	; 255
    105c:	05 30       	cpi	r16, 0x05	; 5
    105e:	11 05       	cpc	r17, r1
    1060:	09 f0       	breq	.+2      	; 0x1064 <main+0x306>
    1062:	a3 cf       	rjmp	.-186    	; 0xfaa <main+0x24c>
					arr[7] = life + '0';
				}
				_delay_ms(25);
			}
			
			if(life == 0)
    1064:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <life>
    1068:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <life+0x1>
    106c:	89 2b       	or	r24, r25
    106e:	09 f0       	breq	.+2      	; 0x1072 <main+0x314>
    1070:	40 c0       	rjmp	.+128    	; 0x10f2 <main+0x394>
			{
				RTC_GetDateTime(&rtc);
    1072:	84 ed       	ldi	r24, 0xD4	; 212
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 05 09 	call	0x120a	; 0x120a <RTC_GetDateTime>
				LCD_Clear();
    107a:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_Clear>
				LCD_GoToLine(0);
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_GoToLine>
				LCD_Printf("Game Over");
    1084:	8a e8       	ldi	r24, 0x8A	; 138
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	9f 93       	push	r25
    108a:	8f 93       	push	r24
    108c:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCD_Printf>
    1090:	9f ef       	ldi	r25, 0xFF	; 255
    1092:	e4 e3       	ldi	r30, 0x34	; 52
    1094:	fc e0       	ldi	r31, 0x0C	; 12
    1096:	91 50       	subi	r25, 0x01	; 1
    1098:	e0 40       	sbci	r30, 0x00	; 0
    109a:	f0 40       	sbci	r31, 0x00	; 0
    109c:	e1 f7       	brne	.-8      	; 0x1096 <main+0x338>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <main+0x342>
    10a0:	00 00       	nop
				_delay_ms(500);
				LCD_Clear();
    10a2:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_Clear>
				LCD_GoToLine(0);
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_GoToLine>
				LCD_Printf("score: %d", score);
    10ac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <score+0x1>
    10b0:	8f 93       	push	r24
    10b2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <score>
    10b6:	8f 93       	push	r24
    10b8:	84 e9       	ldi	r24, 0x94	; 148
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	9f 93       	push	r25
    10be:	8f 93       	push	r24
    10c0:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCD_Printf>
				LCD_GoToLine(1);
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_GoToLine>
				LCD_Printf("time: %2x:%2x",(uint16_t)rtc.min,(uint16_t)rtc.sec);
    10ca:	e4 ed       	ldi	r30, 0xD4	; 212
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	1f 92       	push	r1
    10d2:	8f 93       	push	r24
    10d4:	81 81       	ldd	r24, Z+1	; 0x01
    10d6:	1f 92       	push	r1
    10d8:	8f 93       	push	r24
    10da:	8e e9       	ldi	r24, 0x9E	; 158
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	9f 93       	push	r25
    10e0:	8f 93       	push	r24
    10e2:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCD_Printf>
				break;
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	3d c0       	rjmp	.+122    	; 0x116c <main+0x40e>
			}
			
			wait++;
    10f2:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <wait>
    10f6:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <wait+0x1>
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <wait+0x1>
    1100:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <wait>
			
			LCD_Clear();
    1104:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_Clear>
			LCD_GoToLine(0);
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_GoToLine>
			//LCD_Printf(arr);
			LCD_Printf("life: %d", life);
    110e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <life+0x1>
    1112:	8f 93       	push	r24
    1114:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <life>
    1118:	8f 93       	push	r24
    111a:	9f 92       	push	r9
    111c:	8f 92       	push	r8
    111e:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCD_Printf>
			LCD_GoToLine(1);
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_GoToLine>
			LCD_Printf("score: %d", score);
    1128:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <score+0x1>
    112c:	8f 93       	push	r24
    112e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <score>
    1132:	8f 93       	push	r24
    1134:	bf 92       	push	r11
    1136:	af 92       	push	r10
    1138:	0e 94 3a 05 	call	0xa74	; 0xa74 <LCD_Printf>
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	ff ef       	ldi	r31, 0xFF	; 255
    1148:	20 e7       	ldi	r18, 0x70	; 112
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	f1 50       	subi	r31, 0x01	; 1
    114e:	20 40       	sbci	r18, 0x00	; 0
    1150:	80 40       	sbci	r24, 0x00	; 0
    1152:	e1 f7       	brne	.-8      	; 0x114c <main+0x3ee>
    1154:	00 c0       	rjmp	.+0      	; 0x1156 <main+0x3f8>
    1156:	00 00       	nop
    1158:	7b ce       	rjmp	.-778    	; 0xe50 <main+0xf2>
    115a:	0f 2e       	mov	r0, r31
    115c:	f4 e6       	ldi	r31, 0x64	; 100
    115e:	ef 2e       	mov	r14, r31
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	ff 2e       	mov	r15, r31
    1164:	f0 2d       	mov	r31, r0
}



int main(void)
{
    1166:	00 e0       	ldi	r16, 0x00	; 0
    1168:	10 e0       	ldi	r17, 0x00	; 0
    116a:	1f cf       	rjmp	.-450    	; 0xfaa <main+0x24c>
		}
		_delay_ms(100);
		
	}
	return 0;
}
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	29 96       	adiw	r28, 0x09	; 9
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	ff 90       	pop	r15
    1186:	ef 90       	pop	r14
    1188:	df 90       	pop	r13
    118a:	cf 90       	pop	r12
    118c:	bf 90       	pop	r11
    118e:	af 90       	pop	r10
    1190:	9f 90       	pop	r9
    1192:	8f 90       	pop	r8
    1194:	7f 90       	pop	r7
    1196:	6f 90       	pop	r6
    1198:	5f 90       	pop	r5
    119a:	3f 90       	pop	r3
    119c:	2f 90       	pop	r2
    119e:	08 95       	ret

000011a0 <RTC_Init>:

 * description :This function is used to Initialize the Ds1307 RTC.
***************************************************************************************************/
void RTC_Init(void)
{
    I2C_Init();                             // Initialize the I2c module.
    11a0:	0e 94 39 02 	call	0x472	; 0x472 <I2C_Init>
    I2C_Start();                            // Start I2C communication
    11a4:	0e 94 3f 02 	call	0x47e	; 0x47e <I2C_Start>

    I2C_Write(C_Ds1307WriteMode_U8);        // Connect to DS1307 by sending its ID on I2c Bus
    11a8:	80 ed       	ldi	r24, 0xD0	; 208
    11aa:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>
    I2C_Write(C_Ds1307ControlRegAddress_U8);// Select the Ds1307 ControlRegister to configure Ds1307
    11ae:	87 e0       	ldi	r24, 0x07	; 7
    11b0:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>

    I2C_Write(0x00);                        // Write 0x00 to Control register to disable SQW-Out
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>

    I2C_Stop();                             // Stop I2C communication after initializing DS1307
    11ba:	0e 94 45 02 	call	0x48a	; 0x48a <I2C_Stop>
    11be:	08 95       	ret

000011c0 <RTC_SetDateTime>:
        Note: The date and time should be of BCD format, 
             like 0x12,0x39,0x26 for 12hr,39min and 26sec.    
                  0x15,0x08,0x47 for 15th day,8th month and 47th year.                 
***************************************************************************************************/
void RTC_SetDateTime(rtc_t *rtc)
{
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ec 01       	movw	r28, r24
    I2C_Start();                          // Start I2C communication
    11c6:	0e 94 3f 02 	call	0x47e	; 0x47e <I2C_Start>

    I2C_Write(C_Ds1307WriteMode_U8);      // connect to DS1307 by sending its ID on I2c Bus
    11ca:	80 ed       	ldi	r24, 0xD0	; 208
    11cc:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>
    I2C_Write(C_Ds1307SecondRegAddress_U8); // Request sec RAM address at 00H
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>

    I2C_Write(rtc->sec);                    // Write sec from RAM address 00H
    11d6:	88 81       	ld	r24, Y
    11d8:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>
    I2C_Write(rtc->min);                    // Write min from RAM address 01H
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>
    I2C_Write(rtc->hour);                    // Write hour from RAM address 02H
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>
    I2C_Write(rtc->weekDay);                // Write weekDay on RAM address 03H
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>
    I2C_Write(rtc->date);                    // Write date on RAM address 04H
    11ee:	8c 81       	ldd	r24, Y+4	; 0x04
    11f0:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>
    I2C_Write(rtc->month);                    // Write month on RAM address 05H
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>
    I2C_Write(rtc->year);                    // Write year on RAM address 06h
    11fa:	8e 81       	ldd	r24, Y+6	; 0x06
    11fc:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>

    I2C_Stop();                              // Stop I2C communication after Setting the Date
    1200:	0e 94 45 02 	call	0x48a	; 0x48a <I2C_Stop>
}
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <RTC_GetDateTime>:
    Note: The date and time read from Ds1307 will be of BCD format, 
          like 0x12,0x39,0x26 for 12hr,39min and 26sec.    
               0x15,0x08,0x47 for 15th day,8th month and 47th year.              
***************************************************************************************************/
void RTC_GetDateTime(rtc_t *rtc)
{
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	ec 01       	movw	r28, r24
    I2C_Start();                            // Start I2C communication
    1210:	0e 94 3f 02 	call	0x47e	; 0x47e <I2C_Start>

    I2C_Write(C_Ds1307WriteMode_U8);        // connect to DS1307 by sending its ID on I2c Bus
    1214:	80 ed       	ldi	r24, 0xD0	; 208
    1216:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>
    I2C_Write(C_Ds1307SecondRegAddress_U8); // Request Sec RAM address at 00H
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>

    I2C_Stop();                                // Stop I2C communication after selecting Sec Register
    1220:	0e 94 45 02 	call	0x48a	; 0x48a <I2C_Stop>

    I2C_Start();                            // Start I2C communication
    1224:	0e 94 3f 02 	call	0x47e	; 0x47e <I2C_Start>
    I2C_Write(C_Ds1307ReadMode_U8);            // connect to DS1307(Read mode) by sending its ID
    1228:	81 ed       	ldi	r24, 0xD1	; 209
    122a:	0e 94 4c 02 	call	0x498	; 0x498 <I2C_Write>

    rtc->sec = I2C_Read(1);                // read second and return Positive ACK
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	0e 94 53 02 	call	0x4a6	; 0x4a6 <I2C_Read>
    1234:	88 83       	st	Y, r24
    rtc->min = I2C_Read(1);                 // read minute and return Positive ACK
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	0e 94 53 02 	call	0x4a6	; 0x4a6 <I2C_Read>
    123c:	89 83       	std	Y+1, r24	; 0x01
    rtc->hour= I2C_Read(1);               // read hour and return Negative/No ACK
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	0e 94 53 02 	call	0x4a6	; 0x4a6 <I2C_Read>
    1244:	8a 83       	std	Y+2, r24	; 0x02
    rtc->weekDay = I2C_Read(1);           // read weekDay and return Positive ACK
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	0e 94 53 02 	call	0x4a6	; 0x4a6 <I2C_Read>
    124c:	8b 83       	std	Y+3, r24	; 0x03
    rtc->date= I2C_Read(1);              // read Date and return Positive ACK
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	0e 94 53 02 	call	0x4a6	; 0x4a6 <I2C_Read>
    1254:	8c 83       	std	Y+4, r24	; 0x04
    rtc->month=I2C_Read(1);            // read Month and return Positive ACK
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	0e 94 53 02 	call	0x4a6	; 0x4a6 <I2C_Read>
    125c:	8d 83       	std	Y+5, r24	; 0x05
    rtc->year =I2C_Read(0);             // read Year and return Negative/No ACK
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	0e 94 53 02 	call	0x4a6	; 0x4a6 <I2C_Read>
    1264:	8e 83       	std	Y+6, r24	; 0x06

    I2C_Stop();                              // Stop I2C communication after reading the Date
    1266:	0e 94 45 02 	call	0x48a	; 0x48a <I2C_Stop>
}
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <__subsf3>:
    1270:	50 58       	subi	r21, 0x80	; 128

00001272 <__addsf3>:
    1272:	bb 27       	eor	r27, r27
    1274:	aa 27       	eor	r26, r26
    1276:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__addsf3x>
    127a:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__fp_round>
    127e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__fp_pscA>
    1282:	38 f0       	brcs	.+14     	; 0x1292 <__addsf3+0x20>
    1284:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fp_pscB>
    1288:	20 f0       	brcs	.+8      	; 0x1292 <__addsf3+0x20>
    128a:	39 f4       	brne	.+14     	; 0x129a <__addsf3+0x28>
    128c:	9f 3f       	cpi	r25, 0xFF	; 255
    128e:	19 f4       	brne	.+6      	; 0x1296 <__addsf3+0x24>
    1290:	26 f4       	brtc	.+8      	; 0x129a <__addsf3+0x28>
    1292:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__fp_nan>
    1296:	0e f4       	brtc	.+2      	; 0x129a <__addsf3+0x28>
    1298:	e0 95       	com	r30
    129a:	e7 fb       	bst	r30, 7
    129c:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__fp_inf>

000012a0 <__addsf3x>:
    12a0:	e9 2f       	mov	r30, r25
    12a2:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fp_split3>
    12a6:	58 f3       	brcs	.-42     	; 0x127e <__addsf3+0xc>
    12a8:	ba 17       	cp	r27, r26
    12aa:	62 07       	cpc	r22, r18
    12ac:	73 07       	cpc	r23, r19
    12ae:	84 07       	cpc	r24, r20
    12b0:	95 07       	cpc	r25, r21
    12b2:	20 f0       	brcs	.+8      	; 0x12bc <__addsf3x+0x1c>
    12b4:	79 f4       	brne	.+30     	; 0x12d4 <__addsf3x+0x34>
    12b6:	a6 f5       	brtc	.+104    	; 0x1320 <__addsf3x+0x80>
    12b8:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__fp_zero>
    12bc:	0e f4       	brtc	.+2      	; 0x12c0 <__addsf3x+0x20>
    12be:	e0 95       	com	r30
    12c0:	0b 2e       	mov	r0, r27
    12c2:	ba 2f       	mov	r27, r26
    12c4:	a0 2d       	mov	r26, r0
    12c6:	0b 01       	movw	r0, r22
    12c8:	b9 01       	movw	r22, r18
    12ca:	90 01       	movw	r18, r0
    12cc:	0c 01       	movw	r0, r24
    12ce:	ca 01       	movw	r24, r20
    12d0:	a0 01       	movw	r20, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	ff 27       	eor	r31, r31
    12d6:	59 1b       	sub	r21, r25
    12d8:	99 f0       	breq	.+38     	; 0x1300 <__addsf3x+0x60>
    12da:	59 3f       	cpi	r21, 0xF9	; 249
    12dc:	50 f4       	brcc	.+20     	; 0x12f2 <__addsf3x+0x52>
    12de:	50 3e       	cpi	r21, 0xE0	; 224
    12e0:	68 f1       	brcs	.+90     	; 0x133c <__addsf3x+0x9c>
    12e2:	1a 16       	cp	r1, r26
    12e4:	f0 40       	sbci	r31, 0x00	; 0
    12e6:	a2 2f       	mov	r26, r18
    12e8:	23 2f       	mov	r18, r19
    12ea:	34 2f       	mov	r19, r20
    12ec:	44 27       	eor	r20, r20
    12ee:	58 5f       	subi	r21, 0xF8	; 248
    12f0:	f3 cf       	rjmp	.-26     	; 0x12d8 <__addsf3x+0x38>
    12f2:	46 95       	lsr	r20
    12f4:	37 95       	ror	r19
    12f6:	27 95       	ror	r18
    12f8:	a7 95       	ror	r26
    12fa:	f0 40       	sbci	r31, 0x00	; 0
    12fc:	53 95       	inc	r21
    12fe:	c9 f7       	brne	.-14     	; 0x12f2 <__addsf3x+0x52>
    1300:	7e f4       	brtc	.+30     	; 0x1320 <__addsf3x+0x80>
    1302:	1f 16       	cp	r1, r31
    1304:	ba 0b       	sbc	r27, r26
    1306:	62 0b       	sbc	r22, r18
    1308:	73 0b       	sbc	r23, r19
    130a:	84 0b       	sbc	r24, r20
    130c:	ba f0       	brmi	.+46     	; 0x133c <__addsf3x+0x9c>
    130e:	91 50       	subi	r25, 0x01	; 1
    1310:	a1 f0       	breq	.+40     	; 0x133a <__addsf3x+0x9a>
    1312:	ff 0f       	add	r31, r31
    1314:	bb 1f       	adc	r27, r27
    1316:	66 1f       	adc	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	88 1f       	adc	r24, r24
    131c:	c2 f7       	brpl	.-16     	; 0x130e <__addsf3x+0x6e>
    131e:	0e c0       	rjmp	.+28     	; 0x133c <__addsf3x+0x9c>
    1320:	ba 0f       	add	r27, r26
    1322:	62 1f       	adc	r22, r18
    1324:	73 1f       	adc	r23, r19
    1326:	84 1f       	adc	r24, r20
    1328:	48 f4       	brcc	.+18     	; 0x133c <__addsf3x+0x9c>
    132a:	87 95       	ror	r24
    132c:	77 95       	ror	r23
    132e:	67 95       	ror	r22
    1330:	b7 95       	ror	r27
    1332:	f7 95       	ror	r31
    1334:	9e 3f       	cpi	r25, 0xFE	; 254
    1336:	08 f0       	brcs	.+2      	; 0x133a <__addsf3x+0x9a>
    1338:	b0 cf       	rjmp	.-160    	; 0x129a <__addsf3+0x28>
    133a:	93 95       	inc	r25
    133c:	88 0f       	add	r24, r24
    133e:	08 f0       	brcs	.+2      	; 0x1342 <__addsf3x+0xa2>
    1340:	99 27       	eor	r25, r25
    1342:	ee 0f       	add	r30, r30
    1344:	97 95       	ror	r25
    1346:	87 95       	ror	r24
    1348:	08 95       	ret

0000134a <__fixunssfsi>:
    134a:	0e 94 41 0a 	call	0x1482	; 0x1482 <__fp_splitA>
    134e:	88 f0       	brcs	.+34     	; 0x1372 <__fixunssfsi+0x28>
    1350:	9f 57       	subi	r25, 0x7F	; 127
    1352:	98 f0       	brcs	.+38     	; 0x137a <__fixunssfsi+0x30>
    1354:	b9 2f       	mov	r27, r25
    1356:	99 27       	eor	r25, r25
    1358:	b7 51       	subi	r27, 0x17	; 23
    135a:	b0 f0       	brcs	.+44     	; 0x1388 <__fixunssfsi+0x3e>
    135c:	e1 f0       	breq	.+56     	; 0x1396 <__fixunssfsi+0x4c>
    135e:	66 0f       	add	r22, r22
    1360:	77 1f       	adc	r23, r23
    1362:	88 1f       	adc	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	1a f0       	brmi	.+6      	; 0x136e <__fixunssfsi+0x24>
    1368:	ba 95       	dec	r27
    136a:	c9 f7       	brne	.-14     	; 0x135e <__fixunssfsi+0x14>
    136c:	14 c0       	rjmp	.+40     	; 0x1396 <__fixunssfsi+0x4c>
    136e:	b1 30       	cpi	r27, 0x01	; 1
    1370:	91 f0       	breq	.+36     	; 0x1396 <__fixunssfsi+0x4c>
    1372:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__fp_zero>
    1376:	b1 e0       	ldi	r27, 0x01	; 1
    1378:	08 95       	ret
    137a:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__fp_zero>
    137e:	67 2f       	mov	r22, r23
    1380:	78 2f       	mov	r23, r24
    1382:	88 27       	eor	r24, r24
    1384:	b8 5f       	subi	r27, 0xF8	; 248
    1386:	39 f0       	breq	.+14     	; 0x1396 <__fixunssfsi+0x4c>
    1388:	b9 3f       	cpi	r27, 0xF9	; 249
    138a:	cc f3       	brlt	.-14     	; 0x137e <__fixunssfsi+0x34>
    138c:	86 95       	lsr	r24
    138e:	77 95       	ror	r23
    1390:	67 95       	ror	r22
    1392:	b3 95       	inc	r27
    1394:	d9 f7       	brne	.-10     	; 0x138c <__fixunssfsi+0x42>
    1396:	3e f4       	brtc	.+14     	; 0x13a6 <__fixunssfsi+0x5c>
    1398:	90 95       	com	r25
    139a:	80 95       	com	r24
    139c:	70 95       	com	r23
    139e:	61 95       	neg	r22
    13a0:	7f 4f       	sbci	r23, 0xFF	; 255
    13a2:	8f 4f       	sbci	r24, 0xFF	; 255
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	08 95       	ret

000013a8 <__floatunsisf>:
    13a8:	e8 94       	clt
    13aa:	09 c0       	rjmp	.+18     	; 0x13be <__floatsisf+0x12>

000013ac <__floatsisf>:
    13ac:	97 fb       	bst	r25, 7
    13ae:	3e f4       	brtc	.+14     	; 0x13be <__floatsisf+0x12>
    13b0:	90 95       	com	r25
    13b2:	80 95       	com	r24
    13b4:	70 95       	com	r23
    13b6:	61 95       	neg	r22
    13b8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ba:	8f 4f       	sbci	r24, 0xFF	; 255
    13bc:	9f 4f       	sbci	r25, 0xFF	; 255
    13be:	99 23       	and	r25, r25
    13c0:	a9 f0       	breq	.+42     	; 0x13ec <__floatsisf+0x40>
    13c2:	f9 2f       	mov	r31, r25
    13c4:	96 e9       	ldi	r25, 0x96	; 150
    13c6:	bb 27       	eor	r27, r27
    13c8:	93 95       	inc	r25
    13ca:	f6 95       	lsr	r31
    13cc:	87 95       	ror	r24
    13ce:	77 95       	ror	r23
    13d0:	67 95       	ror	r22
    13d2:	b7 95       	ror	r27
    13d4:	f1 11       	cpse	r31, r1
    13d6:	f8 cf       	rjmp	.-16     	; 0x13c8 <__floatsisf+0x1c>
    13d8:	fa f4       	brpl	.+62     	; 0x1418 <__floatsisf+0x6c>
    13da:	bb 0f       	add	r27, r27
    13dc:	11 f4       	brne	.+4      	; 0x13e2 <__floatsisf+0x36>
    13de:	60 ff       	sbrs	r22, 0
    13e0:	1b c0       	rjmp	.+54     	; 0x1418 <__floatsisf+0x6c>
    13e2:	6f 5f       	subi	r22, 0xFF	; 255
    13e4:	7f 4f       	sbci	r23, 0xFF	; 255
    13e6:	8f 4f       	sbci	r24, 0xFF	; 255
    13e8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ea:	16 c0       	rjmp	.+44     	; 0x1418 <__floatsisf+0x6c>
    13ec:	88 23       	and	r24, r24
    13ee:	11 f0       	breq	.+4      	; 0x13f4 <__floatsisf+0x48>
    13f0:	96 e9       	ldi	r25, 0x96	; 150
    13f2:	11 c0       	rjmp	.+34     	; 0x1416 <__floatsisf+0x6a>
    13f4:	77 23       	and	r23, r23
    13f6:	21 f0       	breq	.+8      	; 0x1400 <__floatsisf+0x54>
    13f8:	9e e8       	ldi	r25, 0x8E	; 142
    13fa:	87 2f       	mov	r24, r23
    13fc:	76 2f       	mov	r23, r22
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <__floatsisf+0x5e>
    1400:	66 23       	and	r22, r22
    1402:	71 f0       	breq	.+28     	; 0x1420 <__floatsisf+0x74>
    1404:	96 e8       	ldi	r25, 0x86	; 134
    1406:	86 2f       	mov	r24, r22
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	2a f0       	brmi	.+10     	; 0x1418 <__floatsisf+0x6c>
    140e:	9a 95       	dec	r25
    1410:	66 0f       	add	r22, r22
    1412:	77 1f       	adc	r23, r23
    1414:	88 1f       	adc	r24, r24
    1416:	da f7       	brpl	.-10     	; 0x140e <__floatsisf+0x62>
    1418:	88 0f       	add	r24, r24
    141a:	96 95       	lsr	r25
    141c:	87 95       	ror	r24
    141e:	97 f9       	bld	r25, 7
    1420:	08 95       	ret

00001422 <__fp_inf>:
    1422:	97 f9       	bld	r25, 7
    1424:	9f 67       	ori	r25, 0x7F	; 127
    1426:	80 e8       	ldi	r24, 0x80	; 128
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	08 95       	ret

0000142e <__fp_nan>:
    142e:	9f ef       	ldi	r25, 0xFF	; 255
    1430:	80 ec       	ldi	r24, 0xC0	; 192
    1432:	08 95       	ret

00001434 <__fp_pscA>:
    1434:	00 24       	eor	r0, r0
    1436:	0a 94       	dec	r0
    1438:	16 16       	cp	r1, r22
    143a:	17 06       	cpc	r1, r23
    143c:	18 06       	cpc	r1, r24
    143e:	09 06       	cpc	r0, r25
    1440:	08 95       	ret

00001442 <__fp_pscB>:
    1442:	00 24       	eor	r0, r0
    1444:	0a 94       	dec	r0
    1446:	12 16       	cp	r1, r18
    1448:	13 06       	cpc	r1, r19
    144a:	14 06       	cpc	r1, r20
    144c:	05 06       	cpc	r0, r21
    144e:	08 95       	ret

00001450 <__fp_round>:
    1450:	09 2e       	mov	r0, r25
    1452:	03 94       	inc	r0
    1454:	00 0c       	add	r0, r0
    1456:	11 f4       	brne	.+4      	; 0x145c <__fp_round+0xc>
    1458:	88 23       	and	r24, r24
    145a:	52 f0       	brmi	.+20     	; 0x1470 <__fp_round+0x20>
    145c:	bb 0f       	add	r27, r27
    145e:	40 f4       	brcc	.+16     	; 0x1470 <__fp_round+0x20>
    1460:	bf 2b       	or	r27, r31
    1462:	11 f4       	brne	.+4      	; 0x1468 <__fp_round+0x18>
    1464:	60 ff       	sbrs	r22, 0
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <__fp_round+0x20>
    1468:	6f 5f       	subi	r22, 0xFF	; 255
    146a:	7f 4f       	sbci	r23, 0xFF	; 255
    146c:	8f 4f       	sbci	r24, 0xFF	; 255
    146e:	9f 4f       	sbci	r25, 0xFF	; 255
    1470:	08 95       	ret

00001472 <__fp_split3>:
    1472:	57 fd       	sbrc	r21, 7
    1474:	90 58       	subi	r25, 0x80	; 128
    1476:	44 0f       	add	r20, r20
    1478:	55 1f       	adc	r21, r21
    147a:	59 f0       	breq	.+22     	; 0x1492 <__fp_splitA+0x10>
    147c:	5f 3f       	cpi	r21, 0xFF	; 255
    147e:	71 f0       	breq	.+28     	; 0x149c <__fp_splitA+0x1a>
    1480:	47 95       	ror	r20

00001482 <__fp_splitA>:
    1482:	88 0f       	add	r24, r24
    1484:	97 fb       	bst	r25, 7
    1486:	99 1f       	adc	r25, r25
    1488:	61 f0       	breq	.+24     	; 0x14a2 <__fp_splitA+0x20>
    148a:	9f 3f       	cpi	r25, 0xFF	; 255
    148c:	79 f0       	breq	.+30     	; 0x14ac <__fp_splitA+0x2a>
    148e:	87 95       	ror	r24
    1490:	08 95       	ret
    1492:	12 16       	cp	r1, r18
    1494:	13 06       	cpc	r1, r19
    1496:	14 06       	cpc	r1, r20
    1498:	55 1f       	adc	r21, r21
    149a:	f2 cf       	rjmp	.-28     	; 0x1480 <__fp_split3+0xe>
    149c:	46 95       	lsr	r20
    149e:	f1 df       	rcall	.-30     	; 0x1482 <__fp_splitA>
    14a0:	08 c0       	rjmp	.+16     	; 0x14b2 <__fp_splitA+0x30>
    14a2:	16 16       	cp	r1, r22
    14a4:	17 06       	cpc	r1, r23
    14a6:	18 06       	cpc	r1, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	f1 cf       	rjmp	.-30     	; 0x148e <__fp_splitA+0xc>
    14ac:	86 95       	lsr	r24
    14ae:	71 05       	cpc	r23, r1
    14b0:	61 05       	cpc	r22, r1
    14b2:	08 94       	sec
    14b4:	08 95       	ret

000014b6 <__fp_zero>:
    14b6:	e8 94       	clt

000014b8 <__fp_szero>:
    14b8:	bb 27       	eor	r27, r27
    14ba:	66 27       	eor	r22, r22
    14bc:	77 27       	eor	r23, r23
    14be:	cb 01       	movw	r24, r22
    14c0:	97 f9       	bld	r25, 7
    14c2:	08 95       	ret

000014c4 <__gesf2>:
    14c4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fp_cmp>
    14c8:	08 f4       	brcc	.+2      	; 0x14cc <__gesf2+0x8>
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	08 95       	ret

000014ce <__mulsf3>:
    14ce:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__mulsf3x>
    14d2:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__fp_round>
    14d6:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__fp_pscA>
    14da:	38 f0       	brcs	.+14     	; 0x14ea <__mulsf3+0x1c>
    14dc:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fp_pscB>
    14e0:	20 f0       	brcs	.+8      	; 0x14ea <__mulsf3+0x1c>
    14e2:	95 23       	and	r25, r21
    14e4:	11 f0       	breq	.+4      	; 0x14ea <__mulsf3+0x1c>
    14e6:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__fp_inf>
    14ea:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__fp_nan>
    14ee:	11 24       	eor	r1, r1
    14f0:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__fp_szero>

000014f4 <__mulsf3x>:
    14f4:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fp_split3>
    14f8:	70 f3       	brcs	.-36     	; 0x14d6 <__mulsf3+0x8>

000014fa <__mulsf3_pse>:
    14fa:	95 9f       	mul	r25, r21
    14fc:	c1 f3       	breq	.-16     	; 0x14ee <__mulsf3+0x20>
    14fe:	95 0f       	add	r25, r21
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	55 1f       	adc	r21, r21
    1504:	62 9f       	mul	r22, r18
    1506:	f0 01       	movw	r30, r0
    1508:	72 9f       	mul	r23, r18
    150a:	bb 27       	eor	r27, r27
    150c:	f0 0d       	add	r31, r0
    150e:	b1 1d       	adc	r27, r1
    1510:	63 9f       	mul	r22, r19
    1512:	aa 27       	eor	r26, r26
    1514:	f0 0d       	add	r31, r0
    1516:	b1 1d       	adc	r27, r1
    1518:	aa 1f       	adc	r26, r26
    151a:	64 9f       	mul	r22, r20
    151c:	66 27       	eor	r22, r22
    151e:	b0 0d       	add	r27, r0
    1520:	a1 1d       	adc	r26, r1
    1522:	66 1f       	adc	r22, r22
    1524:	82 9f       	mul	r24, r18
    1526:	22 27       	eor	r18, r18
    1528:	b0 0d       	add	r27, r0
    152a:	a1 1d       	adc	r26, r1
    152c:	62 1f       	adc	r22, r18
    152e:	73 9f       	mul	r23, r19
    1530:	b0 0d       	add	r27, r0
    1532:	a1 1d       	adc	r26, r1
    1534:	62 1f       	adc	r22, r18
    1536:	83 9f       	mul	r24, r19
    1538:	a0 0d       	add	r26, r0
    153a:	61 1d       	adc	r22, r1
    153c:	22 1f       	adc	r18, r18
    153e:	74 9f       	mul	r23, r20
    1540:	33 27       	eor	r19, r19
    1542:	a0 0d       	add	r26, r0
    1544:	61 1d       	adc	r22, r1
    1546:	23 1f       	adc	r18, r19
    1548:	84 9f       	mul	r24, r20
    154a:	60 0d       	add	r22, r0
    154c:	21 1d       	adc	r18, r1
    154e:	82 2f       	mov	r24, r18
    1550:	76 2f       	mov	r23, r22
    1552:	6a 2f       	mov	r22, r26
    1554:	11 24       	eor	r1, r1
    1556:	9f 57       	subi	r25, 0x7F	; 127
    1558:	50 40       	sbci	r21, 0x00	; 0
    155a:	9a f0       	brmi	.+38     	; 0x1582 <__mulsf3_pse+0x88>
    155c:	f1 f0       	breq	.+60     	; 0x159a <__mulsf3_pse+0xa0>
    155e:	88 23       	and	r24, r24
    1560:	4a f0       	brmi	.+18     	; 0x1574 <__mulsf3_pse+0x7a>
    1562:	ee 0f       	add	r30, r30
    1564:	ff 1f       	adc	r31, r31
    1566:	bb 1f       	adc	r27, r27
    1568:	66 1f       	adc	r22, r22
    156a:	77 1f       	adc	r23, r23
    156c:	88 1f       	adc	r24, r24
    156e:	91 50       	subi	r25, 0x01	; 1
    1570:	50 40       	sbci	r21, 0x00	; 0
    1572:	a9 f7       	brne	.-22     	; 0x155e <__mulsf3_pse+0x64>
    1574:	9e 3f       	cpi	r25, 0xFE	; 254
    1576:	51 05       	cpc	r21, r1
    1578:	80 f0       	brcs	.+32     	; 0x159a <__mulsf3_pse+0xa0>
    157a:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__fp_inf>
    157e:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__fp_szero>
    1582:	5f 3f       	cpi	r21, 0xFF	; 255
    1584:	e4 f3       	brlt	.-8      	; 0x157e <__mulsf3_pse+0x84>
    1586:	98 3e       	cpi	r25, 0xE8	; 232
    1588:	d4 f3       	brlt	.-12     	; 0x157e <__mulsf3_pse+0x84>
    158a:	86 95       	lsr	r24
    158c:	77 95       	ror	r23
    158e:	67 95       	ror	r22
    1590:	b7 95       	ror	r27
    1592:	f7 95       	ror	r31
    1594:	e7 95       	ror	r30
    1596:	9f 5f       	subi	r25, 0xFF	; 255
    1598:	c1 f7       	brne	.-16     	; 0x158a <__mulsf3_pse+0x90>
    159a:	fe 2b       	or	r31, r30
    159c:	88 0f       	add	r24, r24
    159e:	91 1d       	adc	r25, r1
    15a0:	96 95       	lsr	r25
    15a2:	87 95       	ror	r24
    15a4:	97 f9       	bld	r25, 7
    15a6:	08 95       	ret

000015a8 <__fp_cmp>:
    15a8:	99 0f       	add	r25, r25
    15aa:	00 08       	sbc	r0, r0
    15ac:	55 0f       	add	r21, r21
    15ae:	aa 0b       	sbc	r26, r26
    15b0:	e0 e8       	ldi	r30, 0x80	; 128
    15b2:	fe ef       	ldi	r31, 0xFE	; 254
    15b4:	16 16       	cp	r1, r22
    15b6:	17 06       	cpc	r1, r23
    15b8:	e8 07       	cpc	r30, r24
    15ba:	f9 07       	cpc	r31, r25
    15bc:	c0 f0       	brcs	.+48     	; 0x15ee <__fp_cmp+0x46>
    15be:	12 16       	cp	r1, r18
    15c0:	13 06       	cpc	r1, r19
    15c2:	e4 07       	cpc	r30, r20
    15c4:	f5 07       	cpc	r31, r21
    15c6:	98 f0       	brcs	.+38     	; 0x15ee <__fp_cmp+0x46>
    15c8:	62 1b       	sub	r22, r18
    15ca:	73 0b       	sbc	r23, r19
    15cc:	84 0b       	sbc	r24, r20
    15ce:	95 0b       	sbc	r25, r21
    15d0:	39 f4       	brne	.+14     	; 0x15e0 <__fp_cmp+0x38>
    15d2:	0a 26       	eor	r0, r26
    15d4:	61 f0       	breq	.+24     	; 0x15ee <__fp_cmp+0x46>
    15d6:	23 2b       	or	r18, r19
    15d8:	24 2b       	or	r18, r20
    15da:	25 2b       	or	r18, r21
    15dc:	21 f4       	brne	.+8      	; 0x15e6 <__fp_cmp+0x3e>
    15de:	08 95       	ret
    15e0:	0a 26       	eor	r0, r26
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <__fp_cmp+0x3e>
    15e4:	a1 40       	sbci	r26, 0x01	; 1
    15e6:	a6 95       	lsr	r26
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	81 1d       	adc	r24, r1
    15ec:	81 1d       	adc	r24, r1
    15ee:	08 95       	ret

000015f0 <__divmodhi4>:
    15f0:	97 fb       	bst	r25, 7
    15f2:	07 2e       	mov	r0, r23
    15f4:	16 f4       	brtc	.+4      	; 0x15fa <__divmodhi4+0xa>
    15f6:	00 94       	com	r0
    15f8:	07 d0       	rcall	.+14     	; 0x1608 <__divmodhi4_neg1>
    15fa:	77 fd       	sbrc	r23, 7
    15fc:	09 d0       	rcall	.+18     	; 0x1610 <__divmodhi4_neg2>
    15fe:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodhi4>
    1602:	07 fc       	sbrc	r0, 7
    1604:	05 d0       	rcall	.+10     	; 0x1610 <__divmodhi4_neg2>
    1606:	3e f4       	brtc	.+14     	; 0x1616 <__divmodhi4_exit>

00001608 <__divmodhi4_neg1>:
    1608:	90 95       	com	r25
    160a:	81 95       	neg	r24
    160c:	9f 4f       	sbci	r25, 0xFF	; 255
    160e:	08 95       	ret

00001610 <__divmodhi4_neg2>:
    1610:	70 95       	com	r23
    1612:	61 95       	neg	r22
    1614:	7f 4f       	sbci	r23, 0xFF	; 255

00001616 <__divmodhi4_exit>:
    1616:	08 95       	ret

00001618 <__udivmodsi4>:
    1618:	a1 e2       	ldi	r26, 0x21	; 33
    161a:	1a 2e       	mov	r1, r26
    161c:	aa 1b       	sub	r26, r26
    161e:	bb 1b       	sub	r27, r27
    1620:	fd 01       	movw	r30, r26
    1622:	0d c0       	rjmp	.+26     	; 0x163e <__udivmodsi4_ep>

00001624 <__udivmodsi4_loop>:
    1624:	aa 1f       	adc	r26, r26
    1626:	bb 1f       	adc	r27, r27
    1628:	ee 1f       	adc	r30, r30
    162a:	ff 1f       	adc	r31, r31
    162c:	a2 17       	cp	r26, r18
    162e:	b3 07       	cpc	r27, r19
    1630:	e4 07       	cpc	r30, r20
    1632:	f5 07       	cpc	r31, r21
    1634:	20 f0       	brcs	.+8      	; 0x163e <__udivmodsi4_ep>
    1636:	a2 1b       	sub	r26, r18
    1638:	b3 0b       	sbc	r27, r19
    163a:	e4 0b       	sbc	r30, r20
    163c:	f5 0b       	sbc	r31, r21

0000163e <__udivmodsi4_ep>:
    163e:	66 1f       	adc	r22, r22
    1640:	77 1f       	adc	r23, r23
    1642:	88 1f       	adc	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	1a 94       	dec	r1
    1648:	69 f7       	brne	.-38     	; 0x1624 <__udivmodsi4_loop>
    164a:	60 95       	com	r22
    164c:	70 95       	com	r23
    164e:	80 95       	com	r24
    1650:	90 95       	com	r25
    1652:	9b 01       	movw	r18, r22
    1654:	ac 01       	movw	r20, r24
    1656:	bd 01       	movw	r22, r26
    1658:	cf 01       	movw	r24, r30
    165a:	08 95       	ret

0000165c <__tablejump2__>:
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	05 90       	lpm	r0, Z+
    1662:	f4 91       	lpm	r31, Z
    1664:	e0 2d       	mov	r30, r0
    1666:	09 94       	ijmp

00001668 <__udivmodhi4>:
    1668:	aa 1b       	sub	r26, r26
    166a:	bb 1b       	sub	r27, r27
    166c:	51 e1       	ldi	r21, 0x11	; 17
    166e:	07 c0       	rjmp	.+14     	; 0x167e <__udivmodhi4_ep>

00001670 <__udivmodhi4_loop>:
    1670:	aa 1f       	adc	r26, r26
    1672:	bb 1f       	adc	r27, r27
    1674:	a6 17       	cp	r26, r22
    1676:	b7 07       	cpc	r27, r23
    1678:	10 f0       	brcs	.+4      	; 0x167e <__udivmodhi4_ep>
    167a:	a6 1b       	sub	r26, r22
    167c:	b7 0b       	sbc	r27, r23

0000167e <__udivmodhi4_ep>:
    167e:	88 1f       	adc	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	5a 95       	dec	r21
    1684:	a9 f7       	brne	.-22     	; 0x1670 <__udivmodhi4_loop>
    1686:	80 95       	com	r24
    1688:	90 95       	com	r25
    168a:	bc 01       	movw	r22, r24
    168c:	cd 01       	movw	r24, r26
    168e:	08 95       	ret

00001690 <_exit>:
    1690:	f8 94       	cli

00001692 <__stop_program>:
    1692:	ff cf       	rjmp	.-2      	; 0x1692 <__stop_program>
