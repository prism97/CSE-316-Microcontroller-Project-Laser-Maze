
GameController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000161e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  0000161e  000016b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008000b2  008000b2  00001704  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001734  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000241e  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9e  00000000  00000000  00003d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ac  00000000  00000000  000049dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  00005c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009bd  00000000  00000000  000061c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a68  00000000  00000000  00006b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000085e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       c:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__vector_3>
      10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      14:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      1c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      2c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      4c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      54:	3a 06       	cpc	r3, r26
      56:	41 06       	cpc	r4, r17
      58:	41 06       	cpc	r4, r17
      5a:	41 06       	cpc	r4, r17
      5c:	41 06       	cpc	r4, r17
      5e:	41 06       	cpc	r4, r17
      60:	41 06       	cpc	r4, r17
      62:	41 06       	cpc	r4, r17
      64:	41 06       	cpc	r4, r17
      66:	41 06       	cpc	r4, r17
      68:	41 06       	cpc	r4, r17
      6a:	41 06       	cpc	r4, r17
      6c:	41 06       	cpc	r4, r17
      6e:	41 06       	cpc	r4, r17
      70:	41 06       	cpc	r4, r17
      72:	41 06       	cpc	r4, r17
      74:	41 06       	cpc	r4, r17
      76:	41 06       	cpc	r4, r17
      78:	41 06       	cpc	r4, r17
      7a:	41 06       	cpc	r4, r17
      7c:	41 06       	cpc	r4, r17
      7e:	41 06       	cpc	r4, r17
      80:	41 06       	cpc	r4, r17
      82:	41 06       	cpc	r4, r17
      84:	41 06       	cpc	r4, r17
      86:	41 06       	cpc	r4, r17
      88:	41 06       	cpc	r4, r17
      8a:	41 06       	cpc	r4, r17
      8c:	41 06       	cpc	r4, r17
      8e:	14 06       	cpc	r1, r20
      90:	8c 05       	cpc	r24, r12
      92:	af 05       	cpc	r26, r15
      94:	41 06       	cpc	r4, r17
      96:	24 06       	cpc	r2, r20
      98:	41 06       	cpc	r4, r17
      9a:	41 06       	cpc	r4, r17
      9c:	41 06       	cpc	r4, r17
      9e:	41 06       	cpc	r4, r17
      a0:	41 06       	cpc	r4, r17
      a2:	41 06       	cpc	r4, r17
      a4:	41 06       	cpc	r4, r17
      a6:	41 06       	cpc	r4, r17
      a8:	41 06       	cpc	r4, r17
      aa:	41 06       	cpc	r4, r17
      ac:	41 06       	cpc	r4, r17
      ae:	41 06       	cpc	r4, r17
      b0:	2f 06       	cpc	r2, r31
      b2:	41 06       	cpc	r4, r17
      b4:	da 05       	cpc	r29, r10
      b6:	41 06       	cpc	r4, r17
      b8:	41 06       	cpc	r4, r17
      ba:	f6 05       	cpc	r31, r6
      bc:	41 06       	cpc	r4, r17
      be:	41 06       	cpc	r4, r17
      c0:	41 06       	cpc	r4, r17
      c2:	41 06       	cpc	r4, r17
      c4:	41 06       	cpc	r4, r17
      c6:	41 06       	cpc	r4, r17
      c8:	41 06       	cpc	r4, r17
      ca:	41 06       	cpc	r4, r17
      cc:	41 06       	cpc	r4, r17
      ce:	04 06       	cpc	r0, r20
      d0:	8c 05       	cpc	r24, r12
      d2:	97 05       	cpc	r25, r7
      d4:	41 06       	cpc	r4, r17
      d6:	24 06       	cpc	r2, r20
      d8:	41 06       	cpc	r4, r17
      da:	41 06       	cpc	r4, r17
      dc:	41 06       	cpc	r4, r17
      de:	41 06       	cpc	r4, r17
      e0:	41 06       	cpc	r4, r17
      e2:	41 06       	cpc	r4, r17
      e4:	41 06       	cpc	r4, r17
      e6:	41 06       	cpc	r4, r17
      e8:	41 06       	cpc	r4, r17
      ea:	41 06       	cpc	r4, r17
      ec:	41 06       	cpc	r4, r17
      ee:	41 06       	cpc	r4, r17
      f0:	2f 06       	cpc	r2, r31
      f2:	41 06       	cpc	r4, r17
      f4:	cc 05       	cpc	r28, r12
      f6:	41 06       	cpc	r4, r17
      f8:	41 06       	cpc	r4, r17
      fa:	e8 05       	cpc	r30, r8
      fc:	3a 06       	cpc	r3, r26
      fe:	41 06       	cpc	r4, r17
     100:	41 06       	cpc	r4, r17
     102:	41 06       	cpc	r4, r17
     104:	41 06       	cpc	r4, r17
     106:	41 06       	cpc	r4, r17
     108:	41 06       	cpc	r4, r17
     10a:	41 06       	cpc	r4, r17
     10c:	41 06       	cpc	r4, r17
     10e:	41 06       	cpc	r4, r17
     110:	41 06       	cpc	r4, r17
     112:	41 06       	cpc	r4, r17
     114:	41 06       	cpc	r4, r17
     116:	41 06       	cpc	r4, r17
     118:	41 06       	cpc	r4, r17
     11a:	41 06       	cpc	r4, r17
     11c:	41 06       	cpc	r4, r17
     11e:	41 06       	cpc	r4, r17
     120:	41 06       	cpc	r4, r17
     122:	41 06       	cpc	r4, r17
     124:	41 06       	cpc	r4, r17
     126:	41 06       	cpc	r4, r17
     128:	41 06       	cpc	r4, r17
     12a:	41 06       	cpc	r4, r17
     12c:	41 06       	cpc	r4, r17
     12e:	41 06       	cpc	r4, r17
     130:	41 06       	cpc	r4, r17
     132:	41 06       	cpc	r4, r17
     134:	41 06       	cpc	r4, r17
     136:	4b 06       	cpc	r4, r27
     138:	8c 05       	cpc	r24, r12
     13a:	ae 05       	cpc	r26, r14
     13c:	41 06       	cpc	r4, r17
     13e:	24 06       	cpc	r2, r20
     140:	41 06       	cpc	r4, r17
     142:	41 06       	cpc	r4, r17
     144:	41 06       	cpc	r4, r17
     146:	41 06       	cpc	r4, r17
     148:	41 06       	cpc	r4, r17
     14a:	41 06       	cpc	r4, r17
     14c:	41 06       	cpc	r4, r17
     14e:	41 06       	cpc	r4, r17
     150:	41 06       	cpc	r4, r17
     152:	41 06       	cpc	r4, r17
     154:	41 06       	cpc	r4, r17
     156:	41 06       	cpc	r4, r17
     158:	2f 06       	cpc	r2, r31
     15a:	41 06       	cpc	r4, r17
     15c:	d9 05       	cpc	r29, r9
     15e:	41 06       	cpc	r4, r17
     160:	41 06       	cpc	r4, r17
     162:	f5 05       	cpc	r31, r5
     164:	41 06       	cpc	r4, r17
     166:	41 06       	cpc	r4, r17
     168:	41 06       	cpc	r4, r17
     16a:	41 06       	cpc	r4, r17
     16c:	41 06       	cpc	r4, r17
     16e:	41 06       	cpc	r4, r17
     170:	41 06       	cpc	r4, r17
     172:	41 06       	cpc	r4, r17
     174:	41 06       	cpc	r4, r17
     176:	03 06       	cpc	r0, r19
     178:	8c 05       	cpc	r24, r12
     17a:	96 05       	cpc	r25, r6
     17c:	41 06       	cpc	r4, r17
     17e:	24 06       	cpc	r2, r20
     180:	41 06       	cpc	r4, r17
     182:	41 06       	cpc	r4, r17
     184:	41 06       	cpc	r4, r17
     186:	41 06       	cpc	r4, r17
     188:	41 06       	cpc	r4, r17
     18a:	41 06       	cpc	r4, r17
     18c:	41 06       	cpc	r4, r17
     18e:	41 06       	cpc	r4, r17
     190:	41 06       	cpc	r4, r17
     192:	41 06       	cpc	r4, r17
     194:	41 06       	cpc	r4, r17
     196:	41 06       	cpc	r4, r17
     198:	2f 06       	cpc	r2, r31
     19a:	41 06       	cpc	r4, r17
     19c:	cb 05       	cpc	r28, r11
     19e:	41 06       	cpc	r4, r17
     1a0:	41 06       	cpc	r4, r17
     1a2:	e7 05       	cpc	r30, r7

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf e5       	ldi	r28, 0x5F	; 95
     1aa:	d8 e0       	ldi	r29, 0x08	; 8
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	10 e0       	ldi	r17, 0x00	; 0
     1b2:	a0 e6       	ldi	r26, 0x60	; 96
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	ee e1       	ldi	r30, 0x1E	; 30
     1b8:	f6 e1       	ldi	r31, 0x16	; 22
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	a2 3b       	cpi	r26, 0xB2	; 178
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	a2 eb       	ldi	r26, 0xB2	; 178
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	a7 3d       	cpi	r26, 0xD7	; 215
     1d2:	b2 07       	cpc	r27, r18
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	0e 94 f6 06 	call	0xdec	; 0xdec <main>
     1da:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <_exit>

000001de <__bad_interrupt>:
     1de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e2 <DELAY_us>:
         if 5000 is passed as the argument then it generates a delay of 5ms.		  

 ***************************************************************************************************/
void DELAY_us(uint16_t us_count) 
{
    while (us_count != 0) 
     1e2:	00 97       	sbiw	r24, 0x00	; 0
     1e4:	31 f0       	breq	.+12     	; 0x1f2 <DELAY_us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e6:	22 e0       	ldi	r18, 0x02	; 2
     1e8:	2a 95       	dec	r18
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <DELAY_us+0x6>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <DELAY_us+0xc>
    {
        _delay_us(1);
		us_count--;
     1ee:	01 97       	sbiw	r24, 0x01	; 1
         if 5000 is passed as the argument then it generates a delay of 5ms.		  

 ***************************************************************************************************/
void DELAY_us(uint16_t us_count) 
{
    while (us_count != 0) 
     1f0:	d1 f7       	brne	.-12     	; 0x1e6 <DELAY_us+0x4>
     1f2:	08 95       	ret

000001f4 <DELAY_ms>:
     It generates a delay of 1ms for each count,
     if 1000 is passed as the argument then it generates delay of 1000ms(1sec)
 ***************************************************************************************************/
void DELAY_ms(uint16_t ms_count) 
{
    while (ms_count != 0) 
     1f4:	00 97       	sbiw	r24, 0x00	; 0
     1f6:	41 f0       	breq	.+16     	; 0x208 <DELAY_ms+0x14>
     1f8:	ef ec       	ldi	r30, 0xCF	; 207
     1fa:	f7 e0       	ldi	r31, 0x07	; 7
     1fc:	31 97       	sbiw	r30, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <DELAY_ms+0x8>
     200:	00 c0       	rjmp	.+0      	; 0x202 <DELAY_ms+0xe>
     202:	00 00       	nop
    {
        _delay_us(1000); //DELAY_us is called to generate 1ms delay
        ms_count--;
     204:	01 97       	sbiw	r24, 0x01	; 1
     It generates a delay of 1ms for each count,
     if 1000 is passed as the argument then it generates delay of 1000ms(1sec)
 ***************************************************************************************************/
void DELAY_ms(uint16_t ms_count) 
{
    while (ms_count != 0) 
     206:	c1 f7       	brne	.-16     	; 0x1f8 <DELAY_ms+0x4>
     208:	08 95       	ret

0000020a <GPIO_PinDirection>:

    uint8_t v_portNumber_u8;


    v_portNumber_u8 =  (enm_pinNumber>>3);  // Divide the pin number by 8 go get the PORT number
    enm_pinNumber  =   enm_pinNumber & 0x07;  // lower 3-bits contains the bit number of a byte 
     20a:	98 2f       	mov	r25, r24
     20c:	97 70       	andi	r25, 0x07	; 7

    /* Go to particular port after decoding from the pin number and 
        set the direction as specified*/
    switch(v_portNumber_u8)
     20e:	86 95       	lsr	r24
     210:	86 95       	lsr	r24
     212:	86 95       	lsr	r24
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	21 f1       	breq	.+72     	; 0x260 <GPIO_PinDirection+0x56>
     218:	30 f0       	brcs	.+12     	; 0x226 <GPIO_PinDirection+0x1c>
     21a:	82 30       	cpi	r24, 0x02	; 2
     21c:	f1 f1       	breq	.+124    	; 0x29a <GPIO_PinDirection+0x90>
     21e:	83 30       	cpi	r24, 0x03	; 3
     220:	09 f4       	brne	.+2      	; 0x224 <GPIO_PinDirection+0x1a>
     222:	58 c0       	rjmp	.+176    	; 0x2d4 <GPIO_PinDirection+0xca>
     224:	08 95       	ret
    {
#ifdef DDRA        
    case 0:
        util_UpdateBit(DDRA,enm_pinNumber,v_pinDirn_u8);
     226:	66 23       	and	r22, r22
     228:	69 f0       	breq	.+26     	; 0x244 <GPIO_PinDirection+0x3a>
     22a:	4a b3       	in	r20, 0x1a	; 26
     22c:	21 e0       	ldi	r18, 0x01	; 1
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	b9 01       	movw	r22, r18
     232:	02 c0       	rjmp	.+4      	; 0x238 <GPIO_PinDirection+0x2e>
     234:	66 0f       	add	r22, r22
     236:	77 1f       	adc	r23, r23
     238:	9a 95       	dec	r25
     23a:	e2 f7       	brpl	.-8      	; 0x234 <GPIO_PinDirection+0x2a>
     23c:	cb 01       	movw	r24, r22
     23e:	84 2b       	or	r24, r20
     240:	8a bb       	out	0x1a, r24	; 26
     242:	08 95       	ret
     244:	4a b3       	in	r20, 0x1a	; 26
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	b9 01       	movw	r22, r18
     24c:	02 c0       	rjmp	.+4      	; 0x252 <GPIO_PinDirection+0x48>
     24e:	66 0f       	add	r22, r22
     250:	77 1f       	adc	r23, r23
     252:	9a 95       	dec	r25
     254:	e2 f7       	brpl	.-8      	; 0x24e <GPIO_PinDirection+0x44>
     256:	cb 01       	movw	r24, r22
     258:	80 95       	com	r24
     25a:	84 23       	and	r24, r20
     25c:	8a bb       	out	0x1a, r24	; 26
     25e:	08 95       	ret
#endif        


#ifdef DDRB
    case 1:
        util_UpdateBit(DDRB,enm_pinNumber,v_pinDirn_u8);
     260:	66 23       	and	r22, r22
     262:	69 f0       	breq	.+26     	; 0x27e <GPIO_PinDirection+0x74>
     264:	47 b3       	in	r20, 0x17	; 23
     266:	21 e0       	ldi	r18, 0x01	; 1
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	b9 01       	movw	r22, r18
     26c:	02 c0       	rjmp	.+4      	; 0x272 <GPIO_PinDirection+0x68>
     26e:	66 0f       	add	r22, r22
     270:	77 1f       	adc	r23, r23
     272:	9a 95       	dec	r25
     274:	e2 f7       	brpl	.-8      	; 0x26e <GPIO_PinDirection+0x64>
     276:	cb 01       	movw	r24, r22
     278:	84 2b       	or	r24, r20
     27a:	87 bb       	out	0x17, r24	; 23
     27c:	08 95       	ret
     27e:	47 b3       	in	r20, 0x17	; 23
     280:	21 e0       	ldi	r18, 0x01	; 1
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	b9 01       	movw	r22, r18
     286:	02 c0       	rjmp	.+4      	; 0x28c <GPIO_PinDirection+0x82>
     288:	66 0f       	add	r22, r22
     28a:	77 1f       	adc	r23, r23
     28c:	9a 95       	dec	r25
     28e:	e2 f7       	brpl	.-8      	; 0x288 <GPIO_PinDirection+0x7e>
     290:	cb 01       	movw	r24, r22
     292:	80 95       	com	r24
     294:	84 23       	and	r24, r20
     296:	87 bb       	out	0x17, r24	; 23
     298:	08 95       	ret
#endif 

        
#ifdef DDRC
    case 2:
        util_UpdateBit(DDRC,enm_pinNumber,v_pinDirn_u8);
     29a:	66 23       	and	r22, r22
     29c:	69 f0       	breq	.+26     	; 0x2b8 <GPIO_PinDirection+0xae>
     29e:	44 b3       	in	r20, 0x14	; 20
     2a0:	21 e0       	ldi	r18, 0x01	; 1
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	b9 01       	movw	r22, r18
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <GPIO_PinDirection+0xa2>
     2a8:	66 0f       	add	r22, r22
     2aa:	77 1f       	adc	r23, r23
     2ac:	9a 95       	dec	r25
     2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <GPIO_PinDirection+0x9e>
     2b0:	cb 01       	movw	r24, r22
     2b2:	84 2b       	or	r24, r20
     2b4:	84 bb       	out	0x14, r24	; 20
     2b6:	08 95       	ret
     2b8:	44 b3       	in	r20, 0x14	; 20
     2ba:	21 e0       	ldi	r18, 0x01	; 1
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	b9 01       	movw	r22, r18
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <GPIO_PinDirection+0xbc>
     2c2:	66 0f       	add	r22, r22
     2c4:	77 1f       	adc	r23, r23
     2c6:	9a 95       	dec	r25
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <GPIO_PinDirection+0xb8>
     2ca:	cb 01       	movw	r24, r22
     2cc:	80 95       	com	r24
     2ce:	84 23       	and	r24, r20
     2d0:	84 bb       	out	0x14, r24	; 20
     2d2:	08 95       	ret
#endif 

        
#ifdef DDRD        
    case 3:
        util_UpdateBit(DDRD,enm_pinNumber,v_pinDirn_u8);
     2d4:	66 23       	and	r22, r22
     2d6:	69 f0       	breq	.+26     	; 0x2f2 <GPIO_PinDirection+0xe8>
     2d8:	41 b3       	in	r20, 0x11	; 17
     2da:	21 e0       	ldi	r18, 0x01	; 1
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	b9 01       	movw	r22, r18
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <GPIO_PinDirection+0xdc>
     2e2:	66 0f       	add	r22, r22
     2e4:	77 1f       	adc	r23, r23
     2e6:	9a 95       	dec	r25
     2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <GPIO_PinDirection+0xd8>
     2ea:	cb 01       	movw	r24, r22
     2ec:	84 2b       	or	r24, r20
     2ee:	81 bb       	out	0x11, r24	; 17
     2f0:	08 95       	ret
     2f2:	41 b3       	in	r20, 0x11	; 17
     2f4:	21 e0       	ldi	r18, 0x01	; 1
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	b9 01       	movw	r22, r18
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <GPIO_PinDirection+0xf6>
     2fc:	66 0f       	add	r22, r22
     2fe:	77 1f       	adc	r23, r23
     300:	9a 95       	dec	r25
     302:	e2 f7       	brpl	.-8      	; 0x2fc <GPIO_PinDirection+0xf2>
     304:	cb 01       	movw	r24, r22
     306:	80 95       	com	r24
     308:	84 23       	and	r24, r20
     30a:	81 bb       	out	0x11, r24	; 17
     30c:	08 95       	ret

0000030e <GPIO_PinWrite>:

    uint8_t v_portNumber_u8;


    v_portNumber_u8 =  (enm_pinNumber>>3);  // Divide the pin number by 8 go get the PORT number
    enm_pinNumber  =   enm_pinNumber & 0x07;  // lower 3-bits contains the bit number of a byte 
     30e:	98 2f       	mov	r25, r24
     310:	97 70       	andi	r25, 0x07	; 7

    /* Go to particular port after decoding from the pin number and 
        update the value of the specified pin*/
    switch(v_portNumber_u8)
     312:	86 95       	lsr	r24
     314:	86 95       	lsr	r24
     316:	86 95       	lsr	r24
     318:	81 30       	cpi	r24, 0x01	; 1
     31a:	21 f1       	breq	.+72     	; 0x364 <GPIO_PinWrite+0x56>
     31c:	30 f0       	brcs	.+12     	; 0x32a <GPIO_PinWrite+0x1c>
     31e:	82 30       	cpi	r24, 0x02	; 2
     320:	f1 f1       	breq	.+124    	; 0x39e <GPIO_PinWrite+0x90>
     322:	83 30       	cpi	r24, 0x03	; 3
     324:	09 f4       	brne	.+2      	; 0x328 <GPIO_PinWrite+0x1a>
     326:	58 c0       	rjmp	.+176    	; 0x3d8 <GPIO_PinWrite+0xca>
     328:	08 95       	ret
    {
#ifdef PORTA        
    case 0:
        util_UpdateBit(PORTA,enm_pinNumber,v_pinValue_u8);
     32a:	66 23       	and	r22, r22
     32c:	69 f0       	breq	.+26     	; 0x348 <GPIO_PinWrite+0x3a>
     32e:	4b b3       	in	r20, 0x1b	; 27
     330:	21 e0       	ldi	r18, 0x01	; 1
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	b9 01       	movw	r22, r18
     336:	02 c0       	rjmp	.+4      	; 0x33c <GPIO_PinWrite+0x2e>
     338:	66 0f       	add	r22, r22
     33a:	77 1f       	adc	r23, r23
     33c:	9a 95       	dec	r25
     33e:	e2 f7       	brpl	.-8      	; 0x338 <GPIO_PinWrite+0x2a>
     340:	cb 01       	movw	r24, r22
     342:	84 2b       	or	r24, r20
     344:	8b bb       	out	0x1b, r24	; 27
     346:	08 95       	ret
     348:	4b b3       	in	r20, 0x1b	; 27
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	b9 01       	movw	r22, r18
     350:	02 c0       	rjmp	.+4      	; 0x356 <GPIO_PinWrite+0x48>
     352:	66 0f       	add	r22, r22
     354:	77 1f       	adc	r23, r23
     356:	9a 95       	dec	r25
     358:	e2 f7       	brpl	.-8      	; 0x352 <GPIO_PinWrite+0x44>
     35a:	cb 01       	movw	r24, r22
     35c:	80 95       	com	r24
     35e:	84 23       	and	r24, r20
     360:	8b bb       	out	0x1b, r24	; 27
     362:	08 95       	ret
#endif        

        
#ifdef PORTB
    case 1:
        util_UpdateBit(PORTB,enm_pinNumber,v_pinValue_u8);
     364:	66 23       	and	r22, r22
     366:	69 f0       	breq	.+26     	; 0x382 <GPIO_PinWrite+0x74>
     368:	48 b3       	in	r20, 0x18	; 24
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	b9 01       	movw	r22, r18
     370:	02 c0       	rjmp	.+4      	; 0x376 <GPIO_PinWrite+0x68>
     372:	66 0f       	add	r22, r22
     374:	77 1f       	adc	r23, r23
     376:	9a 95       	dec	r25
     378:	e2 f7       	brpl	.-8      	; 0x372 <GPIO_PinWrite+0x64>
     37a:	cb 01       	movw	r24, r22
     37c:	84 2b       	or	r24, r20
     37e:	88 bb       	out	0x18, r24	; 24
     380:	08 95       	ret
     382:	48 b3       	in	r20, 0x18	; 24
     384:	21 e0       	ldi	r18, 0x01	; 1
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	b9 01       	movw	r22, r18
     38a:	02 c0       	rjmp	.+4      	; 0x390 <GPIO_PinWrite+0x82>
     38c:	66 0f       	add	r22, r22
     38e:	77 1f       	adc	r23, r23
     390:	9a 95       	dec	r25
     392:	e2 f7       	brpl	.-8      	; 0x38c <GPIO_PinWrite+0x7e>
     394:	cb 01       	movw	r24, r22
     396:	80 95       	com	r24
     398:	84 23       	and	r24, r20
     39a:	88 bb       	out	0x18, r24	; 24
     39c:	08 95       	ret
#endif        

        
#ifdef PORTC        
    case 2:
        util_UpdateBit(PORTC,enm_pinNumber,v_pinValue_u8);
     39e:	66 23       	and	r22, r22
     3a0:	69 f0       	breq	.+26     	; 0x3bc <GPIO_PinWrite+0xae>
     3a2:	45 b3       	in	r20, 0x15	; 21
     3a4:	21 e0       	ldi	r18, 0x01	; 1
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	b9 01       	movw	r22, r18
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <GPIO_PinWrite+0xa2>
     3ac:	66 0f       	add	r22, r22
     3ae:	77 1f       	adc	r23, r23
     3b0:	9a 95       	dec	r25
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <GPIO_PinWrite+0x9e>
     3b4:	cb 01       	movw	r24, r22
     3b6:	84 2b       	or	r24, r20
     3b8:	85 bb       	out	0x15, r24	; 21
     3ba:	08 95       	ret
     3bc:	45 b3       	in	r20, 0x15	; 21
     3be:	21 e0       	ldi	r18, 0x01	; 1
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	b9 01       	movw	r22, r18
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <GPIO_PinWrite+0xbc>
     3c6:	66 0f       	add	r22, r22
     3c8:	77 1f       	adc	r23, r23
     3ca:	9a 95       	dec	r25
     3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <GPIO_PinWrite+0xb8>
     3ce:	cb 01       	movw	r24, r22
     3d0:	80 95       	com	r24
     3d2:	84 23       	and	r24, r20
     3d4:	85 bb       	out	0x15, r24	; 21
     3d6:	08 95       	ret
#endif        

        
#ifdef PORTD        
    case 3:
        util_UpdateBit(PORTD,enm_pinNumber,v_pinValue_u8);
     3d8:	66 23       	and	r22, r22
     3da:	69 f0       	breq	.+26     	; 0x3f6 <GPIO_PinWrite+0xe8>
     3dc:	42 b3       	in	r20, 0x12	; 18
     3de:	21 e0       	ldi	r18, 0x01	; 1
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	b9 01       	movw	r22, r18
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <GPIO_PinWrite+0xdc>
     3e6:	66 0f       	add	r22, r22
     3e8:	77 1f       	adc	r23, r23
     3ea:	9a 95       	dec	r25
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <GPIO_PinWrite+0xd8>
     3ee:	cb 01       	movw	r24, r22
     3f0:	84 2b       	or	r24, r20
     3f2:	82 bb       	out	0x12, r24	; 18
     3f4:	08 95       	ret
     3f6:	42 b3       	in	r20, 0x12	; 18
     3f8:	21 e0       	ldi	r18, 0x01	; 1
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	b9 01       	movw	r22, r18
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     400:	66 0f       	add	r22, r22
     402:	77 1f       	adc	r23, r23
     404:	9a 95       	dec	r25
     406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
     408:	cb 01       	movw	r24, r22
     40a:	80 95       	com	r24
     40c:	84 23       	and	r24, r20
     40e:	82 bb       	out	0x12, r24	; 18
     410:	08 95       	ret

00000412 <GPIO_PinRead>:
{
    uint8_t v_portNumber_u8;
    uint8_t returnStatus = 0;

    v_portNumber_u8 =  (enm_pinNumber>>3); // Divide the pin number by 8 go get the PORT number
    enm_pinNumber  =     enm_pinNumber & 0x07; // lower 3-bits contains the bit number of a byte 
     412:	28 2f       	mov	r18, r24
     414:	27 70       	andi	r18, 0x07	; 7

    /* Go to particular port after decoding from the pin number and read the pins status */
    switch(v_portNumber_u8)     
     416:	86 95       	lsr	r24
     418:	86 95       	lsr	r24
     41a:	86 95       	lsr	r24
     41c:	81 30       	cpi	r24, 0x01	; 1
     41e:	79 f0       	breq	.+30     	; 0x43e <GPIO_PinRead+0x2c>
     420:	28 f0       	brcs	.+10     	; 0x42c <GPIO_PinRead+0x1a>
     422:	82 30       	cpi	r24, 0x02	; 2
     424:	a9 f0       	breq	.+42     	; 0x450 <GPIO_PinRead+0x3e>
     426:	83 30       	cpi	r24, 0x03	; 3
     428:	e1 f0       	breq	.+56     	; 0x462 <GPIO_PinRead+0x50>
     42a:	24 c0       	rjmp	.+72     	; 0x474 <GPIO_PinRead+0x62>
    { 
#ifdef PINA    
    case 0: 
        returnStatus = util_IsBitSet(PINA,enm_pinNumber);
     42c:	89 b3       	in	r24, 0x19	; 25
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	02 c0       	rjmp	.+4      	; 0x436 <GPIO_PinRead+0x24>
     432:	95 95       	asr	r25
     434:	87 95       	ror	r24
     436:	2a 95       	dec	r18
     438:	e2 f7       	brpl	.-8      	; 0x432 <GPIO_PinRead+0x20>
     43a:	81 70       	andi	r24, 0x01	; 1
        break;
     43c:	08 95       	ret
#endif        

#ifdef PINB
    case 1:
        returnStatus = util_IsBitSet(PINB,enm_pinNumber);
     43e:	86 b3       	in	r24, 0x16	; 22
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	02 c0       	rjmp	.+4      	; 0x448 <GPIO_PinRead+0x36>
     444:	95 95       	asr	r25
     446:	87 95       	ror	r24
     448:	2a 95       	dec	r18
     44a:	e2 f7       	brpl	.-8      	; 0x444 <GPIO_PinRead+0x32>
     44c:	81 70       	andi	r24, 0x01	; 1
        break;
     44e:	08 95       	ret
#endif          

#ifdef PINC
    case 2:
        returnStatus = util_IsBitSet(PINC,enm_pinNumber);
     450:	83 b3       	in	r24, 0x13	; 19
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 c0       	rjmp	.+4      	; 0x45a <GPIO_PinRead+0x48>
     456:	95 95       	asr	r25
     458:	87 95       	ror	r24
     45a:	2a 95       	dec	r18
     45c:	e2 f7       	brpl	.-8      	; 0x456 <GPIO_PinRead+0x44>
     45e:	81 70       	andi	r24, 0x01	; 1
        break;
     460:	08 95       	ret
#endif        
        
        
#ifdef PIND
    case 3:
        returnStatus = util_IsBitSet(PIND,enm_pinNumber);
     462:	80 b3       	in	r24, 0x10	; 16
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	02 c0       	rjmp	.+4      	; 0x46c <GPIO_PinRead+0x5a>
     468:	95 95       	asr	r25
     46a:	87 95       	ror	r24
     46c:	2a 95       	dec	r18
     46e:	e2 f7       	brpl	.-8      	; 0x468 <GPIO_PinRead+0x56>
     470:	81 70       	andi	r24, 0x01	; 1
        break;
     472:	08 95       	ret
                Before reading the pins status, the pin should be configured as INPUT 
 ***************************************************************************************************/
uint8_t GPIO_PinRead(gpioPins_et enm_pinNumber)
{
    uint8_t v_portNumber_u8;
    uint8_t returnStatus = 0;
     474:	80 e0       	ldi	r24, 0x00	; 0
        returnStatus = util_IsBitSet(PING,enm_pinNumber);
        break;
#endif             
    }                         
    return returnStatus;
}
     476:	08 95       	ret

00000478 <I2C_Init>:

 * description :This function is used to initialize the I2C module
------------------------------------------------------------------------------------*/
void I2C_Init()
{
    TWSR=0x00; //set presca1er bits to zero
     478:	11 b8       	out	0x01, r1	; 1
    TWBR=0x46; //SCL frequency is 50K for 16Mhz
     47a:	86 e4       	ldi	r24, 0x46	; 70
     47c:	80 b9       	out	0x00, r24	; 0
    TWCR=0x04; //enab1e TWI module
     47e:	84 e0       	ldi	r24, 0x04	; 4
     480:	86 bf       	out	0x36, r24	; 54
     482:	08 95       	ret

00000484 <I2C_Start>:
                      ____|         |____________

 ***************************************************************************************************/
void I2C_Start()
{
    TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
     484:	84 ea       	ldi	r24, 0xA4	; 164
     486:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1<<TWINT)));
     488:	06 b6       	in	r0, 0x36	; 54
     48a:	07 fe       	sbrs	r0, 7
     48c:	fd cf       	rjmp	.-6      	; 0x488 <I2C_Start+0x4>
}
     48e:	08 95       	ret

00000490 <I2C_Stop>:

 ***************************************************************************************************/

void I2C_Stop(void)
{
    TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
     490:	84 e9       	ldi	r24, 0x94	; 148
     492:	86 bf       	out	0x36, r24	; 54
    DELAY_us(100) ; //wait for a short time
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     49c:	08 95       	ret

0000049e <I2C_Write>:


 ***************************************************************************************************/
void I2C_Write(uint8_t v_i2cData_u8)
{
    TWDR = v_i2cData_u8 ;
     49e:	83 b9       	out	0x03, r24	; 3
    TWCR = ((1<< TWINT) | (1<<TWEN));
     4a0:	84 e8       	ldi	r24, 0x84	; 132
     4a2:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1 <<TWINT)));
     4a4:	06 b6       	in	r0, 0x36	; 54
     4a6:	07 fe       	sbrs	r0, 7
     4a8:	fd cf       	rjmp	.-6      	; 0x4a4 <I2C_Write+0x6>
}
     4aa:	08 95       	ret

000004ac <I2C_Read>:


***************************************************************************************************/
uint8_t I2C_Read(uint8_t v_ackOption_u8)
{
    TWCR = ((1<< TWINT) | (1<<TWEN) | (v_ackOption_u8<<TWEA));
     4ac:	20 e4       	ldi	r18, 0x40	; 64
     4ae:	82 9f       	mul	r24, r18
     4b0:	c0 01       	movw	r24, r0
     4b2:	11 24       	eor	r1, r1
     4b4:	84 68       	ori	r24, 0x84	; 132
     4b6:	86 bf       	out	0x36, r24	; 54
    while ( !(TWCR & (1 <<TWINT)));
     4b8:	06 b6       	in	r0, 0x36	; 54
     4ba:	07 fe       	sbrs	r0, 7
     4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <I2C_Read+0xc>
    return TWDR;
     4be:	83 b1       	in	r24, 0x03	; 3
}
     4c0:	08 95       	ret

000004c2 <lcd_SendHigherNibble>:
        }

        DELAY_ms(C_ScrollDelayTime_U8);
    }
    LCD_CmdWrite(CMD_DISPLAY_ON_CURSOR_ON);              // Finally enable the Cursor
}
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	c8 2f       	mov	r28, r24
     4ca:	84 fb       	bst	r24, 4
     4cc:	66 27       	eor	r22, r22
     4ce:	60 f9       	bld	r22, 0
     4d0:	0a eb       	ldi	r16, 0xBA	; 186
     4d2:	10 e0       	ldi	r17, 0x00	; 0
     4d4:	f8 01       	movw	r30, r16
     4d6:	82 85       	ldd	r24, Z+10	; 0x0a
     4d8:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     4dc:	c5 fb       	bst	r28, 5
     4de:	66 27       	eor	r22, r22
     4e0:	60 f9       	bld	r22, 0
     4e2:	f8 01       	movw	r30, r16
     4e4:	83 85       	ldd	r24, Z+11	; 0x0b
     4e6:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     4ea:	c6 fb       	bst	r28, 6
     4ec:	66 27       	eor	r22, r22
     4ee:	60 f9       	bld	r22, 0
     4f0:	f8 01       	movw	r30, r16
     4f2:	84 85       	ldd	r24, Z+12	; 0x0c
     4f4:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     4f8:	6c 2f       	mov	r22, r28
     4fa:	66 1f       	adc	r22, r22
     4fc:	66 27       	eor	r22, r22
     4fe:	66 1f       	adc	r22, r22
     500:	f8 01       	movw	r30, r16
     502:	85 85       	ldd	r24, Z+13	; 0x0d
     504:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <lcd_SendCmdSignals>:
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	ca eb       	ldi	r28, 0xBA	; 186
     516:	d0 e0       	ldi	r29, 0x00	; 0
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	8b 81       	ldd	r24, Y+3	; 0x03
     51c:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	8c 81       	ldd	r24, Y+4	; 0x04
     524:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	8d 81       	ldd	r24, Y+5	; 0x05
     52c:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     530:	8a e0       	ldi	r24, 0x0A	; 10
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	8d 81       	ldd	r24, Y+5	; 0x05
     53c:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <lcd_SendLowerNibble>:
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	c8 2f       	mov	r28, r24
     54e:	68 2f       	mov	r22, r24
     550:	61 70       	andi	r22, 0x01	; 1
     552:	0a eb       	ldi	r16, 0xBA	; 186
     554:	10 e0       	ldi	r17, 0x00	; 0
     556:	f8 01       	movw	r30, r16
     558:	86 81       	ldd	r24, Z+6	; 0x06
     55a:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     55e:	c1 fb       	bst	r28, 1
     560:	66 27       	eor	r22, r22
     562:	60 f9       	bld	r22, 0
     564:	f8 01       	movw	r30, r16
     566:	87 81       	ldd	r24, Z+7	; 0x07
     568:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     56c:	c2 fb       	bst	r28, 2
     56e:	66 27       	eor	r22, r22
     570:	60 f9       	bld	r22, 0
     572:	f8 01       	movw	r30, r16
     574:	80 85       	ldd	r24, Z+8	; 0x08
     576:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     57a:	c3 fb       	bst	r28, 3
     57c:	66 27       	eor	r22, r22
     57e:	60 f9       	bld	r22, 0
     580:	f8 01       	movw	r30, r16
     582:	81 85       	ldd	r24, Z+9	; 0x09
     584:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	08 95       	ret

00000590 <lcd_SendDataSignals>:
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	ca eb       	ldi	r28, 0xBA	; 186
     596:	d0 e0       	ldi	r29, 0x00	; 0
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	8b 81       	ldd	r24, Y+3	; 0x03
     59c:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	8c 81       	ldd	r24, Y+4	; 0x04
     5a4:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	8d 81       	ldd	r24, Y+5	; 0x05
     5ac:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     5b0:	8a e0       	ldi	r24, 0x0A	; 10
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	8d 81       	ldd	r24, Y+5	; 0x05
     5bc:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <lcd_BusyCheck>:
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <LCDConfig+0x4>
     5d0:	8f 3f       	cpi	r24, 0xFF	; 255
     5d2:	e9 f1       	breq	.+122    	; 0x64e <lcd_BusyCheck+0x88>
     5d4:	ca eb       	ldi	r28, 0xBA	; 186
     5d6:	d0 e0       	ldi	r29, 0x00	; 0
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	8d 85       	ldd	r24, Y+13	; 0x0d
     5dc:	0e 94 05 01 	call	0x20a	; 0x20a <GPIO_PinDirection>
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	8b 81       	ldd	r24, Y+3	; 0x03
     5e4:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     5e8:	61 e0       	ldi	r22, 0x01	; 1
     5ea:	8c 81       	ldd	r24, Y+4	; 0x04
     5ec:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	8d 81       	ldd	r24, Y+5	; 0x05
     5f4:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     5f8:	8a e0       	ldi	r24, 0x0A	; 10
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	8d 81       	ldd	r24, Y+5	; 0x05
     604:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     608:	8a e0       	ldi	r24, 0x0A	; 10
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     610:	8d 85       	ldd	r24, Y+13	; 0x0d
     612:	0e 94 09 02 	call	0x412	; 0x412 <GPIO_PinRead>
     616:	18 2f       	mov	r17, r24
     618:	8a 81       	ldd	r24, Y+2	; 0x02
     61a:	84 30       	cpi	r24, 0x04	; 4
     61c:	81 f4       	brne	.+32     	; 0x63e <lcd_BusyCheck+0x78>
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	8d 81       	ldd	r24, Y+5	; 0x05
     622:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     626:	8a e0       	ldi	r24, 0x0A	; 10
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	8d 81       	ldd	r24, Y+5	; 0x05
     632:	0e 94 87 01 	call	0x30e	; 0x30e <GPIO_PinWrite>
     636:	8a e0       	ldi	r24, 0x0A	; 10
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     63e:	11 11       	cpse	r17, r1
     640:	d7 cf       	rjmp	.-82     	; 0x5f0 <lcd_BusyCheck+0x2a>
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <LCDConfig+0xd>
     648:	0e 94 05 01 	call	0x20a	; 0x20a <GPIO_PinDirection>
     64c:	04 c0       	rjmp	.+8      	; 0x656 <lcd_BusyCheck+0x90>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DELAY_ms>
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	08 95       	ret

0000065e <LCD_SetUp>:
     65e:	8f 92       	push	r8
     660:	9f 92       	push	r9
     662:	af 92       	push	r10
     664:	bf 92       	push	r11
     666:	cf 92       	push	r12
     668:	df 92       	push	r13
     66a:	ef 92       	push	r14
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
     67a:	98 2e       	mov	r9, r24
     67c:	b6 2e       	mov	r11, r22
     67e:	d4 2e       	mov	r13, r20
     680:	ff 84       	ldd	r15, Y+15	; 0x0f
     682:	18 89       	ldd	r17, Y+16	; 0x10
     684:	ea eb       	ldi	r30, 0xBA	; 186
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	83 83       	std	Z+3, r24	; 0x03
     68a:	64 83       	std	Z+4, r22	; 0x04
     68c:	45 83       	std	Z+5, r20	; 0x05
     68e:	26 83       	std	Z+6, r18	; 0x06
     690:	07 83       	std	Z+7, r16	; 0x07
     692:	e0 86       	std	Z+8, r14	; 0x08
     694:	c1 86       	std	Z+9, r12	; 0x09
     696:	a2 86       	std	Z+10, r10	; 0x0a
     698:	83 86       	std	Z+11, r8	; 0x0b
     69a:	f4 86       	std	Z+12, r15	; 0x0c
     69c:	15 87       	std	Z+13, r17	; 0x0d
     69e:	2f 3f       	cpi	r18, 0xFF	; 255
     6a0:	39 f0       	breq	.+14     	; 0x6b0 <LCD_SetUp+0x52>
     6a2:	0f 3f       	cpi	r16, 0xFF	; 255
     6a4:	29 f0       	breq	.+10     	; 0x6b0 <LCD_SetUp+0x52>
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	e8 16       	cp	r14, r24
     6aa:	11 f0       	breq	.+4      	; 0x6b0 <LCD_SetUp+0x52>
     6ac:	c8 12       	cpse	r12, r24
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <LCD_SetUp+0x5a>
     6b0:	84 e0       	ldi	r24, 0x04	; 4
     6b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <LCDConfig+0x2>
     6b6:	13 c0       	rjmp	.+38     	; 0x6de <LCD_SetUp+0x80>
     6b8:	88 e0       	ldi	r24, 0x08	; 8
     6ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <LCDConfig+0x2>
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	82 2f       	mov	r24, r18
     6c2:	0e 94 05 01 	call	0x20a	; 0x20a <GPIO_PinDirection>
     6c6:	61 e0       	ldi	r22, 0x01	; 1
     6c8:	80 2f       	mov	r24, r16
     6ca:	0e 94 05 01 	call	0x20a	; 0x20a <GPIO_PinDirection>
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	8e 2d       	mov	r24, r14
     6d2:	0e 94 05 01 	call	0x20a	; 0x20a <GPIO_PinDirection>
     6d6:	61 e0       	ldi	r22, 0x01	; 1
     6d8:	8c 2d       	mov	r24, r12
     6da:	0e 94 05 01 	call	0x20a	; 0x20a <GPIO_PinDirection>
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	89 2d       	mov	r24, r9
     6e2:	0e 94 05 01 	call	0x20a	; 0x20a <GPIO_PinDirection>
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	8b 2d       	mov	r24, r11
     6ea:	0e 94 05 01 	call	0x20a	; 0x20a <GPIO_PinDirection>
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	8d 2d       	mov	r24, r13
     6f2:	0e 94 05 01 	call	0x20a	; 0x20a <GPIO_PinDirection>
     6f6:	61 e0       	ldi	r22, 0x01	; 1
     6f8:	8a 2d       	mov	r24, r10
     6fa:	0e 94 05 01 	call	0x20a	; 0x20a <GPIO_PinDirection>
     6fe:	61 e0       	ldi	r22, 0x01	; 1
     700:	88 2d       	mov	r24, r8
     702:	0e 94 05 01 	call	0x20a	; 0x20a <GPIO_PinDirection>
     706:	61 e0       	ldi	r22, 0x01	; 1
     708:	8f 2d       	mov	r24, r15
     70a:	0e 94 05 01 	call	0x20a	; 0x20a <GPIO_PinDirection>
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	81 2f       	mov	r24, r17
     712:	0e 94 05 01 	call	0x20a	; 0x20a <GPIO_PinDirection>
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	08 95       	ret

00000730 <LCD_CmdWrite>:
     730:	cf 93       	push	r28
     732:	c8 2f       	mov	r28, r24
     734:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <lcd_BusyCheck>
     738:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <LCDConfig+0x2>
     73c:	88 30       	cpi	r24, 0x08	; 8
     73e:	21 f4       	brne	.+8      	; 0x748 <LCD_CmdWrite+0x18>
     740:	8c 2f       	mov	r24, r28
     742:	0e 94 a3 02 	call	0x546	; 0x546 <lcd_SendLowerNibble>
     746:	07 c0       	rjmp	.+14     	; 0x756 <LCD_CmdWrite+0x26>
     748:	8c 2f       	mov	r24, r28
     74a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_SendHigherNibble>
     74e:	0e 94 88 02 	call	0x510	; 0x510 <lcd_SendCmdSignals>
     752:	c2 95       	swap	r28
     754:	c0 7f       	andi	r28, 0xF0	; 240
     756:	8c 2f       	mov	r24, r28
     758:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_SendHigherNibble>
     75c:	0e 94 88 02 	call	0x510	; 0x510 <lcd_SendCmdSignals>
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <LCD_GoToLine>:
     764:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <LCDConfig>
     768:	89 17       	cp	r24, r25
     76a:	58 f4       	brcc	.+22     	; 0x782 <LCD_GoToLine+0x1e>
     76c:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <v_LcdTrackCursorPos_U8>
     770:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <v_LcdTrackLineNum_U8>
     774:	e8 2f       	mov	r30, r24
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	e0 5a       	subi	r30, 0xA0	; 160
     77a:	ff 4f       	sbci	r31, 0xFF	; 255
     77c:	80 81       	ld	r24, Z
     77e:	0e 94 98 03 	call	0x730	; 0x730 <LCD_CmdWrite>
     782:	08 95       	ret

00000784 <LCD_Clear>:
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	0e 94 98 03 	call	0x730	; 0x730 <LCD_CmdWrite>
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_GoToLine>
     790:	08 95       	ret

00000792 <LCD_Init>:
     792:	ea eb       	ldi	r30, 0xBA	; 186
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	61 83       	std	Z+1, r22	; 0x01
     798:	80 83       	st	Z, r24
     79a:	83 30       	cpi	r24, 0x03	; 3
     79c:	40 f0       	brcs	.+16     	; 0x7ae <LCD_Init+0x1c>
     79e:	6f 70       	andi	r22, 0x0F	; 15
     7a0:	e0 e6       	ldi	r30, 0x60	; 96
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	80 e9       	ldi	r24, 0x90	; 144
     7a6:	86 0f       	add	r24, r22
     7a8:	82 83       	std	Z+2, r24	; 0x02
     7aa:	60 53       	subi	r22, 0x30	; 48
     7ac:	63 83       	std	Z+3, r22	; 0x03
     7ae:	84 e6       	ldi	r24, 0x64	; 100
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DELAY_ms>
     7b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <LCDConfig+0x2>
     7ba:	88 30       	cpi	r24, 0x08	; 8
     7bc:	21 f4       	brne	.+8      	; 0x7c6 <LCD_Init+0x34>
     7be:	88 e3       	ldi	r24, 0x38	; 56
     7c0:	0e 94 98 03 	call	0x730	; 0x730 <LCD_CmdWrite>
     7c4:	29 c0       	rjmp	.+82     	; 0x818 <LCD_Init+0x86>
     7c6:	84 30       	cpi	r24, 0x04	; 4
     7c8:	39 f5       	brne	.+78     	; 0x818 <LCD_Init+0x86>
     7ca:	80 e3       	ldi	r24, 0x30	; 48
     7cc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_SendHigherNibble>
     7d0:	0e 94 88 02 	call	0x510	; 0x510 <lcd_SendCmdSignals>
     7d4:	84 e6       	ldi	r24, 0x64	; 100
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DELAY_ms>
     7dc:	80 e3       	ldi	r24, 0x30	; 48
     7de:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_SendHigherNibble>
     7e2:	0e 94 88 02 	call	0x510	; 0x510 <lcd_SendCmdSignals>
     7e6:	88 ec       	ldi	r24, 0xC8	; 200
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     7ee:	80 e3       	ldi	r24, 0x30	; 48
     7f0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_SendHigherNibble>
     7f4:	0e 94 88 02 	call	0x510	; 0x510 <lcd_SendCmdSignals>
     7f8:	88 ec       	ldi	r24, 0xC8	; 200
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     800:	80 e2       	ldi	r24, 0x20	; 32
     802:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_SendHigherNibble>
     806:	0e 94 88 02 	call	0x510	; 0x510 <lcd_SendCmdSignals>
     80a:	88 ec       	ldi	r24, 0xC8	; 200
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DELAY_us>
     812:	88 e2       	ldi	r24, 0x28	; 40
     814:	0e 94 98 03 	call	0x730	; 0x730 <LCD_CmdWrite>
     818:	8e e0       	ldi	r24, 0x0E	; 14
     81a:	0e 94 98 03 	call	0x730	; 0x730 <LCD_CmdWrite>
     81e:	0e 94 c2 03 	call	0x784	; 0x784 <LCD_Clear>
     822:	08 95       	ret

00000824 <LCD_GoToNextLine>:
     824:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <v_LcdTrackLineNum_U8>
     828:	8f 5f       	subi	r24, 0xFF	; 255
     82a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <v_LcdTrackLineNum_U8>
     82e:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <v_LcdTrackCursorPos_U8>
     832:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <LCDConfig>
     836:	89 17       	cp	r24, r25
     838:	10 f0       	brcs	.+4      	; 0x83e <LCD_GoToNextLine+0x1a>
     83a:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <v_LcdTrackLineNum_U8>
     83e:	e0 91 c9 00 	lds	r30, 0x00C9	; 0x8000c9 <v_LcdTrackLineNum_U8>
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	e0 5a       	subi	r30, 0xA0	; 160
     846:	ff 4f       	sbci	r31, 0xFF	; 255
     848:	80 81       	ld	r24, Z
     84a:	0e 94 98 03 	call	0x730	; 0x730 <LCD_CmdWrite>
     84e:	08 95       	ret

00000850 <LCD_DisplayChar>:
     850:	cf 93       	push	r28
     852:	c8 2f       	mov	r28, r24
     854:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <LCDConfig+0x1>
     858:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <v_LcdTrackCursorPos_U8>
     85c:	89 17       	cp	r24, r25
     85e:	18 f4       	brcc	.+6      	; 0x866 <__stack+0x7>
     860:	ca 30       	cpi	r28, 0x0A	; 10
     862:	29 f4       	brne	.+10     	; 0x86e <__stack+0xf>
     864:	20 c0       	rjmp	.+64     	; 0x8a6 <__stack+0x47>
     866:	0e 94 12 04 	call	0x824	; 0x824 <LCD_GoToNextLine>
     86a:	ca 30       	cpi	r28, 0x0A	; 10
     86c:	f1 f0       	breq	.+60     	; 0x8aa <__stack+0x4b>
     86e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <lcd_BusyCheck>
     872:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <LCDConfig+0x2>
     876:	88 30       	cpi	r24, 0x08	; 8
     878:	21 f4       	brne	.+8      	; 0x882 <__stack+0x23>
     87a:	8c 2f       	mov	r24, r28
     87c:	0e 94 a3 02 	call	0x546	; 0x546 <lcd_SendLowerNibble>
     880:	07 c0       	rjmp	.+14     	; 0x890 <__stack+0x31>
     882:	8c 2f       	mov	r24, r28
     884:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_SendHigherNibble>
     888:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_SendDataSignals>
     88c:	c2 95       	swap	r28
     88e:	c0 7f       	andi	r28, 0xF0	; 240
     890:	8c 2f       	mov	r24, r28
     892:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_SendHigherNibble>
     896:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_SendDataSignals>
     89a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <v_LcdTrackCursorPos_U8>
     89e:	8f 5f       	subi	r24, 0xFF	; 255
     8a0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <v_LcdTrackCursorPos_U8>
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
     8a6:	0e 94 12 04 	call	0x824	; 0x824 <LCD_GoToNextLine>
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <LCD_DisplayString>:
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	ec 01       	movw	r28, r24
     8b4:	88 81       	ld	r24, Y
     8b6:	88 23       	and	r24, r24
     8b8:	31 f0       	breq	.+12     	; 0x8c6 <LCD_DisplayString+0x18>
     8ba:	21 96       	adiw	r28, 0x01	; 1
     8bc:	0e 94 28 04 	call	0x850	; 0x850 <LCD_DisplayChar>
     8c0:	89 91       	ld	r24, Y+
     8c2:	81 11       	cpse	r24, r1
     8c4:	fb cf       	rjmp	.-10     	; 0x8bc <LCD_DisplayString+0xe>
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <LCD_DisplayNumber>:
                8.(C_HEX_U8,0x12AB,6) then 6-digits ie. 0012AB will be displayed
                9.(C_HEX_U8,0x12AB,C_DisplayDefaultDigits_U8) then 12AB will be displayed.                
****************************************************************************************************/
#if ((Enable_LCD_DisplayNumber == 1) || (Enable_LCD_DisplayFloatNumber == 1) || (Enable_LCD_Printf==1))
void LCD_DisplayNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToDisplay_u8)
{
     8cc:	4f 92       	push	r4
     8ce:	5f 92       	push	r5
     8d0:	6f 92       	push	r6
     8d2:	7f 92       	push	r7
     8d4:	8f 92       	push	r8
     8d6:	9f 92       	push	r9
     8d8:	af 92       	push	r10
     8da:	bf 92       	push	r11
     8dc:	cf 92       	push	r12
     8de:	df 92       	push	r13
     8e0:	ef 92       	push	r14
     8e2:	ff 92       	push	r15
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	2a 97       	sbiw	r28, 0x0a	; 10
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	88 2e       	mov	r8, r24
     8fe:	6a 01       	movw	r12, r20
     900:	7b 01       	movw	r14, r22
     902:	12 2f       	mov	r17, r18
    uint8_t i=0,a[10];
    
    if(C_BINARY_U8 == v_numericSystem_u8)
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	88 12       	cpse	r8, r24
     908:	24 c0       	rjmp	.+72     	; 0x952 <LCD_DisplayNumber+0x86>
    {
        while(v_numOfDigitsToDisplay_u8!=0)
     90a:	22 23       	and	r18, r18
     90c:	09 f4       	brne	.+2      	; 0x910 <LCD_DisplayNumber+0x44>
     90e:	66 c0       	rjmp	.+204    	; 0x9dc <LCD_DisplayNumber+0x110>
        {
          /* Start Extracting the bits from the specified bit positions.
          Get the Acsii values of the bits and display */
          i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
          LCD_DisplayChar(util_Dec2Ascii(i));
     910:	aa 24       	eor	r10, r10
     912:	a3 94       	inc	r10
     914:	b1 2c       	mov	r11, r1
     916:	01 e0       	ldi	r16, 0x01	; 1
     918:	91 2c       	mov	r9, r1
     91a:	8f ef       	ldi	r24, 0xFF	; 255
     91c:	81 0f       	add	r24, r17
     91e:	a5 01       	movw	r20, r10
     920:	02 c0       	rjmp	.+4      	; 0x926 <LCD_DisplayNumber+0x5a>
     922:	44 0f       	add	r20, r20
     924:	55 1f       	adc	r21, r21
     926:	8a 95       	dec	r24
     928:	e2 f7       	brpl	.-8      	; 0x922 <LCD_DisplayNumber+0x56>
     92a:	05 2e       	mov	r0, r21
     92c:	00 0c       	add	r0, r0
     92e:	66 0b       	sbc	r22, r22
     930:	77 0b       	sbc	r23, r23
     932:	4c 21       	and	r20, r12
     934:	5d 21       	and	r21, r13
     936:	6e 21       	and	r22, r14
     938:	7f 21       	and	r23, r15
     93a:	80 2f       	mov	r24, r16
     93c:	45 2b       	or	r20, r21
     93e:	46 2b       	or	r20, r22
     940:	47 2b       	or	r20, r23
     942:	09 f4       	brne	.+2      	; 0x946 <LCD_DisplayNumber+0x7a>
     944:	89 2d       	mov	r24, r9
     946:	80 5d       	subi	r24, 0xD0	; 208
     948:	0e 94 28 04 	call	0x850	; 0x850 <LCD_DisplayChar>
          v_numOfDigitsToDisplay_u8--;
     94c:	11 50       	subi	r17, 0x01	; 1
{
    uint8_t i=0,a[10];
    
    if(C_BINARY_U8 == v_numericSystem_u8)
    {
        while(v_numOfDigitsToDisplay_u8!=0)
     94e:	29 f7       	brne	.-54     	; 0x91a <LCD_DisplayNumber+0x4e>
     950:	45 c0       	rjmp	.+138    	; 0x9dc <LCD_DisplayNumber+0x110>
          i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
          LCD_DisplayChar(util_Dec2Ascii(i));
          v_numOfDigitsToDisplay_u8--;
        }        
    }    
    else if(v_number_u32==0)
     952:	45 2b       	or	r20, r21
     954:	46 2b       	or	r20, r22
     956:	47 2b       	or	r20, r23
     958:	19 f0       	breq	.+6      	; 0x960 <LCD_DisplayNumber+0x94>
        //for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            LCD_DisplayChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
     95a:	21 11       	cpse	r18, r1
     95c:	05 c0       	rjmp	.+10     	; 0x968 <LCD_DisplayNumber+0x9c>
     95e:	3e c0       	rjmp	.+124    	; 0x9dc <LCD_DisplayNumber+0x110>
    else if(v_number_u32==0)
    {
        /* If the number is zero then display Specified number of zeros*/
        /*TODO: Display single zero or multiple. Currently single zero is displayed*/
        //for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            LCD_DisplayChar('0');
     960:	80 e3       	ldi	r24, 0x30	; 48
     962:	0e 94 28 04 	call	0x850	; 0x850 <LCD_DisplayChar>
     966:	3a c0       	rjmp	.+116    	; 0x9dc <LCD_DisplayNumber+0x110>
     968:	fe 01       	movw	r30, r28
     96a:	31 96       	adiw	r30, 0x01	; 1
     96c:	5f 01       	movw	r10, r30
    }
    else
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
     96e:	00 e0       	ldi	r16, 0x00	; 0
                First get the remainder and divide the number by TypeOfNum(10-Dec, 16-Hex) each time.
                
                example for Decimal number: 
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
     970:	48 2c       	mov	r4, r8
     972:	51 2c       	mov	r5, r1
     974:	61 2c       	mov	r6, r1
     976:	71 2c       	mov	r7, r1
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
        {
            /* Continue extracting the digits from right side
               till the Specified v_numOfDigitsToDisplay_u8 */
            if(v_number_u32!=0)
     978:	c1 14       	cp	r12, r1
     97a:	d1 04       	cpc	r13, r1
     97c:	e1 04       	cpc	r14, r1
     97e:	f1 04       	cpc	r15, r1
     980:	89 f0       	breq	.+34     	; 0x9a4 <LCD_DisplayNumber+0xd8>
                First get the remainder and divide the number by TypeOfNum(10-Dec, 16-Hex) each time.
                
                example for Decimal number: 
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
     982:	9c 2c       	mov	r9, r12
     984:	c7 01       	movw	r24, r14
     986:	b6 01       	movw	r22, r12
     988:	a3 01       	movw	r20, r6
     98a:	92 01       	movw	r18, r4
     98c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__udivmodsi4>
     990:	c2 2e       	mov	r12, r18
     992:	d3 2e       	mov	r13, r19
     994:	e4 2e       	mov	r14, r20
     996:	f5 2e       	mov	r15, r21
     998:	82 9e       	mul	r8, r18
     99a:	90 18       	sub	r9, r0
     99c:	11 24       	eor	r1, r1
     99e:	f5 01       	movw	r30, r10
     9a0:	90 82       	st	Z, r9
     9a2:	07 c0       	rjmp	.+14     	; 0x9b2 <LCD_DisplayNumber+0xe6>
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigitsToDisplay_u8 == C_DisplayDefaultDigits_U8) ||
     9a4:	1b 30       	cpi	r17, 0x0B	; 11
     9a6:	18 f0       	brcs	.+6      	; 0x9ae <LCD_DisplayNumber+0xe2>
               Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
            }
        }
        
         while(i!=0)
     9a8:	01 11       	cpse	r16, r1
     9aa:	0a c0       	rjmp	.+20     	; 0x9c0 <LCD_DisplayNumber+0xf4>
     9ac:	17 c0       	rjmp	.+46     	; 0x9dc <LCD_DisplayNumber+0x110>
            else
            {
                /* In case user expects more digits to be displayed than the actual digits in number,
                  then update the remaining digits with zero.
               Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
     9ae:	f5 01       	movw	r30, r10
     9b0:	10 82       	st	Z, r1
        //for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            LCD_DisplayChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
     9b2:	0f 5f       	subi	r16, 0xFF	; 255
     9b4:	ff ef       	ldi	r31, 0xFF	; 255
     9b6:	af 1a       	sub	r10, r31
     9b8:	bf 0a       	sbc	r11, r31
     9ba:	10 13       	cpse	r17, r16
     9bc:	dd cf       	rjmp	.-70     	; 0x978 <LCD_DisplayNumber+0xac>
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <LCD_DisplayNumber+0xf6>
               Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
            }
        }
        
         while(i!=0)
     9c0:	10 2f       	mov	r17, r16
        { 
          /* Finally get the ascii values of the digits and display*/
          LCD_DisplayChar(util_Hex2Ascii(a[i-1]));
     9c2:	fe 01       	movw	r30, r28
     9c4:	e1 0f       	add	r30, r17
     9c6:	f1 1d       	adc	r31, r1
     9c8:	80 81       	ld	r24, Z
     9ca:	8a 30       	cpi	r24, 0x0A	; 10
     9cc:	10 f0       	brcs	.+4      	; 0x9d2 <LCD_DisplayNumber+0x106>
     9ce:	89 5c       	subi	r24, 0xC9	; 201
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <LCD_DisplayNumber+0x108>
     9d2:	80 5d       	subi	r24, 0xD0	; 208
     9d4:	0e 94 28 04 	call	0x850	; 0x850 <LCD_DisplayChar>
          i--;
     9d8:	11 50       	subi	r17, 0x01	; 1
               Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
            }
        }
        
         while(i!=0)
     9da:	99 f7       	brne	.-26     	; 0x9c2 <LCD_DisplayNumber+0xf6>
          /* Finally get the ascii values of the digits and display*/
          LCD_DisplayChar(util_Hex2Ascii(a[i-1]));
          i--;
        }
    }
}
     9dc:	2a 96       	adiw	r28, 0x0a	; 10
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	df 90       	pop	r13
     9f6:	cf 90       	pop	r12
     9f8:	bf 90       	pop	r11
     9fa:	af 90       	pop	r10
     9fc:	9f 90       	pop	r9
     9fe:	8f 90       	pop	r8
     a00:	7f 90       	pop	r7
     a02:	6f 90       	pop	r6
     a04:	5f 90       	pop	r5
     a06:	4f 90       	pop	r4
     a08:	08 95       	ret

00000a0a <LCD_DisplayFloatNumber>:
    Note: Float will be disabled by default as it takes huge controller resources
         It can be enabled by changing value of Enable_LCD_DisplayFloatNumber to 1 in lcd.h
***************************************************************************************************/
#if (Enable_LCD_DisplayFloatNumber == 1)  
void LCD_DisplayFloatNumber(double v_floatNum_f32)
{
     a0a:	8f 92       	push	r8
     a0c:	9f 92       	push	r9
     a0e:	af 92       	push	r10
     a10:	bf 92       	push	r11
     a12:	cf 92       	push	r12
     a14:	df 92       	push	r13
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	6b 01       	movw	r12, r22
     a1c:	7c 01       	movw	r14, r24
      1.Type cast the number to int to get the integer part.
      2.Display the extracted integer part followed by a decimal point(.)
      3.Later the integer part is made zero by subtracting with the extracted integer value.
      4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */

    v_decNumber_u32 = (uint32_t) v_floatNum_f32;
     a1e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__fixunssfsi>
     a22:	4b 01       	movw	r8, r22
     a24:	5c 01       	movw	r10, r24
    LCD_DisplayNumber(C_DECIMAL_U8,v_decNumber_u32,C_DisplayDefaultDigits_U8);
     a26:	2f ef       	ldi	r18, 0xFF	; 255
     a28:	ab 01       	movw	r20, r22
     a2a:	bc 01       	movw	r22, r24
     a2c:	8a e0       	ldi	r24, 0x0A	; 10
     a2e:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_DisplayNumber>

    LCD_DisplayChar('.');
     a32:	8e e2       	ldi	r24, 0x2E	; 46
     a34:	0e 94 28 04 	call	0x850	; 0x850 <LCD_DisplayChar>

    v_floatNum_f32 = v_floatNum_f32 - v_decNumber_u32;
    v_decNumber_u32 = v_floatNum_f32 * 1000000;
     a38:	c5 01       	movw	r24, r10
     a3a:	b4 01       	movw	r22, r8
     a3c:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatunsisf>
     a40:	9b 01       	movw	r18, r22
     a42:	ac 01       	movw	r20, r24
     a44:	c7 01       	movw	r24, r14
     a46:	b6 01       	movw	r22, r12
     a48:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__subsf3>
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	34 e2       	ldi	r19, 0x24	; 36
     a50:	44 e7       	ldi	r20, 0x74	; 116
     a52:	59 e4       	ldi	r21, 0x49	; 73
     a54:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__mulsf3>
    LCD_DisplayNumber(C_DECIMAL_U8,v_decNumber_u32,C_DisplayDefaultDigits_U8);
     a58:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__fixunssfsi>
     a5c:	ab 01       	movw	r20, r22
     a5e:	bc 01       	movw	r22, r24
     a60:	2f ef       	ldi	r18, 0xFF	; 255
     a62:	8a e0       	ldi	r24, 0x0A	; 10
     a64:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_DisplayNumber>
}
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	08 95       	ret

00000a7a <LCD_Printf>:
        uint8_t v_Num_u8;
        LCD_Printf("num1:%u",(uint16_t)v_Num_u8); 
**************************************************************************************************/
#if ( Enable_LCD_Printf   == 1 ) 
void LCD_Printf(const char *argList, ...)
{
     a7a:	4f 92       	push	r4
     a7c:	5f 92       	push	r5
     a7e:	6f 92       	push	r6
     a80:	7f 92       	push	r7
     a82:	8f 92       	push	r8
     a84:	9f 92       	push	r9
     a86:	af 92       	push	r10
     a88:	bf 92       	push	r11
     a8a:	cf 92       	push	r12
     a8c:	df 92       	push	r13
     a8e:	ef 92       	push	r14
     a90:	ff 92       	push	r15
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
     a9e:	fe 01       	movw	r30, r28
     aa0:	73 96       	adiw	r30, 0x13	; 19
     aa2:	81 90       	ld	r8, Z+
     aa4:	91 90       	ld	r9, Z+
    uint8_t v_numOfDigitsToDisp_u8;
#if (Enable_LCD_DisplayFloatNumber == 1)  
    double v_floatNum_f32;
#endif

    va_start(argp, argList);
     aa6:	7f 01       	movw	r14, r30

    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
     aa8:	d4 01       	movw	r26, r8
     aaa:	8c 91       	ld	r24, X
     aac:	88 23       	and	r24, r24
     aae:	09 f4       	brne	.+2      	; 0xab2 <LCD_Printf+0x38>
     ab0:	07 c1       	rjmp	.+526    	; 0xcc0 <LCD_Printf+0x246>
                break;

            case 'B':  /* Argument type is of binary,Read int and convert to binary */
                v_num_u32 = va_arg(argp, uint32_t);
                if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                   v_numOfDigitsToDisp_u8 = 16;                
     ab2:	68 94       	set
     ab4:	aa 24       	eor	r10, r10
     ab6:	a4 f8       	bld	r10, 4
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     ab8:	bb 24       	eor	r11, r11
     aba:	ba 94       	dec	r11
        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
        {
            ptr++;
            ch = *ptr;
           if((ch>=0x30) && (ch<=0x39))
     abc:	00 e0       	ldi	r16, 0x00	; 0
    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
    {

        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
     abe:	85 32       	cpi	r24, 0x25	; 37
     ac0:	09 f0       	breq	.+2      	; 0xac4 <LCD_Printf+0x4a>
     ac2:	dc c0       	rjmp	.+440    	; 0xc7c <LCD_Printf+0x202>
        {
            ptr++;
     ac4:	64 01       	movw	r12, r8
     ac6:	bf ef       	ldi	r27, 0xFF	; 255
     ac8:	cb 1a       	sub	r12, r27
     aca:	db 0a       	sbc	r13, r27
            ch = *ptr;
     acc:	d4 01       	movw	r26, r8
     ace:	11 96       	adiw	r26, 0x01	; 1
     ad0:	ec 91       	ld	r30, X
     ad2:	11 97       	sbiw	r26, 0x01	; 1
           if((ch>=0x30) && (ch<=0x39))
     ad4:	80 ed       	ldi	r24, 0xD0	; 208
     ad6:	8e 0f       	add	r24, r30
     ad8:	8a 30       	cpi	r24, 0x0A	; 10
     ada:	08 f0       	brcs	.+2      	; 0xade <LCD_Printf+0x64>
     adc:	e6 c0       	rjmp	.+460    	; 0xcaa <LCD_Printf+0x230>
     ade:	12 96       	adiw	r26, 0x02	; 2
     ae0:	10 2f       	mov	r17, r16
     ae2:	21 2f       	mov	r18, r17
     ae4:	22 0f       	add	r18, r18
     ae6:	82 2f       	mov	r24, r18
     ae8:	88 0f       	add	r24, r24
     aea:	88 0f       	add	r24, r24
     aec:	28 0f       	add	r18, r24
     aee:	20 53       	subi	r18, 0x30	; 48
            {
               v_numOfDigitsToDisp_u8 = 0;
               while((ch>=0x30) && (ch<=0x39))
                {
                   v_numOfDigitsToDisp_u8 = (v_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
     af0:	12 2f       	mov	r17, r18
     af2:	1e 0f       	add	r17, r30
                   ptr++;
     af4:	6d 01       	movw	r12, r26
                   ch = *ptr;
     af6:	ed 91       	ld	r30, X+
            ptr++;
            ch = *ptr;
           if((ch>=0x30) && (ch<=0x39))
            {
               v_numOfDigitsToDisp_u8 = 0;
               while((ch>=0x30) && (ch<=0x39))
     af8:	80 ed       	ldi	r24, 0xD0	; 208
     afa:	8e 0f       	add	r24, r30
     afc:	8a 30       	cpi	r24, 0x0A	; 10
     afe:	88 f3       	brcs	.-30     	; 0xae2 <LCD_Printf+0x68>
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
            }                


            switch(ch)       /* Decode the type of the argument */
     b00:	8e 2f       	mov	r24, r30
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	fc 01       	movw	r30, r24
     b06:	b5 97       	sbiw	r30, 0x25	; 37
     b08:	e4 35       	cpi	r30, 0x54	; 84
     b0a:	f1 05       	cpc	r31, r1
     b0c:	08 f0       	brcs	.+2      	; 0xb10 <LCD_Printf+0x96>
     b0e:	b9 c0       	rjmp	.+370    	; 0xc82 <LCD_Printf+0x208>
     b10:	e6 5d       	subi	r30, 0xD6	; 214
     b12:	ff 4f       	sbci	r31, 0xFF	; 255
     b14:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__tablejump2__>
            {
            case 'C':
            case 'c':     /* Argument type is of char, hence read char data from the argp */
                ch = va_arg(argp, int);
     b18:	47 01       	movw	r8, r14
     b1a:	b2 e0       	ldi	r27, 0x02	; 2
     b1c:	8b 0e       	add	r8, r27
     b1e:	91 1c       	adc	r9, r1
                LCD_DisplayChar(ch);
     b20:	f7 01       	movw	r30, r14
     b22:	80 81       	ld	r24, Z
     b24:	0e 94 28 04 	call	0x850	; 0x850 <LCD_DisplayChar>

            switch(ch)       /* Decode the type of the argument */
            {
            case 'C':
            case 'c':     /* Argument type is of char, hence read char data from the argp */
                ch = va_arg(argp, int);
     b28:	74 01       	movw	r14, r8
                LCD_DisplayChar(ch);
                break;
     b2a:	ab c0       	rjmp	.+342    	; 0xc82 <LCD_Printf+0x208>
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     b2c:	1b 2d       	mov	r17, r11
                ch = va_arg(argp, int);
                LCD_DisplayChar(ch);
                break;

            case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                v_num_s16 = va_arg(argp, int);
     b2e:	f7 01       	movw	r30, r14
     b30:	80 80       	ld	r8, Z
     b32:	91 80       	ldd	r9, Z+1	; 0x01
     b34:	f2 e0       	ldi	r31, 0x02	; 2
     b36:	ef 0e       	add	r14, r31
     b38:	f1 1c       	adc	r15, r1
                if(v_num_s16<0)
     b3a:	99 20       	and	r9, r9
     b3c:	34 f4       	brge	.+12     	; 0xb4a <LCD_Printf+0xd0>
                 { /* If the number is -ve then display the 2's complement along with '-' sign */ 
                   v_num_s16 = -v_num_s16;
     b3e:	91 94       	neg	r9
     b40:	81 94       	neg	r8
     b42:	91 08       	sbc	r9, r1
                   LCD_DisplayChar('-');
     b44:	8d e2       	ldi	r24, 0x2D	; 45
     b46:	0e 94 28 04 	call	0x850	; 0x850 <LCD_DisplayChar>
                 }
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
     b4a:	a4 01       	movw	r20, r8
     b4c:	99 0c       	add	r9, r9
     b4e:	66 0b       	sbc	r22, r22
     b50:	77 0b       	sbc	r23, r23
     b52:	21 2f       	mov	r18, r17
     b54:	8a e0       	ldi	r24, 0x0A	; 10
     b56:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_DisplayNumber>
                break;
     b5a:	93 c0       	rjmp	.+294    	; 0xc82 <LCD_Printf+0x208>
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     b5c:	1b 2d       	mov	r17, r11
                 }
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
                break;
                
            case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                v_num_s32 = va_arg(argp, sint32_t);
     b5e:	f7 01       	movw	r30, r14
     b60:	40 80       	ld	r4, Z
     b62:	51 80       	ldd	r5, Z+1	; 0x01
     b64:	62 80       	ldd	r6, Z+2	; 0x02
     b66:	73 80       	ldd	r7, Z+3	; 0x03
     b68:	24 e0       	ldi	r18, 0x04	; 4
     b6a:	e2 0e       	add	r14, r18
     b6c:	f1 1c       	adc	r15, r1
                if(v_num_s32<0)
     b6e:	77 20       	and	r7, r7
     b70:	5c f4       	brge	.+22     	; 0xb88 <LCD_Printf+0x10e>
                 { /* If the number is -ve then display the 2's complement along with '-' sign */
                   v_num_s32 = -v_num_s32;
     b72:	70 94       	com	r7
     b74:	60 94       	com	r6
     b76:	50 94       	com	r5
     b78:	40 94       	com	r4
     b7a:	41 1c       	adc	r4, r1
     b7c:	51 1c       	adc	r5, r1
     b7e:	61 1c       	adc	r6, r1
     b80:	71 1c       	adc	r7, r1
                   LCD_DisplayChar('-');
     b82:	8d e2       	ldi	r24, 0x2D	; 45
     b84:	0e 94 28 04 	call	0x850	; 0x850 <LCD_DisplayChar>
                 }
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);              
     b88:	21 2f       	mov	r18, r17
     b8a:	b3 01       	movw	r22, r6
     b8c:	a2 01       	movw	r20, r4
     b8e:	8a e0       	ldi	r24, 0x0A	; 10
     b90:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_DisplayNumber>
                break;    
     b94:	76 c0       	rjmp	.+236    	; 0xc82 <LCD_Printf+0x208>
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     b96:	1b 2d       	mov	r17, r11
                 }
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);              
                break;    

            case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                v_num_u16 = va_arg(argp, int);
     b98:	f7 01       	movw	r30, r14
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
     b9a:	40 81       	ld	r20, Z
     b9c:	51 81       	ldd	r21, Z+1	; 0x01
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	e8 0e       	add	r14, r24
     ba2:	f1 1c       	adc	r15, r1
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	21 2f       	mov	r18, r17
     baa:	8a e0       	ldi	r24, 0x0A	; 10
     bac:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_DisplayNumber>
                break;
     bb0:	68 c0       	rjmp	.+208    	; 0xc82 <LCD_Printf+0x208>
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     bb2:	1b 2d       	mov	r17, r11
                v_num_u16 = va_arg(argp, int);
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                break;
            
            case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                v_num_u32 = va_arg(argp, uint32_t);
     bb4:	f7 01       	movw	r30, r14
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);               
     bb6:	40 81       	ld	r20, Z
     bb8:	51 81       	ldd	r21, Z+1	; 0x01
     bba:	62 81       	ldd	r22, Z+2	; 0x02
     bbc:	73 81       	ldd	r23, Z+3	; 0x03
     bbe:	a4 e0       	ldi	r26, 0x04	; 4
     bc0:	ea 0e       	add	r14, r26
     bc2:	f1 1c       	adc	r15, r1
     bc4:	21 2f       	mov	r18, r17
     bc6:	8a e0       	ldi	r24, 0x0A	; 10
     bc8:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_DisplayNumber>
                break;            
     bcc:	5a c0       	rjmp	.+180    	; 0xc82 <LCD_Printf+0x208>
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     bce:	1b 2d       	mov	r17, r11
                v_num_u32 = va_arg(argp, uint32_t);
                LCD_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);               
                break;            

            case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                v_num_u16 = va_arg(argp, int);
     bd0:	f7 01       	movw	r30, r14
                LCD_DisplayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
     bd2:	40 81       	ld	r20, Z
     bd4:	51 81       	ldd	r21, Z+1	; 0x01
     bd6:	b2 e0       	ldi	r27, 0x02	; 2
     bd8:	eb 0e       	add	r14, r27
     bda:	f1 1c       	adc	r15, r1
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	21 2f       	mov	r18, r17
     be2:	8a 2d       	mov	r24, r10
     be4:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_DisplayNumber>
                break;
     be8:	4c c0       	rjmp	.+152    	; 0xc82 <LCD_Printf+0x208>
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     bea:	1b 2d       	mov	r17, r11
                v_num_u16 = va_arg(argp, int);
                LCD_DisplayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                break;

            case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                v_num_u32 = va_arg(argp, uint32_t);
     bec:	f7 01       	movw	r30, r14
                LCD_DisplayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);                
     bee:	40 81       	ld	r20, Z
     bf0:	51 81       	ldd	r21, Z+1	; 0x01
     bf2:	62 81       	ldd	r22, Z+2	; 0x02
     bf4:	73 81       	ldd	r23, Z+3	; 0x03
     bf6:	e4 e0       	ldi	r30, 0x04	; 4
     bf8:	ee 0e       	add	r14, r30
     bfa:	f1 1c       	adc	r15, r1
     bfc:	21 2f       	mov	r18, r17
     bfe:	8a 2d       	mov	r24, r10
     c00:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_DisplayNumber>
                break;
     c04:	3e c0       	rjmp	.+124    	; 0xc82 <LCD_Printf+0x208>
                   ch = *ptr;
                }
            }
            else
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
     c06:	1b 2d       	mov	r17, r11
                LCD_DisplayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);                
                break;

            
            case 'b':  /* Argument type is of binary,Read int and convert to binary */
                v_num_u16 = va_arg(argp, int);
     c08:	f7 01       	movw	r30, r14
     c0a:	40 81       	ld	r20, Z
     c0c:	51 81       	ldd	r21, Z+1	; 0x01
     c0e:	f2 e0       	ldi	r31, 0x02	; 2
     c10:	ef 0e       	add	r14, r31
     c12:	f1 1c       	adc	r15, r1
                if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
     c14:	1f 3f       	cpi	r17, 0xFF	; 255
     c16:	09 f4       	brne	.+2      	; 0xc1a <LCD_Printf+0x1a0>
                   v_numOfDigitsToDisp_u8 = 16;
     c18:	1a 2d       	mov	r17, r10
                LCD_DisplayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);                
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	21 2f       	mov	r18, r17
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_DisplayNumber>
                break;
     c26:	2d c0       	rjmp	.+90     	; 0xc82 <LCD_Printf+0x208>

            case 'B':  /* Argument type is of binary,Read int and convert to binary */
                v_num_u32 = va_arg(argp, uint32_t);
     c28:	f7 01       	movw	r30, r14
     c2a:	40 81       	ld	r20, Z
     c2c:	51 81       	ldd	r21, Z+1	; 0x01
     c2e:	62 81       	ldd	r22, Z+2	; 0x02
     c30:	73 81       	ldd	r23, Z+3	; 0x03
     c32:	24 e0       	ldi	r18, 0x04	; 4
     c34:	e2 0e       	add	r14, r18
     c36:	f1 1c       	adc	r15, r1
                if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
     c38:	1f 3f       	cpi	r17, 0xFF	; 255
     c3a:	09 f4       	brne	.+2      	; 0xc3e <LCD_Printf+0x1c4>
                   v_numOfDigitsToDisp_u8 = 16;                
     c3c:	1a 2d       	mov	r17, r10
                LCD_DisplayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);                
     c3e:	21 2f       	mov	r18, r17
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_DisplayNumber>
                break;
     c46:	1d c0       	rjmp	.+58     	; 0xc82 <LCD_Printf+0x208>


            case 'F':
            case 'f': /* Argument type is of float, hence read double data from the argp */
#if (Enable_LCD_DisplayFloatNumber == 1)  
                v_floatNum_f32 = va_arg(argp, double);              
     c48:	f7 01       	movw	r30, r14
                LCD_DisplayFloatNumber(v_floatNum_f32);
     c4a:	60 81       	ld	r22, Z
     c4c:	71 81       	ldd	r23, Z+1	; 0x01
     c4e:	82 81       	ldd	r24, Z+2	; 0x02
     c50:	93 81       	ldd	r25, Z+3	; 0x03
     c52:	a4 e0       	ldi	r26, 0x04	; 4
     c54:	ea 0e       	add	r14, r26
     c56:	f1 1c       	adc	r15, r1
     c58:	0e 94 05 05 	call	0xa0a	; 0xa0a <LCD_DisplayFloatNumber>
#endif
                break;
     c5c:	12 c0       	rjmp	.+36     	; 0xc82 <LCD_Printf+0x208>


            case 'S':
            case 's': /* Argument type is of string, hence get the pointer to sting passed */
                str = va_arg(argp, char *);
     c5e:	47 01       	movw	r8, r14
     c60:	b2 e0       	ldi	r27, 0x02	; 2
     c62:	8b 0e       	add	r8, r27
     c64:	91 1c       	adc	r9, r1
                LCD_DisplayString(str);                
     c66:	f7 01       	movw	r30, r14
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	0e 94 57 04 	call	0x8ae	; 0x8ae <LCD_DisplayString>
                break;


            case 'S':
            case 's': /* Argument type is of string, hence get the pointer to sting passed */
                str = va_arg(argp, char *);
     c70:	74 01       	movw	r14, r8
                LCD_DisplayString(str);                
                break;
     c72:	07 c0       	rjmp	.+14     	; 0xc82 <LCD_Printf+0x208>

            case '%':
                LCD_DisplayChar('%');
     c74:	85 e2       	ldi	r24, 0x25	; 37
     c76:	0e 94 28 04 	call	0x850	; 0x850 <LCD_DisplayChar>
                break;
     c7a:	03 c0       	rjmp	.+6      	; 0xc82 <LCD_Printf+0x208>
            }
        }
        else
        {
            /* As '%' is not detected display/transmit the char passed */
            LCD_DisplayChar(ch);
     c7c:	0e 94 28 04 	call	0x850	; 0x850 <LCD_DisplayChar>
     c80:	64 01       	movw	r12, r8
#endif

    va_start(argp, argList);

    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
     c82:	46 01       	movw	r8, r12
     c84:	ff ef       	ldi	r31, 0xFF	; 255
     c86:	8f 1a       	sub	r8, r31
     c88:	9f 0a       	sbc	r9, r31
     c8a:	d6 01       	movw	r26, r12
     c8c:	11 96       	adiw	r26, 0x01	; 1
     c8e:	8c 91       	ld	r24, X
     c90:	81 11       	cpse	r24, r1
     c92:	15 cf       	rjmp	.-470    	; 0xabe <LCD_Printf+0x44>
     c94:	15 c0       	rjmp	.+42     	; 0xcc0 <LCD_Printf+0x246>
                   v_numOfDigitsToDisp_u8 = 16;
                LCD_DisplayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);                
                break;

            case 'B':  /* Argument type is of binary,Read int and convert to binary */
                v_num_u32 = va_arg(argp, uint32_t);
     c96:	f7 01       	movw	r30, r14
     c98:	40 81       	ld	r20, Z
     c9a:	51 81       	ldd	r21, Z+1	; 0x01
     c9c:	62 81       	ldd	r22, Z+2	; 0x02
     c9e:	73 81       	ldd	r23, Z+3	; 0x03
     ca0:	b4 e0       	ldi	r27, 0x04	; 4
     ca2:	eb 0e       	add	r14, r27
     ca4:	f1 1c       	adc	r15, r1
                if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                   v_numOfDigitsToDisp_u8 = 16;                
     ca6:	1a 2d       	mov	r17, r10
     ca8:	ca cf       	rjmp	.-108    	; 0xc3e <LCD_Printf+0x1c4>
            {
              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
            }                


            switch(ch)       /* Decode the type of the argument */
     caa:	8e 2f       	mov	r24, r30
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	fc 01       	movw	r30, r24
     cb0:	b5 97       	sbiw	r30, 0x25	; 37
     cb2:	e4 35       	cpi	r30, 0x54	; 84
     cb4:	f1 05       	cpc	r31, r1
     cb6:	28 f7       	brcc	.-54     	; 0xc82 <LCD_Printf+0x208>
     cb8:	e2 58       	subi	r30, 0x82	; 130
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__tablejump2__>
            LCD_DisplayChar(ch);
        }
    }

    va_end(argp);
}
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	bf 90       	pop	r11
     cd2:	af 90       	pop	r10
     cd4:	9f 90       	pop	r9
     cd6:	8f 90       	pop	r8
     cd8:	7f 90       	pop	r7
     cda:	6f 90       	pop	r6
     cdc:	5f 90       	pop	r5
     cde:	4f 90       	pop	r4
     ce0:	08 95       	ret

00000ce2 <__vector_3>:
/*
This is the Interrupt Service Routine for INT2 which is generated by an output 
from the receiver ATmega when the player object remains still for too long.
*/
ISR(INT2_vect)		
{
     ce2:	1f 92       	push	r1
     ce4:	0f 92       	push	r0
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	0f 92       	push	r0
     cea:	11 24       	eor	r1, r1
     cec:	2f 93       	push	r18
     cee:	8f 93       	push	r24
     cf0:	9f 93       	push	r25
	score -= 100;
     cf2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <score>
     cf6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <score+0x1>
     cfa:	84 56       	subi	r24, 0x64	; 100
     cfc:	91 09       	sbc	r25, r1
     cfe:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <score+0x1>
     d02:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <score>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d06:	2f e7       	ldi	r18, 0x7F	; 127
     d08:	88 e3       	ldi	r24, 0x38	; 56
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	21 50       	subi	r18, 0x01	; 1
     d0e:	80 40       	sbci	r24, 0x00	; 0
     d10:	90 40       	sbci	r25, 0x00	; 0
     d12:	e1 f7       	brne	.-8      	; 0xd0c <__vector_3+0x2a>
     d14:	00 c0       	rjmp	.+0      	; 0xd16 <__vector_3+0x34>
     d16:	00 00       	nop
	_delay_ms(50);
}
     d18:	9f 91       	pop	r25
     d1a:	8f 91       	pop	r24
     d1c:	2f 91       	pop	r18
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <RTC_values>:
}

void RTC_values()
{
	//clock will start at 00:00:00
	rtc.hour = 0x00; 
     d28:	e0 ed       	ldi	r30, 0xD0	; 208
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	12 82       	std	Z+2, r1	; 0x02
	rtc.min =  0x00;
     d2e:	11 82       	std	Z+1, r1	; 0x01
	rtc.sec =  0x00;
     d30:	10 82       	st	Z, r1

	//random date [doesn't matter what you set]
	rtc.date = 0x01; //1st Jan 2019
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	84 83       	std	Z+4, r24	; 0x04
	rtc.month = 0x01;
     d36:	85 83       	std	Z+5, r24	; 0x05
	rtc.year = 0x19;
     d38:	89 e1       	ldi	r24, 0x19	; 25
     d3a:	86 83       	std	Z+6, r24	; 0x06
	rtc.weekDay = 2; // Tuesday: 2nd day of week considering Monday as first day.
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	83 83       	std	Z+3, r24	; 0x03
     d40:	08 95       	ret

00000d42 <adc_init>:
}

/*ADC Function Definitions*/
void adc_init(void)
{
	ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADPS2);
     d42:	84 ee       	ldi	r24, 0xE4	; 228
     d44:	86 b9       	out	0x06, r24	; 6
	SFIOR=0x00;
     d46:	10 be       	out	0x30, r1	; 48
     d48:	08 95       	ret

00000d4a <read_adc_channel>:

int read_adc_channel(unsigned char channel)
{
	int adc_value;
	unsigned char temp;
	ADMUX=(1<<REFS0)|channel;
     d4a:	80 64       	ori	r24, 0x40	; 64
     d4c:	87 b9       	out	0x07, r24	; 7
     d4e:	8f ec       	ldi	r24, 0xCF	; 207
     d50:	97 e0       	ldi	r25, 0x07	; 7
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	f1 f7       	brne	.-4      	; 0xd52 <read_adc_channel+0x8>
     d56:	00 c0       	rjmp	.+0      	; 0xd58 <read_adc_channel+0xe>
     d58:	00 00       	nop
	_delay_ms(1);
	temp=ADCL;
     d5a:	84 b1       	in	r24, 0x04	; 4
	adc_value=ADCH;
     d5c:	25 b1       	in	r18, 0x05	; 5
	adc_value=(adc_value<<8)|temp;
     d5e:	90 e0       	ldi	r25, 0x00	; 0
	return adc_value;
}
     d60:	92 2b       	or	r25, r18
     d62:	08 95       	ret

00000d64 <display_results>:

void display_results()
{
	RTC_GetDateTime(&rtc);	//stop RTC
     d64:	80 ed       	ldi	r24, 0xD0	; 208
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 ca 08 	call	0x1194	; 0x1194 <RTC_GetDateTime>
	LCD_Clear();
     d6c:	0e 94 c2 03 	call	0x784	; 0x784 <LCD_Clear>
	LCD_GoToLine(0);
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_GoToLine>
	LCD_Printf("Game Over");
     d76:	8c e7       	ldi	r24, 0x7C	; 124
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	9f 93       	push	r25
     d7c:	8f 93       	push	r24
     d7e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <LCD_Printf>
	
	PORTB = 0x00;	//turn off all the lasers
     d82:	18 ba       	out	0x18, r1	; 24
     d84:	2f ef       	ldi	r18, 0xFF	; 255
     d86:	81 ee       	ldi	r24, 0xE1	; 225
     d88:	94 e0       	ldi	r25, 0x04	; 4
     d8a:	21 50       	subi	r18, 0x01	; 1
     d8c:	80 40       	sbci	r24, 0x00	; 0
     d8e:	90 40       	sbci	r25, 0x00	; 0
     d90:	e1 f7       	brne	.-8      	; 0xd8a <display_results+0x26>
     d92:	00 c0       	rjmp	.+0      	; 0xd94 <display_results+0x30>
     d94:	00 00       	nop
	_delay_ms(200);
	
	//display final score and time taken to solve maze
	LCD_Clear();
     d96:	0e 94 c2 03 	call	0x784	; 0x784 <LCD_Clear>
	LCD_GoToLine(0);
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_GoToLine>
	LCD_Printf("score: %d", score);
     da0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <score+0x1>
     da4:	8f 93       	push	r24
     da6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <score>
     daa:	8f 93       	push	r24
     dac:	86 e8       	ldi	r24, 0x86	; 134
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9f 93       	push	r25
     db2:	8f 93       	push	r24
     db4:	0e 94 3d 05 	call	0xa7a	; 0xa7a <LCD_Printf>
	LCD_GoToLine(1);
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_GoToLine>
	LCD_Printf("time: %2x:%2x",(uint16_t)rtc.min,(uint16_t)rtc.sec);
     dbe:	e0 ed       	ldi	r30, 0xD0	; 208
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	1f 92       	push	r1
     dc6:	8f 93       	push	r24
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	1f 92       	push	r1
     dcc:	8f 93       	push	r24
     dce:	80 e9       	ldi	r24, 0x90	; 144
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	9f 93       	push	r25
     dd4:	8f 93       	push	r24
     dd6:	0e 94 3d 05 	call	0xa7a	; 0xa7a <LCD_Printf>
}
     dda:	8d b7       	in	r24, 0x3d	; 61
     ddc:	9e b7       	in	r25, 0x3e	; 62
     dde:	0c 96       	adiw	r24, 0x0c	; 12
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	9e bf       	out	0x3e, r25	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	8d bf       	out	0x3d, r24	; 61
     dea:	08 95       	ret

00000dec <main>:
}



int main(void)
{
     dec:	4f 92       	push	r4
     dee:	5f 92       	push	r5
     df0:	6f 92       	push	r6
     df2:	7f 92       	push	r7
     df4:	8f 92       	push	r8
     df6:	9f 92       	push	r9
     df8:	af 92       	push	r10
     dfa:	bf 92       	push	r11
     dfc:	cf 92       	push	r12
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
	DDRB = 0b11111010;	//PB7-PB3 output for laser beams and PB1 output for buzzer
     e0c:	8a ef       	ldi	r24, 0xFA	; 250
     e0e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;		//initially all lasers are off
     e10:	18 ba       	out	0x18, r1	; 24
	
	RTC_values();
     e12:	0e 94 94 06 	call	0xd28	; 0xd28 <RTC_values>
	
	//LCD initialization
	LCD_SetUp(PC_6,P_NC,PC_7,P_NC,P_NC,P_NC,P_NC,PD_4,PD_5,PD_6,PD_7);
     e16:	8f e1       	ldi	r24, 0x1F	; 31
     e18:	8f 93       	push	r24
     e1a:	8e e1       	ldi	r24, 0x1E	; 30
     e1c:	8f 93       	push	r24
     e1e:	0f 2e       	mov	r0, r31
     e20:	fd e1       	ldi	r31, 0x1D	; 29
     e22:	8f 2e       	mov	r8, r31
     e24:	f0 2d       	mov	r31, r0
     e26:	0f 2e       	mov	r0, r31
     e28:	fc e1       	ldi	r31, 0x1C	; 28
     e2a:	af 2e       	mov	r10, r31
     e2c:	f0 2d       	mov	r31, r0
     e2e:	cc 24       	eor	r12, r12
     e30:	ca 94       	dec	r12
     e32:	ee 24       	eor	r14, r14
     e34:	ea 94       	dec	r14
     e36:	0f ef       	ldi	r16, 0xFF	; 255
     e38:	2f ef       	ldi	r18, 0xFF	; 255
     e3a:	47 e1       	ldi	r20, 0x17	; 23
     e3c:	6f ef       	ldi	r22, 0xFF	; 255
     e3e:	86 e1       	ldi	r24, 0x16	; 22
     e40:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_SetUp>
	LCD_Init(2,16);
     e44:	60 e1       	ldi	r22, 0x10	; 16
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_Init>
	//RTC initialization
	RTC_Init();
     e4c:	0e 94 95 08 	call	0x112a	; 0x112a <RTC_Init>
	
	//configuring registers for INT2
	GICR = (1 << INT2);
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	8b bf       	out	0x3b, r24	; 59
	MCUCSR |= (1 << ISC2);
     e54:	84 b7       	in	r24, 0x34	; 52
     e56:	80 64       	ori	r24, 0x40	; 64
     e58:	84 bf       	out	0x34, r24	; 52
	
	currentOff = 4;
     e5a:	84 e0       	ldi	r24, 0x04	; 4
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <currentOff+0x1>
     e62:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <currentOff>
	wait = 0;
     e66:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <wait+0x1>
     e6a:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <wait>
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
			}
			
			for(int i = 0; i < 5; i++)		//LDR voltage checking for laser cuts
			{
				//ADC initialization [needs to be done for each of the 5 LDRs]
				ADCSRA = 0b10000111;
     e72:	0f 2e       	mov	r0, r31
     e74:	f7 e8       	ldi	r31, 0x87	; 135
     e76:	7f 2e       	mov	r7, r31
     e78:	f0 2d       	mov	r31, r0
			score -= 10;	//score decreases with time so that faster maze solving gets you more score
			
			//display current score and number of lives left
			LCD_Clear();
			LCD_GoToLine(0);
			LCD_Printf("life: %d", life);
     e7a:	0f 2e       	mov	r0, r31
     e7c:	f9 ea       	ldi	r31, 0xA9	; 169
     e7e:	af 2e       	mov	r10, r31
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	bf 2e       	mov	r11, r31
     e84:	f0 2d       	mov	r31, r0
			LCD_GoToLine(1);
			LCD_Printf("score: %d", score);
     e86:	0f 2e       	mov	r0, r31
     e88:	f6 e8       	ldi	r31, 0x86	; 134
     e8a:	cf 2e       	mov	r12, r31
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	df 2e       	mov	r13, r31
     e90:	f0 2d       	mov	r31, r0
			PORTB = PORTB & 0xFD;	//buzzer off
			
			if(wait == 10)		//time to turn off the next laser
			{
				wait = 0;
				currentOff = (currentOff + 1) % 5;
     e92:	0f 2e       	mov	r0, r31
     e94:	f5 e0       	ldi	r31, 0x05	; 5
     e96:	4f 2e       	mov	r4, r31
     e98:	51 2c       	mov	r5, r1
     e9a:	f0 2d       	mov	r31, r0
				sei();					//enable global interrupt system
				continue;
			}
			LCD_Clear();
			LCD_GoToLine(0);
			LCD_Printf("LASER MAZE");
     e9c:	0f 2e       	mov	r0, r31
     e9e:	fe e9       	ldi	r31, 0x9E	; 158
     ea0:	ef 2e       	mov	r14, r31
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	ff 2e       	mov	r15, r31
     ea6:	f0 2d       	mov	r31, r0
			analog_ir_sensor_value = analog_ir_sensor_value/256;	//to work with a small range of voltages
			
			if(analog_ir_sensor_value < 2)
			{
				//object detected at start point
				start = 1;				//start game
     ea8:	88 24       	eor	r8, r8
     eaa:	83 94       	inc	r8
     eac:	91 2c       	mov	r9, r1
				PORTB = 0b11111000;		//turn on all the lasers
     eae:	0f 2e       	mov	r0, r31
     eb0:	f8 ef       	ldi	r31, 0xF8	; 248
     eb2:	6f 2e       	mov	r6, r31
     eb4:	f0 2d       	mov	r31, r0
	wait = 0;
	

	while (1)
	{
		if(start == 0)		//Game hasn't started yet
     eb6:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end>
     eba:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <__data_end+0x1>
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	89 f5       	brne	.+98     	; 0xf24 <main+0x138>
		{
			adc_init();
     ec2:	0e 94 a1 06 	call	0xd42	; 0xd42 <adc_init>
			/*Reading analog IR sensor value from Start IR*/
			analog_ir_sensor_value=read_adc_channel(0);		//Start IR is connected to ADC channel 0
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <read_adc_channel>
			analog_ir_sensor_value = analog_ir_sensor_value/256;	//to work with a small range of voltages
     ecc:	99 23       	and	r25, r25
     ece:	14 f4       	brge	.+4      	; 0xed4 <main+0xe8>
     ed0:	81 50       	subi	r24, 0x01	; 1
     ed2:	9f 4f       	sbci	r25, 0xFF	; 255
     ed4:	29 2f       	mov	r18, r25
     ed6:	39 2f       	mov	r19, r25
     ed8:	33 0f       	add	r19, r19
     eda:	33 0b       	sbc	r19, r19
     edc:	30 93 cb 00 	sts	0x00CB, r19	; 0x8000cb <analog_ir_sensor_value+0x1>
     ee0:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <analog_ir_sensor_value>
			
			if(analog_ir_sensor_value < 2)
     ee4:	22 30       	cpi	r18, 0x02	; 2
     ee6:	31 05       	cpc	r19, r1
     ee8:	5c f4       	brge	.+22     	; 0xf00 <main+0x114>
			{
				//object detected at start point
				start = 1;				//start game
     eea:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__data_end+0x1>
     eee:	80 92 b2 00 	sts	0x00B2, r8	; 0x8000b2 <__data_end>
				PORTB = 0b11111000;		//turn on all the lasers
     ef2:	68 ba       	out	0x18, r6	; 24
				RTC_SetDateTime(&rtc);	//start RTC
     ef4:	80 ed       	ldi	r24, 0xD0	; 208
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 94 a5 08 	call	0x114a	; 0x114a <RTC_SetDateTime>
				sei();					//enable global interrupt system
     efc:	78 94       	sei
				continue;
     efe:	db cf       	rjmp	.-74     	; 0xeb6 <main+0xca>
			}
			LCD_Clear();
     f00:	0e 94 c2 03 	call	0x784	; 0x784 <LCD_Clear>
			LCD_GoToLine(0);
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_GoToLine>
			LCD_Printf("LASER MAZE");
     f0a:	ff 92       	push	r15
     f0c:	ef 92       	push	r14
     f0e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <LCD_Printf>
     f12:	8f e1       	ldi	r24, 0x1F	; 31
     f14:	9e e4       	ldi	r25, 0x4E	; 78
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	f1 f7       	brne	.-4      	; 0xf16 <main+0x12a>
     f1a:	00 c0       	rjmp	.+0      	; 0xf1c <main+0x130>
     f1c:	00 00       	nop
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	c9 cf       	rjmp	.-110    	; 0xeb6 <main+0xca>
			_delay_ms(10);
		}
		else if(start == 1)		//Game ongoing
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	39 f6       	brne	.-114    	; 0xeb6 <main+0xca>
		{
			adc_init();
     f28:	0e 94 a1 06 	call	0xd42	; 0xd42 <adc_init>
			/*Reading analog IR sensor value from End IR*/
			analog_ir_sensor_value=read_adc_channel(2);		//End IR is connected to ADC channel 2
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <read_adc_channel>
			analog_ir_sensor_value = analog_ir_sensor_value/256;
     f32:	99 23       	and	r25, r25
     f34:	14 f4       	brge	.+4      	; 0xf3a <main+0x14e>
     f36:	81 50       	subi	r24, 0x01	; 1
     f38:	9f 4f       	sbci	r25, 0xFF	; 255
     f3a:	29 2f       	mov	r18, r25
     f3c:	39 2f       	mov	r19, r25
     f3e:	33 0f       	add	r19, r19
     f40:	33 0b       	sbc	r19, r19
     f42:	30 93 cb 00 	sts	0x00CB, r19	; 0x8000cb <analog_ir_sensor_value+0x1>
     f46:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <analog_ir_sensor_value>
			
			if(analog_ir_sensor_value < 2)
     f4a:	22 30       	cpi	r18, 0x02	; 2
     f4c:	31 05       	cpc	r19, r1
     f4e:	6c f4       	brge	.+26     	; 0xf6a <main+0x17e>
			{
				//object detected at end point
				score += 500;
     f50:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <score>
     f54:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <score+0x1>
     f58:	8c 50       	subi	r24, 0x0C	; 12
     f5a:	9e 4f       	sbci	r25, 0xFE	; 254
     f5c:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <score+0x1>
     f60:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <score>
				display_results();
     f64:	0e 94 b2 06 	call	0xd64	; 0xd64 <display_results>
				break;
     f68:	cd c0       	rjmp	.+410    	; 0x1104 <main+0x318>
			}
			
			//clearing ADC registers for the LDRs
			ADCSRA = 0x00;
     f6a:	16 b8       	out	0x06, r1	; 6
			ADMUX = 0x00;
     f6c:	17 b8       	out	0x07, r1	; 7
			
			PORTB = PORTB & 0xFD;	//buzzer off
     f6e:	c1 98       	cbi	0x18, 1	; 24
			
			if(wait == 10)		//time to turn off the next laser
     f70:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <wait>
     f74:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <wait+0x1>
     f78:	0a 97       	sbiw	r24, 0x0a	; 10
     f7a:	09 f0       	breq	.+2      	; 0xf7e <main+0x192>
     f7c:	be c0       	rjmp	.+380    	; 0x10fa <main+0x30e>
			{
				wait = 0;
     f7e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <wait+0x1>
     f82:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <wait>
				currentOff = (currentOff + 1) % 5;
     f86:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <currentOff>
     f8a:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <currentOff+0x1>
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	b2 01       	movw	r22, r4
     f92:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
     f96:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <currentOff+0x1>
     f9a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <currentOff>
				PORTB = output[currentOff];
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	fc 01       	movw	r30, r24
     fa4:	e2 59       	subi	r30, 0x92	; 146
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	80 81       	ld	r24, Z
     faa:	88 bb       	out	0x18, r24	; 24
     fac:	ef e1       	ldi	r30, 0x1F	; 31
     fae:	fe e4       	ldi	r31, 0x4E	; 78
     fb0:	31 97       	sbiw	r30, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <main+0x1c4>
     fb4:	00 c0       	rjmp	.+0      	; 0xfb6 <main+0x1ca>
     fb6:	00 00       	nop
     fb8:	a0 c0       	rjmp	.+320    	; 0x10fa <main+0x30e>
			}
			
			for(int i = 0; i < 5; i++)		//LDR voltage checking for laser cuts
			{
				//ADC initialization [needs to be done for each of the 5 LDRs]
				ADCSRA = 0b10000111;
     fba:	76 b8       	out	0x06, r7	; 6
				ADMUX = admux[i];
     fbc:	f8 01       	movw	r30, r16
     fbe:	80 81       	ld	r24, Z
     fc0:	0e 5f       	subi	r16, 0xFE	; 254
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
     fc4:	87 b9       	out	0x07, r24	; 7
				
				ADCSRA |= (1 << ADSC);
     fc6:	36 9a       	sbi	0x06, 6	; 6
				while (ADCSRA & (1 << ADSC));
     fc8:	36 99       	sbic	0x06, 6	; 6
     fca:	fe cf       	rjmp	.-4      	; 0xfc8 <main+0x1dc>
				adc_output = (ADC >> 6);
     fcc:	64 b1       	in	r22, 0x04	; 4
     fce:	75 b1       	in	r23, 0x05	; 5
     fd0:	00 24       	eor	r0, r0
     fd2:	66 0f       	add	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	00 1c       	adc	r0, r0
     fd8:	66 0f       	add	r22, r22
     fda:	77 1f       	adc	r23, r23
     fdc:	00 1c       	adc	r0, r0
     fde:	67 2f       	mov	r22, r23
     fe0:	70 2d       	mov	r23, r0
     fe2:	70 93 b9 00 	sts	0x00B9, r23	; 0x8000b9 <adc_output+0x1>
     fe6:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <adc_output>
				actual_voltage = 1.0 * adc_output / 256;
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 99 09 	call	0x1332	; 0x1332 <__floatunsisf>
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e8       	ldi	r20, 0x80	; 128
     ff8:	5b e3       	ldi	r21, 0x3B	; 59
     ffa:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__mulsf3>
     ffe:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <actual_voltage>
    1002:	70 93 b5 00 	sts	0x00B5, r23	; 0x8000b5 <actual_voltage+0x1>
    1006:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <actual_voltage+0x2>
    100a:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <actual_voltage+0x3>
				
				if((actual_voltage > 2) && (i != currentOff))
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	50 e4       	ldi	r21, 0x40	; 64
    1016:	0e 94 27 0a 	call	0x144e	; 0x144e <__gesf2>
    101a:	18 16       	cp	r1, r24
    101c:	04 f5       	brge	.+64     	; 0x105e <main+0x272>
    101e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <currentOff>
    1022:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <currentOff+0x1>
    1026:	8c 17       	cp	r24, r28
    1028:	9d 07       	cpc	r25, r29
    102a:	c9 f0       	breq	.+50     	; 0x105e <main+0x272>
				{
					//object crossed laser
					life--;
    102c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <life>
    1030:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <life+0x1>
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <life+0x1>
    103a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <life>
					score -= 50;
    103e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <score>
    1042:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <score+0x1>
    1046:	c2 97       	sbiw	r24, 0x32	; 50
    1048:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <score+0x1>
    104c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <score>
					PORTB = PORTB | 0x02;	//buzzer on
    1050:	c1 9a       	sbi	0x18, 1	; 24
					if(life == 0) 
    1052:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <life>
    1056:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <life+0x1>
    105a:	89 2b       	or	r24, r25
    105c:	59 f0       	breq	.+22     	; 0x1074 <main+0x288>
				currentOff = (currentOff + 1) % 5;
				PORTB = output[currentOff];
				_delay_ms(10);
			}
			
			for(int i = 0; i < 5; i++)		//LDR voltage checking for laser cuts
    105e:	21 96       	adiw	r28, 0x01	; 1
    1060:	c5 30       	cpi	r28, 0x05	; 5
    1062:	d1 05       	cpc	r29, r1
    1064:	09 f0       	breq	.+2      	; 0x1068 <main+0x27c>
    1066:	a9 cf       	rjmp	.-174    	; 0xfba <main+0x1ce>
						break;
					}
				}
			}
			
			if(life == 0)
    1068:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <life>
    106c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <life+0x1>
    1070:	89 2b       	or	r24, r25
    1072:	19 f4       	brne	.+6      	; 0x107a <main+0x28e>
			{
				display_results();
    1074:	0e 94 b2 06 	call	0xd64	; 0xd64 <display_results>
				break;
    1078:	45 c0       	rjmp	.+138    	; 0x1104 <main+0x318>
			}
			
			wait++;
    107a:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <wait>
    107e:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <wait+0x1>
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <wait+0x1>
    1088:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <wait>
			score -= 10;	//score decreases with time so that faster maze solving gets you more score
    108c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <score>
    1090:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <score+0x1>
    1094:	0a 97       	sbiw	r24, 0x0a	; 10
    1096:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <score+0x1>
    109a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <score>
			
			//display current score and number of lives left
			LCD_Clear();
    109e:	0e 94 c2 03 	call	0x784	; 0x784 <LCD_Clear>
			LCD_GoToLine(0);
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_GoToLine>
			LCD_Printf("life: %d", life);
    10a8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <life+0x1>
    10ac:	8f 93       	push	r24
    10ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <life>
    10b2:	8f 93       	push	r24
    10b4:	bf 92       	push	r11
    10b6:	af 92       	push	r10
    10b8:	0e 94 3d 05 	call	0xa7a	; 0xa7a <LCD_Printf>
			LCD_GoToLine(1);
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_GoToLine>
			LCD_Printf("score: %d", score);
    10c2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <score+0x1>
    10c6:	8f 93       	push	r24
    10c8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <score>
    10cc:	8f 93       	push	r24
    10ce:	df 92       	push	r13
    10d0:	cf 92       	push	r12
    10d2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <LCD_Printf>
    10d6:	ff ef       	ldi	r31, 0xFF	; 255
    10d8:	20 e7       	ldi	r18, 0x70	; 112
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	f1 50       	subi	r31, 0x01	; 1
    10de:	20 40       	sbci	r18, 0x00	; 0
    10e0:	80 40       	sbci	r24, 0x00	; 0
    10e2:	e1 f7       	brne	.-8      	; 0x10dc <main+0x2f0>
    10e4:	00 c0       	rjmp	.+0      	; 0x10e6 <main+0x2fa>
    10e6:	00 00       	nop
    10e8:	ed b7       	in	r30, 0x3d	; 61
    10ea:	fe b7       	in	r31, 0x3e	; 62
    10ec:	38 96       	adiw	r30, 0x08	; 8
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	fe bf       	out	0x3e, r31	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	ed bf       	out	0x3d, r30	; 61
    10f8:	de ce       	rjmp	.-580    	; 0xeb6 <main+0xca>
    10fa:	04 e6       	ldi	r16, 0x64	; 100
    10fc:	10 e0       	ldi	r17, 0x00	; 0
}



int main(void)
{
    10fe:	c0 e0       	ldi	r28, 0x00	; 0
    1100:	d0 e0       	ldi	r29, 0x00	; 0
    1102:	5b cf       	rjmp	.-330    	; 0xfba <main+0x1ce>
			LCD_Printf("score: %d", score);
			_delay_ms(100);
		}
	}
	return 0;
}
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	df 90       	pop	r13
    1116:	cf 90       	pop	r12
    1118:	bf 90       	pop	r11
    111a:	af 90       	pop	r10
    111c:	9f 90       	pop	r9
    111e:	8f 90       	pop	r8
    1120:	7f 90       	pop	r7
    1122:	6f 90       	pop	r6
    1124:	5f 90       	pop	r5
    1126:	4f 90       	pop	r4
    1128:	08 95       	ret

0000112a <RTC_Init>:

 * description :This function is used to Initialize the Ds1307 RTC.
***************************************************************************************************/
void RTC_Init(void)
{
    I2C_Init();                             // Initialize the I2c module.
    112a:	0e 94 3c 02 	call	0x478	; 0x478 <I2C_Init>
    I2C_Start();                            // Start I2C communication
    112e:	0e 94 42 02 	call	0x484	; 0x484 <I2C_Start>

    I2C_Write(C_Ds1307WriteMode_U8);        // Connect to DS1307 by sending its ID on I2c Bus
    1132:	80 ed       	ldi	r24, 0xD0	; 208
    1134:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>
    I2C_Write(C_Ds1307ControlRegAddress_U8);// Select the Ds1307 ControlRegister to configure Ds1307
    1138:	87 e0       	ldi	r24, 0x07	; 7
    113a:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>

    I2C_Write(0x00);                        // Write 0x00 to Control register to disable SQW-Out
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>

    I2C_Stop();                             // Stop I2C communication after initializing DS1307
    1144:	0e 94 48 02 	call	0x490	; 0x490 <I2C_Stop>
    1148:	08 95       	ret

0000114a <RTC_SetDateTime>:
        Note: The date and time should be of BCD format, 
             like 0x12,0x39,0x26 for 12hr,39min and 26sec.    
                  0x15,0x08,0x47 for 15th day,8th month and 47th year.                 
***************************************************************************************************/
void RTC_SetDateTime(rtc_t *rtc)
{
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	ec 01       	movw	r28, r24
    I2C_Start();                          // Start I2C communication
    1150:	0e 94 42 02 	call	0x484	; 0x484 <I2C_Start>

    I2C_Write(C_Ds1307WriteMode_U8);      // connect to DS1307 by sending its ID on I2c Bus
    1154:	80 ed       	ldi	r24, 0xD0	; 208
    1156:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>
    I2C_Write(C_Ds1307SecondRegAddress_U8); // Request sec RAM address at 00H
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>

    I2C_Write(rtc->sec);                    // Write sec from RAM address 00H
    1160:	88 81       	ld	r24, Y
    1162:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>
    I2C_Write(rtc->min);                    // Write min from RAM address 01H
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>
    I2C_Write(rtc->hour);                    // Write hour from RAM address 02H
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>
    I2C_Write(rtc->weekDay);                // Write weekDay on RAM address 03H
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>
    I2C_Write(rtc->date);                    // Write date on RAM address 04H
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>
    I2C_Write(rtc->month);                    // Write month on RAM address 05H
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>
    I2C_Write(rtc->year);                    // Write year on RAM address 06h
    1184:	8e 81       	ldd	r24, Y+6	; 0x06
    1186:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>

    I2C_Stop();                              // Stop I2C communication after Setting the Date
    118a:	0e 94 48 02 	call	0x490	; 0x490 <I2C_Stop>
}
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <RTC_GetDateTime>:
    Note: The date and time read from Ds1307 will be of BCD format, 
          like 0x12,0x39,0x26 for 12hr,39min and 26sec.    
               0x15,0x08,0x47 for 15th day,8th month and 47th year.              
***************************************************************************************************/
void RTC_GetDateTime(rtc_t *rtc)
{
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	ec 01       	movw	r28, r24
    I2C_Start();                            // Start I2C communication
    119a:	0e 94 42 02 	call	0x484	; 0x484 <I2C_Start>

    I2C_Write(C_Ds1307WriteMode_U8);        // connect to DS1307 by sending its ID on I2c Bus
    119e:	80 ed       	ldi	r24, 0xD0	; 208
    11a0:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>
    I2C_Write(C_Ds1307SecondRegAddress_U8); // Request Sec RAM address at 00H
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>

    I2C_Stop();                                // Stop I2C communication after selecting Sec Register
    11aa:	0e 94 48 02 	call	0x490	; 0x490 <I2C_Stop>

    I2C_Start();                            // Start I2C communication
    11ae:	0e 94 42 02 	call	0x484	; 0x484 <I2C_Start>
    I2C_Write(C_Ds1307ReadMode_U8);            // connect to DS1307(Read mode) by sending its ID
    11b2:	81 ed       	ldi	r24, 0xD1	; 209
    11b4:	0e 94 4f 02 	call	0x49e	; 0x49e <I2C_Write>

    rtc->sec = I2C_Read(1);                // read second and return Positive ACK
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	0e 94 56 02 	call	0x4ac	; 0x4ac <I2C_Read>
    11be:	88 83       	st	Y, r24
    rtc->min = I2C_Read(1);                 // read minute and return Positive ACK
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	0e 94 56 02 	call	0x4ac	; 0x4ac <I2C_Read>
    11c6:	89 83       	std	Y+1, r24	; 0x01
    rtc->hour= I2C_Read(1);               // read hour and return Negative/No ACK
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	0e 94 56 02 	call	0x4ac	; 0x4ac <I2C_Read>
    11ce:	8a 83       	std	Y+2, r24	; 0x02
    rtc->weekDay = I2C_Read(1);           // read weekDay and return Positive ACK
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	0e 94 56 02 	call	0x4ac	; 0x4ac <I2C_Read>
    11d6:	8b 83       	std	Y+3, r24	; 0x03
    rtc->date= I2C_Read(1);              // read Date and return Positive ACK
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	0e 94 56 02 	call	0x4ac	; 0x4ac <I2C_Read>
    11de:	8c 83       	std	Y+4, r24	; 0x04
    rtc->month=I2C_Read(1);            // read Month and return Positive ACK
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	0e 94 56 02 	call	0x4ac	; 0x4ac <I2C_Read>
    11e6:	8d 83       	std	Y+5, r24	; 0x05
    rtc->year =I2C_Read(0);             // read Year and return Negative/No ACK
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	0e 94 56 02 	call	0x4ac	; 0x4ac <I2C_Read>
    11ee:	8e 83       	std	Y+6, r24	; 0x06

    I2C_Stop();                              // Stop I2C communication after reading the Date
    11f0:	0e 94 48 02 	call	0x490	; 0x490 <I2C_Stop>
}
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	08 95       	ret

000011fa <__subsf3>:
    11fa:	50 58       	subi	r21, 0x80	; 128

000011fc <__addsf3>:
    11fc:	bb 27       	eor	r27, r27
    11fe:	aa 27       	eor	r26, r26
    1200:	0e 94 15 09 	call	0x122a	; 0x122a <__addsf3x>
    1204:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_round>
    1208:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_pscA>
    120c:	38 f0       	brcs	.+14     	; 0x121c <__addsf3+0x20>
    120e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_pscB>
    1212:	20 f0       	brcs	.+8      	; 0x121c <__addsf3+0x20>
    1214:	39 f4       	brne	.+14     	; 0x1224 <__addsf3+0x28>
    1216:	9f 3f       	cpi	r25, 0xFF	; 255
    1218:	19 f4       	brne	.+6      	; 0x1220 <__addsf3+0x24>
    121a:	26 f4       	brtc	.+8      	; 0x1224 <__addsf3+0x28>
    121c:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__fp_nan>
    1220:	0e f4       	brtc	.+2      	; 0x1224 <__addsf3+0x28>
    1222:	e0 95       	com	r30
    1224:	e7 fb       	bst	r30, 7
    1226:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_inf>

0000122a <__addsf3x>:
    122a:	e9 2f       	mov	r30, r25
    122c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__fp_split3>
    1230:	58 f3       	brcs	.-42     	; 0x1208 <__addsf3+0xc>
    1232:	ba 17       	cp	r27, r26
    1234:	62 07       	cpc	r22, r18
    1236:	73 07       	cpc	r23, r19
    1238:	84 07       	cpc	r24, r20
    123a:	95 07       	cpc	r25, r21
    123c:	20 f0       	brcs	.+8      	; 0x1246 <__addsf3x+0x1c>
    123e:	79 f4       	brne	.+30     	; 0x125e <__addsf3x+0x34>
    1240:	a6 f5       	brtc	.+104    	; 0x12aa <__addsf3x+0x80>
    1242:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__fp_zero>
    1246:	0e f4       	brtc	.+2      	; 0x124a <__addsf3x+0x20>
    1248:	e0 95       	com	r30
    124a:	0b 2e       	mov	r0, r27
    124c:	ba 2f       	mov	r27, r26
    124e:	a0 2d       	mov	r26, r0
    1250:	0b 01       	movw	r0, r22
    1252:	b9 01       	movw	r22, r18
    1254:	90 01       	movw	r18, r0
    1256:	0c 01       	movw	r0, r24
    1258:	ca 01       	movw	r24, r20
    125a:	a0 01       	movw	r20, r0
    125c:	11 24       	eor	r1, r1
    125e:	ff 27       	eor	r31, r31
    1260:	59 1b       	sub	r21, r25
    1262:	99 f0       	breq	.+38     	; 0x128a <__addsf3x+0x60>
    1264:	59 3f       	cpi	r21, 0xF9	; 249
    1266:	50 f4       	brcc	.+20     	; 0x127c <__addsf3x+0x52>
    1268:	50 3e       	cpi	r21, 0xE0	; 224
    126a:	68 f1       	brcs	.+90     	; 0x12c6 <__addsf3x+0x9c>
    126c:	1a 16       	cp	r1, r26
    126e:	f0 40       	sbci	r31, 0x00	; 0
    1270:	a2 2f       	mov	r26, r18
    1272:	23 2f       	mov	r18, r19
    1274:	34 2f       	mov	r19, r20
    1276:	44 27       	eor	r20, r20
    1278:	58 5f       	subi	r21, 0xF8	; 248
    127a:	f3 cf       	rjmp	.-26     	; 0x1262 <__addsf3x+0x38>
    127c:	46 95       	lsr	r20
    127e:	37 95       	ror	r19
    1280:	27 95       	ror	r18
    1282:	a7 95       	ror	r26
    1284:	f0 40       	sbci	r31, 0x00	; 0
    1286:	53 95       	inc	r21
    1288:	c9 f7       	brne	.-14     	; 0x127c <__addsf3x+0x52>
    128a:	7e f4       	brtc	.+30     	; 0x12aa <__addsf3x+0x80>
    128c:	1f 16       	cp	r1, r31
    128e:	ba 0b       	sbc	r27, r26
    1290:	62 0b       	sbc	r22, r18
    1292:	73 0b       	sbc	r23, r19
    1294:	84 0b       	sbc	r24, r20
    1296:	ba f0       	brmi	.+46     	; 0x12c6 <__addsf3x+0x9c>
    1298:	91 50       	subi	r25, 0x01	; 1
    129a:	a1 f0       	breq	.+40     	; 0x12c4 <__addsf3x+0x9a>
    129c:	ff 0f       	add	r31, r31
    129e:	bb 1f       	adc	r27, r27
    12a0:	66 1f       	adc	r22, r22
    12a2:	77 1f       	adc	r23, r23
    12a4:	88 1f       	adc	r24, r24
    12a6:	c2 f7       	brpl	.-16     	; 0x1298 <__addsf3x+0x6e>
    12a8:	0e c0       	rjmp	.+28     	; 0x12c6 <__addsf3x+0x9c>
    12aa:	ba 0f       	add	r27, r26
    12ac:	62 1f       	adc	r22, r18
    12ae:	73 1f       	adc	r23, r19
    12b0:	84 1f       	adc	r24, r20
    12b2:	48 f4       	brcc	.+18     	; 0x12c6 <__addsf3x+0x9c>
    12b4:	87 95       	ror	r24
    12b6:	77 95       	ror	r23
    12b8:	67 95       	ror	r22
    12ba:	b7 95       	ror	r27
    12bc:	f7 95       	ror	r31
    12be:	9e 3f       	cpi	r25, 0xFE	; 254
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <__addsf3x+0x9a>
    12c2:	b0 cf       	rjmp	.-160    	; 0x1224 <__addsf3+0x28>
    12c4:	93 95       	inc	r25
    12c6:	88 0f       	add	r24, r24
    12c8:	08 f0       	brcs	.+2      	; 0x12cc <__addsf3x+0xa2>
    12ca:	99 27       	eor	r25, r25
    12cc:	ee 0f       	add	r30, r30
    12ce:	97 95       	ror	r25
    12d0:	87 95       	ror	r24
    12d2:	08 95       	ret

000012d4 <__fixunssfsi>:
    12d4:	0e 94 06 0a 	call	0x140c	; 0x140c <__fp_splitA>
    12d8:	88 f0       	brcs	.+34     	; 0x12fc <__fixunssfsi+0x28>
    12da:	9f 57       	subi	r25, 0x7F	; 127
    12dc:	98 f0       	brcs	.+38     	; 0x1304 <__fixunssfsi+0x30>
    12de:	b9 2f       	mov	r27, r25
    12e0:	99 27       	eor	r25, r25
    12e2:	b7 51       	subi	r27, 0x17	; 23
    12e4:	b0 f0       	brcs	.+44     	; 0x1312 <__fixunssfsi+0x3e>
    12e6:	e1 f0       	breq	.+56     	; 0x1320 <__fixunssfsi+0x4c>
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	1a f0       	brmi	.+6      	; 0x12f8 <__fixunssfsi+0x24>
    12f2:	ba 95       	dec	r27
    12f4:	c9 f7       	brne	.-14     	; 0x12e8 <__fixunssfsi+0x14>
    12f6:	14 c0       	rjmp	.+40     	; 0x1320 <__fixunssfsi+0x4c>
    12f8:	b1 30       	cpi	r27, 0x01	; 1
    12fa:	91 f0       	breq	.+36     	; 0x1320 <__fixunssfsi+0x4c>
    12fc:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fp_zero>
    1300:	b1 e0       	ldi	r27, 0x01	; 1
    1302:	08 95       	ret
    1304:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__fp_zero>
    1308:	67 2f       	mov	r22, r23
    130a:	78 2f       	mov	r23, r24
    130c:	88 27       	eor	r24, r24
    130e:	b8 5f       	subi	r27, 0xF8	; 248
    1310:	39 f0       	breq	.+14     	; 0x1320 <__fixunssfsi+0x4c>
    1312:	b9 3f       	cpi	r27, 0xF9	; 249
    1314:	cc f3       	brlt	.-14     	; 0x1308 <__fixunssfsi+0x34>
    1316:	86 95       	lsr	r24
    1318:	77 95       	ror	r23
    131a:	67 95       	ror	r22
    131c:	b3 95       	inc	r27
    131e:	d9 f7       	brne	.-10     	; 0x1316 <__fixunssfsi+0x42>
    1320:	3e f4       	brtc	.+14     	; 0x1330 <__fixunssfsi+0x5c>
    1322:	90 95       	com	r25
    1324:	80 95       	com	r24
    1326:	70 95       	com	r23
    1328:	61 95       	neg	r22
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	8f 4f       	sbci	r24, 0xFF	; 255
    132e:	9f 4f       	sbci	r25, 0xFF	; 255
    1330:	08 95       	ret

00001332 <__floatunsisf>:
    1332:	e8 94       	clt
    1334:	09 c0       	rjmp	.+18     	; 0x1348 <__floatsisf+0x12>

00001336 <__floatsisf>:
    1336:	97 fb       	bst	r25, 7
    1338:	3e f4       	brtc	.+14     	; 0x1348 <__floatsisf+0x12>
    133a:	90 95       	com	r25
    133c:	80 95       	com	r24
    133e:	70 95       	com	r23
    1340:	61 95       	neg	r22
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	8f 4f       	sbci	r24, 0xFF	; 255
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	99 23       	and	r25, r25
    134a:	a9 f0       	breq	.+42     	; 0x1376 <__floatsisf+0x40>
    134c:	f9 2f       	mov	r31, r25
    134e:	96 e9       	ldi	r25, 0x96	; 150
    1350:	bb 27       	eor	r27, r27
    1352:	93 95       	inc	r25
    1354:	f6 95       	lsr	r31
    1356:	87 95       	ror	r24
    1358:	77 95       	ror	r23
    135a:	67 95       	ror	r22
    135c:	b7 95       	ror	r27
    135e:	f1 11       	cpse	r31, r1
    1360:	f8 cf       	rjmp	.-16     	; 0x1352 <__floatsisf+0x1c>
    1362:	fa f4       	brpl	.+62     	; 0x13a2 <__floatsisf+0x6c>
    1364:	bb 0f       	add	r27, r27
    1366:	11 f4       	brne	.+4      	; 0x136c <__floatsisf+0x36>
    1368:	60 ff       	sbrs	r22, 0
    136a:	1b c0       	rjmp	.+54     	; 0x13a2 <__floatsisf+0x6c>
    136c:	6f 5f       	subi	r22, 0xFF	; 255
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	8f 4f       	sbci	r24, 0xFF	; 255
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	16 c0       	rjmp	.+44     	; 0x13a2 <__floatsisf+0x6c>
    1376:	88 23       	and	r24, r24
    1378:	11 f0       	breq	.+4      	; 0x137e <__floatsisf+0x48>
    137a:	96 e9       	ldi	r25, 0x96	; 150
    137c:	11 c0       	rjmp	.+34     	; 0x13a0 <__floatsisf+0x6a>
    137e:	77 23       	and	r23, r23
    1380:	21 f0       	breq	.+8      	; 0x138a <__floatsisf+0x54>
    1382:	9e e8       	ldi	r25, 0x8E	; 142
    1384:	87 2f       	mov	r24, r23
    1386:	76 2f       	mov	r23, r22
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <__floatsisf+0x5e>
    138a:	66 23       	and	r22, r22
    138c:	71 f0       	breq	.+28     	; 0x13aa <__floatsisf+0x74>
    138e:	96 e8       	ldi	r25, 0x86	; 134
    1390:	86 2f       	mov	r24, r22
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	2a f0       	brmi	.+10     	; 0x13a2 <__floatsisf+0x6c>
    1398:	9a 95       	dec	r25
    139a:	66 0f       	add	r22, r22
    139c:	77 1f       	adc	r23, r23
    139e:	88 1f       	adc	r24, r24
    13a0:	da f7       	brpl	.-10     	; 0x1398 <__floatsisf+0x62>
    13a2:	88 0f       	add	r24, r24
    13a4:	96 95       	lsr	r25
    13a6:	87 95       	ror	r24
    13a8:	97 f9       	bld	r25, 7
    13aa:	08 95       	ret

000013ac <__fp_inf>:
    13ac:	97 f9       	bld	r25, 7
    13ae:	9f 67       	ori	r25, 0x7F	; 127
    13b0:	80 e8       	ldi	r24, 0x80	; 128
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	08 95       	ret

000013b8 <__fp_nan>:
    13b8:	9f ef       	ldi	r25, 0xFF	; 255
    13ba:	80 ec       	ldi	r24, 0xC0	; 192
    13bc:	08 95       	ret

000013be <__fp_pscA>:
    13be:	00 24       	eor	r0, r0
    13c0:	0a 94       	dec	r0
    13c2:	16 16       	cp	r1, r22
    13c4:	17 06       	cpc	r1, r23
    13c6:	18 06       	cpc	r1, r24
    13c8:	09 06       	cpc	r0, r25
    13ca:	08 95       	ret

000013cc <__fp_pscB>:
    13cc:	00 24       	eor	r0, r0
    13ce:	0a 94       	dec	r0
    13d0:	12 16       	cp	r1, r18
    13d2:	13 06       	cpc	r1, r19
    13d4:	14 06       	cpc	r1, r20
    13d6:	05 06       	cpc	r0, r21
    13d8:	08 95       	ret

000013da <__fp_round>:
    13da:	09 2e       	mov	r0, r25
    13dc:	03 94       	inc	r0
    13de:	00 0c       	add	r0, r0
    13e0:	11 f4       	brne	.+4      	; 0x13e6 <__fp_round+0xc>
    13e2:	88 23       	and	r24, r24
    13e4:	52 f0       	brmi	.+20     	; 0x13fa <__fp_round+0x20>
    13e6:	bb 0f       	add	r27, r27
    13e8:	40 f4       	brcc	.+16     	; 0x13fa <__fp_round+0x20>
    13ea:	bf 2b       	or	r27, r31
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <__fp_round+0x18>
    13ee:	60 ff       	sbrs	r22, 0
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <__fp_round+0x20>
    13f2:	6f 5f       	subi	r22, 0xFF	; 255
    13f4:	7f 4f       	sbci	r23, 0xFF	; 255
    13f6:	8f 4f       	sbci	r24, 0xFF	; 255
    13f8:	9f 4f       	sbci	r25, 0xFF	; 255
    13fa:	08 95       	ret

000013fc <__fp_split3>:
    13fc:	57 fd       	sbrc	r21, 7
    13fe:	90 58       	subi	r25, 0x80	; 128
    1400:	44 0f       	add	r20, r20
    1402:	55 1f       	adc	r21, r21
    1404:	59 f0       	breq	.+22     	; 0x141c <__fp_splitA+0x10>
    1406:	5f 3f       	cpi	r21, 0xFF	; 255
    1408:	71 f0       	breq	.+28     	; 0x1426 <__fp_splitA+0x1a>
    140a:	47 95       	ror	r20

0000140c <__fp_splitA>:
    140c:	88 0f       	add	r24, r24
    140e:	97 fb       	bst	r25, 7
    1410:	99 1f       	adc	r25, r25
    1412:	61 f0       	breq	.+24     	; 0x142c <__fp_splitA+0x20>
    1414:	9f 3f       	cpi	r25, 0xFF	; 255
    1416:	79 f0       	breq	.+30     	; 0x1436 <__fp_splitA+0x2a>
    1418:	87 95       	ror	r24
    141a:	08 95       	ret
    141c:	12 16       	cp	r1, r18
    141e:	13 06       	cpc	r1, r19
    1420:	14 06       	cpc	r1, r20
    1422:	55 1f       	adc	r21, r21
    1424:	f2 cf       	rjmp	.-28     	; 0x140a <__fp_split3+0xe>
    1426:	46 95       	lsr	r20
    1428:	f1 df       	rcall	.-30     	; 0x140c <__fp_splitA>
    142a:	08 c0       	rjmp	.+16     	; 0x143c <__fp_splitA+0x30>
    142c:	16 16       	cp	r1, r22
    142e:	17 06       	cpc	r1, r23
    1430:	18 06       	cpc	r1, r24
    1432:	99 1f       	adc	r25, r25
    1434:	f1 cf       	rjmp	.-30     	; 0x1418 <__fp_splitA+0xc>
    1436:	86 95       	lsr	r24
    1438:	71 05       	cpc	r23, r1
    143a:	61 05       	cpc	r22, r1
    143c:	08 94       	sec
    143e:	08 95       	ret

00001440 <__fp_zero>:
    1440:	e8 94       	clt

00001442 <__fp_szero>:
    1442:	bb 27       	eor	r27, r27
    1444:	66 27       	eor	r22, r22
    1446:	77 27       	eor	r23, r23
    1448:	cb 01       	movw	r24, r22
    144a:	97 f9       	bld	r25, 7
    144c:	08 95       	ret

0000144e <__gesf2>:
    144e:	0e 94 99 0a 	call	0x1532	; 0x1532 <__fp_cmp>
    1452:	08 f4       	brcc	.+2      	; 0x1456 <__gesf2+0x8>
    1454:	8f ef       	ldi	r24, 0xFF	; 255
    1456:	08 95       	ret

00001458 <__mulsf3>:
    1458:	0e 94 3f 0a 	call	0x147e	; 0x147e <__mulsf3x>
    145c:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_round>
    1460:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_pscA>
    1464:	38 f0       	brcs	.+14     	; 0x1474 <__mulsf3+0x1c>
    1466:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_pscB>
    146a:	20 f0       	brcs	.+8      	; 0x1474 <__mulsf3+0x1c>
    146c:	95 23       	and	r25, r21
    146e:	11 f0       	breq	.+4      	; 0x1474 <__mulsf3+0x1c>
    1470:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_inf>
    1474:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__fp_nan>
    1478:	11 24       	eor	r1, r1
    147a:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__fp_szero>

0000147e <__mulsf3x>:
    147e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__fp_split3>
    1482:	70 f3       	brcs	.-36     	; 0x1460 <__mulsf3+0x8>

00001484 <__mulsf3_pse>:
    1484:	95 9f       	mul	r25, r21
    1486:	c1 f3       	breq	.-16     	; 0x1478 <__mulsf3+0x20>
    1488:	95 0f       	add	r25, r21
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	55 1f       	adc	r21, r21
    148e:	62 9f       	mul	r22, r18
    1490:	f0 01       	movw	r30, r0
    1492:	72 9f       	mul	r23, r18
    1494:	bb 27       	eor	r27, r27
    1496:	f0 0d       	add	r31, r0
    1498:	b1 1d       	adc	r27, r1
    149a:	63 9f       	mul	r22, r19
    149c:	aa 27       	eor	r26, r26
    149e:	f0 0d       	add	r31, r0
    14a0:	b1 1d       	adc	r27, r1
    14a2:	aa 1f       	adc	r26, r26
    14a4:	64 9f       	mul	r22, r20
    14a6:	66 27       	eor	r22, r22
    14a8:	b0 0d       	add	r27, r0
    14aa:	a1 1d       	adc	r26, r1
    14ac:	66 1f       	adc	r22, r22
    14ae:	82 9f       	mul	r24, r18
    14b0:	22 27       	eor	r18, r18
    14b2:	b0 0d       	add	r27, r0
    14b4:	a1 1d       	adc	r26, r1
    14b6:	62 1f       	adc	r22, r18
    14b8:	73 9f       	mul	r23, r19
    14ba:	b0 0d       	add	r27, r0
    14bc:	a1 1d       	adc	r26, r1
    14be:	62 1f       	adc	r22, r18
    14c0:	83 9f       	mul	r24, r19
    14c2:	a0 0d       	add	r26, r0
    14c4:	61 1d       	adc	r22, r1
    14c6:	22 1f       	adc	r18, r18
    14c8:	74 9f       	mul	r23, r20
    14ca:	33 27       	eor	r19, r19
    14cc:	a0 0d       	add	r26, r0
    14ce:	61 1d       	adc	r22, r1
    14d0:	23 1f       	adc	r18, r19
    14d2:	84 9f       	mul	r24, r20
    14d4:	60 0d       	add	r22, r0
    14d6:	21 1d       	adc	r18, r1
    14d8:	82 2f       	mov	r24, r18
    14da:	76 2f       	mov	r23, r22
    14dc:	6a 2f       	mov	r22, r26
    14de:	11 24       	eor	r1, r1
    14e0:	9f 57       	subi	r25, 0x7F	; 127
    14e2:	50 40       	sbci	r21, 0x00	; 0
    14e4:	9a f0       	brmi	.+38     	; 0x150c <__mulsf3_pse+0x88>
    14e6:	f1 f0       	breq	.+60     	; 0x1524 <__mulsf3_pse+0xa0>
    14e8:	88 23       	and	r24, r24
    14ea:	4a f0       	brmi	.+18     	; 0x14fe <__mulsf3_pse+0x7a>
    14ec:	ee 0f       	add	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	bb 1f       	adc	r27, r27
    14f2:	66 1f       	adc	r22, r22
    14f4:	77 1f       	adc	r23, r23
    14f6:	88 1f       	adc	r24, r24
    14f8:	91 50       	subi	r25, 0x01	; 1
    14fa:	50 40       	sbci	r21, 0x00	; 0
    14fc:	a9 f7       	brne	.-22     	; 0x14e8 <__mulsf3_pse+0x64>
    14fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1500:	51 05       	cpc	r21, r1
    1502:	80 f0       	brcs	.+32     	; 0x1524 <__mulsf3_pse+0xa0>
    1504:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_inf>
    1508:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__fp_szero>
    150c:	5f 3f       	cpi	r21, 0xFF	; 255
    150e:	e4 f3       	brlt	.-8      	; 0x1508 <__mulsf3_pse+0x84>
    1510:	98 3e       	cpi	r25, 0xE8	; 232
    1512:	d4 f3       	brlt	.-12     	; 0x1508 <__mulsf3_pse+0x84>
    1514:	86 95       	lsr	r24
    1516:	77 95       	ror	r23
    1518:	67 95       	ror	r22
    151a:	b7 95       	ror	r27
    151c:	f7 95       	ror	r31
    151e:	e7 95       	ror	r30
    1520:	9f 5f       	subi	r25, 0xFF	; 255
    1522:	c1 f7       	brne	.-16     	; 0x1514 <__mulsf3_pse+0x90>
    1524:	fe 2b       	or	r31, r30
    1526:	88 0f       	add	r24, r24
    1528:	91 1d       	adc	r25, r1
    152a:	96 95       	lsr	r25
    152c:	87 95       	ror	r24
    152e:	97 f9       	bld	r25, 7
    1530:	08 95       	ret

00001532 <__fp_cmp>:
    1532:	99 0f       	add	r25, r25
    1534:	00 08       	sbc	r0, r0
    1536:	55 0f       	add	r21, r21
    1538:	aa 0b       	sbc	r26, r26
    153a:	e0 e8       	ldi	r30, 0x80	; 128
    153c:	fe ef       	ldi	r31, 0xFE	; 254
    153e:	16 16       	cp	r1, r22
    1540:	17 06       	cpc	r1, r23
    1542:	e8 07       	cpc	r30, r24
    1544:	f9 07       	cpc	r31, r25
    1546:	c0 f0       	brcs	.+48     	; 0x1578 <__fp_cmp+0x46>
    1548:	12 16       	cp	r1, r18
    154a:	13 06       	cpc	r1, r19
    154c:	e4 07       	cpc	r30, r20
    154e:	f5 07       	cpc	r31, r21
    1550:	98 f0       	brcs	.+38     	; 0x1578 <__fp_cmp+0x46>
    1552:	62 1b       	sub	r22, r18
    1554:	73 0b       	sbc	r23, r19
    1556:	84 0b       	sbc	r24, r20
    1558:	95 0b       	sbc	r25, r21
    155a:	39 f4       	brne	.+14     	; 0x156a <__fp_cmp+0x38>
    155c:	0a 26       	eor	r0, r26
    155e:	61 f0       	breq	.+24     	; 0x1578 <__fp_cmp+0x46>
    1560:	23 2b       	or	r18, r19
    1562:	24 2b       	or	r18, r20
    1564:	25 2b       	or	r18, r21
    1566:	21 f4       	brne	.+8      	; 0x1570 <__fp_cmp+0x3e>
    1568:	08 95       	ret
    156a:	0a 26       	eor	r0, r26
    156c:	09 f4       	brne	.+2      	; 0x1570 <__fp_cmp+0x3e>
    156e:	a1 40       	sbci	r26, 0x01	; 1
    1570:	a6 95       	lsr	r26
    1572:	8f ef       	ldi	r24, 0xFF	; 255
    1574:	81 1d       	adc	r24, r1
    1576:	81 1d       	adc	r24, r1
    1578:	08 95       	ret

0000157a <__divmodhi4>:
    157a:	97 fb       	bst	r25, 7
    157c:	07 2e       	mov	r0, r23
    157e:	16 f4       	brtc	.+4      	; 0x1584 <__divmodhi4+0xa>
    1580:	00 94       	com	r0
    1582:	07 d0       	rcall	.+14     	; 0x1592 <__divmodhi4_neg1>
    1584:	77 fd       	sbrc	r23, 7
    1586:	09 d0       	rcall	.+18     	; 0x159a <__divmodhi4_neg2>
    1588:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__udivmodhi4>
    158c:	07 fc       	sbrc	r0, 7
    158e:	05 d0       	rcall	.+10     	; 0x159a <__divmodhi4_neg2>
    1590:	3e f4       	brtc	.+14     	; 0x15a0 <__divmodhi4_exit>

00001592 <__divmodhi4_neg1>:
    1592:	90 95       	com	r25
    1594:	81 95       	neg	r24
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	08 95       	ret

0000159a <__divmodhi4_neg2>:
    159a:	70 95       	com	r23
    159c:	61 95       	neg	r22
    159e:	7f 4f       	sbci	r23, 0xFF	; 255

000015a0 <__divmodhi4_exit>:
    15a0:	08 95       	ret

000015a2 <__udivmodsi4>:
    15a2:	a1 e2       	ldi	r26, 0x21	; 33
    15a4:	1a 2e       	mov	r1, r26
    15a6:	aa 1b       	sub	r26, r26
    15a8:	bb 1b       	sub	r27, r27
    15aa:	fd 01       	movw	r30, r26
    15ac:	0d c0       	rjmp	.+26     	; 0x15c8 <__udivmodsi4_ep>

000015ae <__udivmodsi4_loop>:
    15ae:	aa 1f       	adc	r26, r26
    15b0:	bb 1f       	adc	r27, r27
    15b2:	ee 1f       	adc	r30, r30
    15b4:	ff 1f       	adc	r31, r31
    15b6:	a2 17       	cp	r26, r18
    15b8:	b3 07       	cpc	r27, r19
    15ba:	e4 07       	cpc	r30, r20
    15bc:	f5 07       	cpc	r31, r21
    15be:	20 f0       	brcs	.+8      	; 0x15c8 <__udivmodsi4_ep>
    15c0:	a2 1b       	sub	r26, r18
    15c2:	b3 0b       	sbc	r27, r19
    15c4:	e4 0b       	sbc	r30, r20
    15c6:	f5 0b       	sbc	r31, r21

000015c8 <__udivmodsi4_ep>:
    15c8:	66 1f       	adc	r22, r22
    15ca:	77 1f       	adc	r23, r23
    15cc:	88 1f       	adc	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	1a 94       	dec	r1
    15d2:	69 f7       	brne	.-38     	; 0x15ae <__udivmodsi4_loop>
    15d4:	60 95       	com	r22
    15d6:	70 95       	com	r23
    15d8:	80 95       	com	r24
    15da:	90 95       	com	r25
    15dc:	9b 01       	movw	r18, r22
    15de:	ac 01       	movw	r20, r24
    15e0:	bd 01       	movw	r22, r26
    15e2:	cf 01       	movw	r24, r30
    15e4:	08 95       	ret

000015e6 <__tablejump2__>:
    15e6:	ee 0f       	add	r30, r30
    15e8:	ff 1f       	adc	r31, r31
    15ea:	05 90       	lpm	r0, Z+
    15ec:	f4 91       	lpm	r31, Z
    15ee:	e0 2d       	mov	r30, r0
    15f0:	09 94       	ijmp

000015f2 <__udivmodhi4>:
    15f2:	aa 1b       	sub	r26, r26
    15f4:	bb 1b       	sub	r27, r27
    15f6:	51 e1       	ldi	r21, 0x11	; 17
    15f8:	07 c0       	rjmp	.+14     	; 0x1608 <__udivmodhi4_ep>

000015fa <__udivmodhi4_loop>:
    15fa:	aa 1f       	adc	r26, r26
    15fc:	bb 1f       	adc	r27, r27
    15fe:	a6 17       	cp	r26, r22
    1600:	b7 07       	cpc	r27, r23
    1602:	10 f0       	brcs	.+4      	; 0x1608 <__udivmodhi4_ep>
    1604:	a6 1b       	sub	r26, r22
    1606:	b7 0b       	sbc	r27, r23

00001608 <__udivmodhi4_ep>:
    1608:	88 1f       	adc	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	5a 95       	dec	r21
    160e:	a9 f7       	brne	.-22     	; 0x15fa <__udivmodhi4_loop>
    1610:	80 95       	com	r24
    1612:	90 95       	com	r25
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	08 95       	ret

0000161a <_exit>:
    161a:	f8 94       	cli

0000161c <__stop_program>:
    161c:	ff cf       	rjmp	.-2      	; 0x161c <__stop_program>
